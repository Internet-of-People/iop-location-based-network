// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopLocNet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IopLocNet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace iop {
namespace locnet {

namespace {

const ::google::protobuf::Descriptor* ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeContact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeContact_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageWithHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageWithHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
struct MessageOneofInstance {
  const ::iop::locnet::Request* request_;
  const ::iop::locnet::Response* response_;
}* Message_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::iop::locnet::LocalServiceRequest* localservice_;
  const ::iop::locnet::RemoteNodeRequest* remotenode_;
  const ::iop::locnet::ClientRequest* client_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::iop::locnet::LocalServiceResponse* localservice_;
  const ::iop::locnet::RemoteNodeResponse* remotenode_;
  const ::iop::locnet::ClientResponse* client_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LocalServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalServiceRequest_reflection_ = NULL;
struct LocalServiceRequestOneofInstance {
  const ::iop::locnet::RegisterServiceRequest* registerservice_;
  const ::iop::locnet::DeregisterServiceRequest* deregisterservice_;
  const ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* getneighbournodes_;
  const ::iop::locnet::NeighbourhoodChangedNotificationRequest* neighbourhoodchanged_;
}* LocalServiceRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LocalServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalServiceResponse_reflection_ = NULL;
struct LocalServiceResponseOneofInstance {
  const ::iop::locnet::RegisterServiceResponse* registerservice_;
  const ::iop::locnet::DeregisterServiceResponse* deregisterservice_;
  const ::iop::locnet::GetNeighbourNodesByDistanceResponse* getneighbournodes_;
  const ::iop::locnet::NeighbourhoodChangedNotificationResponse* neighbourhoodupdated_;
}* LocalServiceResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RegisterServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeregisterServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeregisterServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeregisterServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeregisterServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceLocalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNeighbourNodesByDistanceLocalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNeighbourNodesByDistanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeighbourhoodChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeighbourhoodChange_reflection_ = NULL;
struct NeighbourhoodChangeOneofInstance {
  const ::iop::locnet::NodeInfo* addednodeinfo_;
  const ::iop::locnet::NodeInfo* updatednodeinfo_;
  ::google::protobuf::internal::ArenaStringPtr removednodeid_;
}* NeighbourhoodChange_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeighbourhoodChangedNotificationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeighbourhoodChangedNotificationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteNodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteNodeRequest_reflection_ = NULL;
struct RemoteNodeRequestOneofInstance {
  const ::iop::locnet::BuildNetworkRequest* acceptcolleague_;
  const ::iop::locnet::BuildNetworkRequest* renewcolleague_;
  const ::iop::locnet::BuildNetworkRequest* acceptneighbour_;
  const ::iop::locnet::BuildNetworkRequest* renewneighbour_;
  const ::iop::locnet::GetNodeCountRequest* getnodecount_;
  const ::iop::locnet::GetRandomNodesRequest* getrandomnodes_;
  const ::iop::locnet::GetClosestNodesByDistanceRequest* getclosestnodes_;
  const ::iop::locnet::GetNodeInfoRequest* getnodeinfo_;
}* RemoteNodeRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RemoteNodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteNodeResponse_reflection_ = NULL;
struct RemoteNodeResponseOneofInstance {
  const ::iop::locnet::BuildNetworkResponse* acceptcolleague_;
  const ::iop::locnet::BuildNetworkResponse* renewcolleague_;
  const ::iop::locnet::BuildNetworkResponse* acceptneighbour_;
  const ::iop::locnet::BuildNetworkResponse* renewneighbour_;
  const ::iop::locnet::GetNodeCountResponse* getnodecount_;
  const ::iop::locnet::GetRandomNodesResponse* getrandomnodes_;
  const ::iop::locnet::GetClosestNodesByDistanceResponse* getclosestnodes_;
  const ::iop::locnet::GetNodeInfoResponse* getnodeinfo_;
}* RemoteNodeResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BuildNetworkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildNetworkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildNetworkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildNetworkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRandomNodesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRandomNodesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRandomNodesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRandomNodesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClosestNodesByDistanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClosestNodesByDistanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
struct ClientRequestOneofInstance {
  const ::iop::locnet::GetNodeInfoRequest* getnodeinfo_;
  const ::iop::locnet::GetNeighbourNodesByDistanceClientRequest* getneighbournodes_;
  const ::iop::locnet::GetClosestNodesByDistanceRequest* getclosestnodes_;
  const ::iop::locnet::ExploreNetworkNodesByDistanceRequest* explorenodes_;
}* ClientRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ClientResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResponse_reflection_ = NULL;
struct ClientResponseOneofInstance {
  const ::iop::locnet::GetNodeInfoResponse* getnodeinfo_;
  const ::iop::locnet::GetNeighbourNodesByDistanceResponse* getneighbournodes_;
  const ::iop::locnet::GetClosestNodesByDistanceResponse* getclosestnodes_;
  const ::iop::locnet::ExploreNetworkNodesByDistanceResponse* explorenodes_;
}* ClientResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GetNodeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNeighbourNodesByDistanceClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploreNetworkNodesByDistanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploreNetworkNodesByDistanceResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IopLocNet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_IopLocNet_2eproto() {
  protobuf_AddDesc_IopLocNet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IopLocNet.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceInfo_descriptor_ = file->message_type(0);
  static const int ServiceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, servicedata_),
  };
  ServiceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceInfo_descriptor_,
      ServiceInfo::default_instance_,
      ServiceInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _is_default_instance_));
  GpsLocation_descriptor_ = file->message_type(1);
  static const int GpsLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsLocation, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsLocation, longitude_),
  };
  GpsLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GpsLocation_descriptor_,
      GpsLocation::default_instance_,
      GpsLocation_offsets_,
      -1,
      -1,
      -1,
      sizeof(GpsLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsLocation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsLocation, _is_default_instance_));
  NodeContact_descriptor_ = file->message_type(2);
  static const int NodeContact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeContact, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeContact, nodeport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeContact, clientport_),
  };
  NodeContact_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeContact_descriptor_,
      NodeContact::default_instance_,
      NodeContact_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeContact),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeContact, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeContact, _is_default_instance_));
  NodeInfo_descriptor_ = file->message_type(3);
  static const int NodeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, services_),
  };
  NodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeInfo_descriptor_,
      NodeInfo::default_instance_,
      NodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _is_default_instance_));
  MessageWithHeader_descriptor_ = file->message_type(4);
  static const int MessageWithHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWithHeader, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWithHeader, body_),
  };
  MessageWithHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageWithHeader_descriptor_,
      MessageWithHeader::default_instance_,
      MessageWithHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageWithHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWithHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWithHeader, _is_default_instance_));
  Message_descriptor_ = file->message_type(5);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, MessageType_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      -1,
      -1,
      -1,
      Message_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _oneof_case_[0]),
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _is_default_instance_));
  Request_descriptor_ = file->message_type(6);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, version_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, localservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, remotenode_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, RequestType_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(7);
  static const int Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, details_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, localservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, remotenode_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, ResponseType_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  LocalServiceRequest_descriptor_ = file->message_type(8);
  static const int LocalServiceRequest_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceRequest_default_oneof_instance_, registerservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceRequest_default_oneof_instance_, deregisterservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceRequest_default_oneof_instance_, getneighbournodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceRequest_default_oneof_instance_, neighbourhoodchanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceRequest, LocalServiceRequestType_),
  };
  LocalServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalServiceRequest_descriptor_,
      LocalServiceRequest::default_instance_,
      LocalServiceRequest_offsets_,
      -1,
      -1,
      -1,
      LocalServiceRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceRequest, _oneof_case_[0]),
      sizeof(LocalServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceRequest, _is_default_instance_));
  LocalServiceResponse_descriptor_ = file->message_type(9);
  static const int LocalServiceResponse_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceResponse_default_oneof_instance_, registerservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceResponse_default_oneof_instance_, deregisterservice_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceResponse_default_oneof_instance_, getneighbournodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LocalServiceResponse_default_oneof_instance_, neighbourhoodupdated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceResponse, LocalServiceResponseType_),
  };
  LocalServiceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalServiceResponse_descriptor_,
      LocalServiceResponse::default_instance_,
      LocalServiceResponse_offsets_,
      -1,
      -1,
      -1,
      LocalServiceResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceResponse, _oneof_case_[0]),
      sizeof(LocalServiceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalServiceResponse, _is_default_instance_));
  RegisterServiceRequest_descriptor_ = file->message_type(10);
  static const int RegisterServiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, service_),
  };
  RegisterServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterServiceRequest_descriptor_,
      RegisterServiceRequest::default_instance_,
      RegisterServiceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, _is_default_instance_));
  RegisterServiceResponse_descriptor_ = file->message_type(11);
  static const int RegisterServiceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceResponse, location_),
  };
  RegisterServiceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterServiceResponse_descriptor_,
      RegisterServiceResponse::default_instance_,
      RegisterServiceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterServiceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceResponse, _is_default_instance_));
  DeregisterServiceRequest_descriptor_ = file->message_type(12);
  static const int DeregisterServiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterServiceRequest, servicetype_),
  };
  DeregisterServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeregisterServiceRequest_descriptor_,
      DeregisterServiceRequest::default_instance_,
      DeregisterServiceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeregisterServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterServiceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterServiceRequest, _is_default_instance_));
  DeregisterServiceResponse_descriptor_ = file->message_type(13);
  static const int DeregisterServiceResponse_offsets_[1] = {
  };
  DeregisterServiceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeregisterServiceResponse_descriptor_,
      DeregisterServiceResponse::default_instance_,
      DeregisterServiceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeregisterServiceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterServiceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterServiceResponse, _is_default_instance_));
  GetNeighbourNodesByDistanceLocalRequest_descriptor_ = file->message_type(14);
  static const int GetNeighbourNodesByDistanceLocalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceLocalRequest, keepaliveandsendupdates_),
  };
  GetNeighbourNodesByDistanceLocalRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNeighbourNodesByDistanceLocalRequest_descriptor_,
      GetNeighbourNodesByDistanceLocalRequest::default_instance_,
      GetNeighbourNodesByDistanceLocalRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNeighbourNodesByDistanceLocalRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceLocalRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceLocalRequest, _is_default_instance_));
  GetNeighbourNodesByDistanceResponse_descriptor_ = file->message_type(15);
  static const int GetNeighbourNodesByDistanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceResponse, nodes_),
  };
  GetNeighbourNodesByDistanceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNeighbourNodesByDistanceResponse_descriptor_,
      GetNeighbourNodesByDistanceResponse::default_instance_,
      GetNeighbourNodesByDistanceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNeighbourNodesByDistanceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceResponse, _is_default_instance_));
  NeighbourhoodChange_descriptor_ = file->message_type(16);
  static const int NeighbourhoodChange_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NeighbourhoodChange_default_oneof_instance_, addednodeinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NeighbourhoodChange_default_oneof_instance_, updatednodeinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NeighbourhoodChange_default_oneof_instance_, removednodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChange, ChangeType_),
  };
  NeighbourhoodChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NeighbourhoodChange_descriptor_,
      NeighbourhoodChange::default_instance_,
      NeighbourhoodChange_offsets_,
      -1,
      -1,
      -1,
      NeighbourhoodChange_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChange, _oneof_case_[0]),
      sizeof(NeighbourhoodChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChange, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChange, _is_default_instance_));
  NeighbourhoodChangedNotificationRequest_descriptor_ = file->message_type(17);
  static const int NeighbourhoodChangedNotificationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChangedNotificationRequest, changes_),
  };
  NeighbourhoodChangedNotificationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NeighbourhoodChangedNotificationRequest_descriptor_,
      NeighbourhoodChangedNotificationRequest::default_instance_,
      NeighbourhoodChangedNotificationRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(NeighbourhoodChangedNotificationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChangedNotificationRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChangedNotificationRequest, _is_default_instance_));
  NeighbourhoodChangedNotificationResponse_descriptor_ = file->message_type(18);
  static const int NeighbourhoodChangedNotificationResponse_offsets_[1] = {
  };
  NeighbourhoodChangedNotificationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NeighbourhoodChangedNotificationResponse_descriptor_,
      NeighbourhoodChangedNotificationResponse::default_instance_,
      NeighbourhoodChangedNotificationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(NeighbourhoodChangedNotificationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChangedNotificationResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighbourhoodChangedNotificationResponse, _is_default_instance_));
  RemoteNodeRequest_descriptor_ = file->message_type(19);
  static const int RemoteNodeRequest_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, acceptcolleague_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, renewcolleague_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, acceptneighbour_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, renewneighbour_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, getnodecount_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, getrandomnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, getclosestnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeRequest_default_oneof_instance_, getnodeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeRequest, RemoteNodeRequestType_),
  };
  RemoteNodeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoteNodeRequest_descriptor_,
      RemoteNodeRequest::default_instance_,
      RemoteNodeRequest_offsets_,
      -1,
      -1,
      -1,
      RemoteNodeRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeRequest, _oneof_case_[0]),
      sizeof(RemoteNodeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeRequest, _is_default_instance_));
  RemoteNodeResponse_descriptor_ = file->message_type(20);
  static const int RemoteNodeResponse_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, acceptcolleague_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, renewcolleague_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, acceptneighbour_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, renewneighbour_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, getnodecount_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, getrandomnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, getclosestnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RemoteNodeResponse_default_oneof_instance_, getnodeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeResponse, RemoteNodeResponseType_),
  };
  RemoteNodeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoteNodeResponse_descriptor_,
      RemoteNodeResponse::default_instance_,
      RemoteNodeResponse_offsets_,
      -1,
      -1,
      -1,
      RemoteNodeResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeResponse, _oneof_case_[0]),
      sizeof(RemoteNodeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteNodeResponse, _is_default_instance_));
  BuildNetworkRequest_descriptor_ = file->message_type(21);
  static const int BuildNetworkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkRequest, requestornodeinfo_),
  };
  BuildNetworkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BuildNetworkRequest_descriptor_,
      BuildNetworkRequest::default_instance_,
      BuildNetworkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BuildNetworkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkRequest, _is_default_instance_));
  BuildNetworkResponse_descriptor_ = file->message_type(22);
  static const int BuildNetworkResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkResponse, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkResponse, acceptornodeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkResponse, remoteipaddress_),
  };
  BuildNetworkResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BuildNetworkResponse_descriptor_,
      BuildNetworkResponse::default_instance_,
      BuildNetworkResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BuildNetworkResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildNetworkResponse, _is_default_instance_));
  GetNodeCountRequest_descriptor_ = file->message_type(23);
  static const int GetNodeCountRequest_offsets_[1] = {
  };
  GetNodeCountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNodeCountRequest_descriptor_,
      GetNodeCountRequest::default_instance_,
      GetNodeCountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNodeCountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeCountRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeCountRequest, _is_default_instance_));
  GetNodeCountResponse_descriptor_ = file->message_type(24);
  static const int GetNodeCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeCountResponse, nodecount_),
  };
  GetNodeCountResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNodeCountResponse_descriptor_,
      GetNodeCountResponse::default_instance_,
      GetNodeCountResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNodeCountResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeCountResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeCountResponse, _is_default_instance_));
  GetRandomNodesRequest_descriptor_ = file->message_type(25);
  static const int GetRandomNodesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesRequest, maxnodecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesRequest, includeneighbours_),
  };
  GetRandomNodesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRandomNodesRequest_descriptor_,
      GetRandomNodesRequest::default_instance_,
      GetRandomNodesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRandomNodesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesRequest, _is_default_instance_));
  GetRandomNodesResponse_descriptor_ = file->message_type(26);
  static const int GetRandomNodesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesResponse, nodes_),
  };
  GetRandomNodesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRandomNodesResponse_descriptor_,
      GetRandomNodesResponse::default_instance_,
      GetRandomNodesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRandomNodesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRandomNodesResponse, _is_default_instance_));
  GetClosestNodesByDistanceRequest_descriptor_ = file->message_type(27);
  static const int GetClosestNodesByDistanceRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, maxradiuskm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, maxnodecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, includeneighbours_),
  };
  GetClosestNodesByDistanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClosestNodesByDistanceRequest_descriptor_,
      GetClosestNodesByDistanceRequest::default_instance_,
      GetClosestNodesByDistanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClosestNodesByDistanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceRequest, _is_default_instance_));
  GetClosestNodesByDistanceResponse_descriptor_ = file->message_type(28);
  static const int GetClosestNodesByDistanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceResponse, nodes_),
  };
  GetClosestNodesByDistanceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClosestNodesByDistanceResponse_descriptor_,
      GetClosestNodesByDistanceResponse::default_instance_,
      GetClosestNodesByDistanceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClosestNodesByDistanceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClosestNodesByDistanceResponse, _is_default_instance_));
  ClientRequest_descriptor_ = file->message_type(29);
  static const int ClientRequest_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientRequest_default_oneof_instance_, getnodeinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientRequest_default_oneof_instance_, getneighbournodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientRequest_default_oneof_instance_, getclosestnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientRequest_default_oneof_instance_, explorenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, ClientRequestType_),
  };
  ClientRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      -1,
      -1,
      -1,
      ClientRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _oneof_case_[0]),
      sizeof(ClientRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _is_default_instance_));
  ClientResponse_descriptor_ = file->message_type(30);
  static const int ClientResponse_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientResponse_default_oneof_instance_, getnodeinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientResponse_default_oneof_instance_, getneighbournodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientResponse_default_oneof_instance_, getclosestnodes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientResponse_default_oneof_instance_, explorenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, ClientResponseType_),
  };
  ClientResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientResponse_descriptor_,
      ClientResponse::default_instance_,
      ClientResponse_offsets_,
      -1,
      -1,
      -1,
      ClientResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _oneof_case_[0]),
      sizeof(ClientResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _is_default_instance_));
  GetNodeInfoRequest_descriptor_ = file->message_type(31);
  static const int GetNodeInfoRequest_offsets_[1] = {
  };
  GetNodeInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNodeInfoRequest_descriptor_,
      GetNodeInfoRequest::default_instance_,
      GetNodeInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNodeInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoRequest, _is_default_instance_));
  GetNodeInfoResponse_descriptor_ = file->message_type(32);
  static const int GetNodeInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, nodeinfo_),
  };
  GetNodeInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNodeInfoResponse_descriptor_,
      GetNodeInfoResponse::default_instance_,
      GetNodeInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNodeInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInfoResponse, _is_default_instance_));
  GetNeighbourNodesByDistanceClientRequest_descriptor_ = file->message_type(33);
  static const int GetNeighbourNodesByDistanceClientRequest_offsets_[1] = {
  };
  GetNeighbourNodesByDistanceClientRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetNeighbourNodesByDistanceClientRequest_descriptor_,
      GetNeighbourNodesByDistanceClientRequest::default_instance_,
      GetNeighbourNodesByDistanceClientRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetNeighbourNodesByDistanceClientRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceClientRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNeighbourNodesByDistanceClientRequest, _is_default_instance_));
  ExploreNetworkNodesByDistanceRequest_descriptor_ = file->message_type(34);
  static const int ExploreNetworkNodesByDistanceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceRequest, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceRequest, targetnodecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceRequest, maxnodehops_),
  };
  ExploreNetworkNodesByDistanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExploreNetworkNodesByDistanceRequest_descriptor_,
      ExploreNetworkNodesByDistanceRequest::default_instance_,
      ExploreNetworkNodesByDistanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExploreNetworkNodesByDistanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceRequest, _is_default_instance_));
  ExploreNetworkNodesByDistanceResponse_descriptor_ = file->message_type(35);
  static const int ExploreNetworkNodesByDistanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceResponse, closestnodes_),
  };
  ExploreNetworkNodesByDistanceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExploreNetworkNodesByDistanceResponse_descriptor_,
      ExploreNetworkNodesByDistanceResponse::default_instance_,
      ExploreNetworkNodesByDistanceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExploreNetworkNodesByDistanceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreNetworkNodesByDistanceResponse, _is_default_instance_));
  Status_descriptor_ = file->enum_type(0);
  ServiceType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IopLocNet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceInfo_descriptor_, &ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GpsLocation_descriptor_, &GpsLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeContact_descriptor_, &NodeContact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeInfo_descriptor_, &NodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageWithHeader_descriptor_, &MessageWithHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalServiceRequest_descriptor_, &LocalServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalServiceResponse_descriptor_, &LocalServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterServiceRequest_descriptor_, &RegisterServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterServiceResponse_descriptor_, &RegisterServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeregisterServiceRequest_descriptor_, &DeregisterServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeregisterServiceResponse_descriptor_, &DeregisterServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNeighbourNodesByDistanceLocalRequest_descriptor_, &GetNeighbourNodesByDistanceLocalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNeighbourNodesByDistanceResponse_descriptor_, &GetNeighbourNodesByDistanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NeighbourhoodChange_descriptor_, &NeighbourhoodChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NeighbourhoodChangedNotificationRequest_descriptor_, &NeighbourhoodChangedNotificationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NeighbourhoodChangedNotificationResponse_descriptor_, &NeighbourhoodChangedNotificationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoteNodeRequest_descriptor_, &RemoteNodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoteNodeResponse_descriptor_, &RemoteNodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BuildNetworkRequest_descriptor_, &BuildNetworkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BuildNetworkResponse_descriptor_, &BuildNetworkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNodeCountRequest_descriptor_, &GetNodeCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNodeCountResponse_descriptor_, &GetNodeCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRandomNodesRequest_descriptor_, &GetRandomNodesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRandomNodesResponse_descriptor_, &GetRandomNodesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClosestNodesByDistanceRequest_descriptor_, &GetClosestNodesByDistanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClosestNodesByDistanceResponse_descriptor_, &GetClosestNodesByDistanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientResponse_descriptor_, &ClientResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNodeInfoRequest_descriptor_, &GetNodeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNodeInfoResponse_descriptor_, &GetNodeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetNeighbourNodesByDistanceClientRequest_descriptor_, &GetNeighbourNodesByDistanceClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExploreNetworkNodesByDistanceRequest_descriptor_, &ExploreNetworkNodesByDistanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExploreNetworkNodesByDistanceResponse_descriptor_, &ExploreNetworkNodesByDistanceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IopLocNet_2eproto() {
  delete ServiceInfo::default_instance_;
  delete ServiceInfo_reflection_;
  delete GpsLocation::default_instance_;
  delete GpsLocation_reflection_;
  delete NodeContact::default_instance_;
  delete NodeContact_reflection_;
  delete NodeInfo::default_instance_;
  delete NodeInfo_reflection_;
  delete MessageWithHeader::default_instance_;
  delete MessageWithHeader_reflection_;
  delete Message::default_instance_;
  delete Message_default_oneof_instance_;
  delete Message_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete LocalServiceRequest::default_instance_;
  delete LocalServiceRequest_default_oneof_instance_;
  delete LocalServiceRequest_reflection_;
  delete LocalServiceResponse::default_instance_;
  delete LocalServiceResponse_default_oneof_instance_;
  delete LocalServiceResponse_reflection_;
  delete RegisterServiceRequest::default_instance_;
  delete RegisterServiceRequest_reflection_;
  delete RegisterServiceResponse::default_instance_;
  delete RegisterServiceResponse_reflection_;
  delete DeregisterServiceRequest::default_instance_;
  delete DeregisterServiceRequest_reflection_;
  delete DeregisterServiceResponse::default_instance_;
  delete DeregisterServiceResponse_reflection_;
  delete GetNeighbourNodesByDistanceLocalRequest::default_instance_;
  delete GetNeighbourNodesByDistanceLocalRequest_reflection_;
  delete GetNeighbourNodesByDistanceResponse::default_instance_;
  delete GetNeighbourNodesByDistanceResponse_reflection_;
  delete NeighbourhoodChange::default_instance_;
  delete NeighbourhoodChange_default_oneof_instance_;
  delete NeighbourhoodChange_reflection_;
  delete NeighbourhoodChangedNotificationRequest::default_instance_;
  delete NeighbourhoodChangedNotificationRequest_reflection_;
  delete NeighbourhoodChangedNotificationResponse::default_instance_;
  delete NeighbourhoodChangedNotificationResponse_reflection_;
  delete RemoteNodeRequest::default_instance_;
  delete RemoteNodeRequest_default_oneof_instance_;
  delete RemoteNodeRequest_reflection_;
  delete RemoteNodeResponse::default_instance_;
  delete RemoteNodeResponse_default_oneof_instance_;
  delete RemoteNodeResponse_reflection_;
  delete BuildNetworkRequest::default_instance_;
  delete BuildNetworkRequest_reflection_;
  delete BuildNetworkResponse::default_instance_;
  delete BuildNetworkResponse_reflection_;
  delete GetNodeCountRequest::default_instance_;
  delete GetNodeCountRequest_reflection_;
  delete GetNodeCountResponse::default_instance_;
  delete GetNodeCountResponse_reflection_;
  delete GetRandomNodesRequest::default_instance_;
  delete GetRandomNodesRequest_reflection_;
  delete GetRandomNodesResponse::default_instance_;
  delete GetRandomNodesResponse_reflection_;
  delete GetClosestNodesByDistanceRequest::default_instance_;
  delete GetClosestNodesByDistanceRequest_reflection_;
  delete GetClosestNodesByDistanceResponse::default_instance_;
  delete GetClosestNodesByDistanceResponse_reflection_;
  delete ClientRequest::default_instance_;
  delete ClientRequest_default_oneof_instance_;
  delete ClientRequest_reflection_;
  delete ClientResponse::default_instance_;
  delete ClientResponse_default_oneof_instance_;
  delete ClientResponse_reflection_;
  delete GetNodeInfoRequest::default_instance_;
  delete GetNodeInfoRequest_reflection_;
  delete GetNodeInfoResponse::default_instance_;
  delete GetNodeInfoResponse_reflection_;
  delete GetNeighbourNodesByDistanceClientRequest::default_instance_;
  delete GetNeighbourNodesByDistanceClientRequest_reflection_;
  delete ExploreNetworkNodesByDistanceRequest::default_instance_;
  delete ExploreNetworkNodesByDistanceRequest_reflection_;
  delete ExploreNetworkNodesByDistanceResponse::default_instance_;
  delete ExploreNetworkNodesByDistanceResponse_reflection_;
}

void protobuf_AddDesc_IopLocNet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IopLocNet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017IopLocNet.proto\022\niop.locnet\"W\n\013Service"
    "Info\022%\n\004type\030\001 \001(\0162\027.iop.locnet.ServiceT"
    "ype\022\014\n\004port\030\002 \001(\r\022\023\n\013serviceData\030\003 \001(\014\"2"
    "\n\013GpsLocation\022\020\n\010latitude\030\001 \001(\017\022\021\n\tlongi"
    "tude\030\002 \001(\017\"F\n\013NodeContact\022\021\n\tipAddress\030\001"
    " \001(\014\022\020\n\010nodePort\030\002 \001(\r\022\022\n\nclientPort\030\003 \001"
    "(\r\"\232\001\n\010NodeInfo\022\016\n\006nodeId\030\001 \001(\014\022(\n\007conta"
    "ct\030\002 \001(\0132\027.iop.locnet.NodeContact\022)\n\010loc"
    "ation\030\003 \001(\0132\027.iop.locnet.GpsLocation\022)\n\010"
    "services\030  \003(\0132\027.iop.locnet.ServiceInfo\""
    "F\n\021MessageWithHeader\022\016\n\006header\030\001 \001(\007\022!\n\004"
    "body\030\002 \001(\0132\023.iop.locnet.Message\"v\n\007Messa"
    "ge\022\n\n\002id\030\001 \001(\r\022&\n\007request\030\002 \001(\0132\023.iop.lo"
    "cnet.RequestH\000\022(\n\010response\030\003 \001(\0132\024.iop.l"
    "ocnet.ResponseH\000B\r\n\013MessageType\"\304\001\n\007Requ"
    "est\022\017\n\007version\030\001 \001(\014\0227\n\014localService\030\002 \001"
    "(\0132\037.iop.locnet.LocalServiceRequestH\000\0223\n"
    "\nremoteNode\030\003 \001(\0132\035.iop.locnet.RemoteNod"
    "eRequestH\000\022+\n\006client\030\004 \001(\0132\031.iop.locnet."
    "ClientRequestH\000B\r\n\013RequestType\"\200\002\n\010Respo"
    "nse\022\"\n\006status\030\001 \001(\0162\022.iop.locnet.Status\022"
    "\021\n\ttimestamp\030\002 \001(\022\022\017\n\007details\030\003 \001(\t\0228\n\014l"
    "ocalService\030\004 \001(\0132 .iop.locnet.LocalServ"
    "iceResponseH\000\0224\n\nremoteNode\030\005 \001(\0132\036.iop."
    "locnet.RemoteNodeResponseH\000\022,\n\006client\030\006 "
    "\001(\0132\032.iop.locnet.ClientResponseH\000B\016\n\014Res"
    "ponseType\"\331\002\n\023LocalServiceRequest\022=\n\017reg"
    "isterService\030\001 \001(\0132\".iop.locnet.Register"
    "ServiceRequestH\000\022A\n\021deregisterService\030\002 "
    "\001(\0132$.iop.locnet.DeregisterServiceReques"
    "tH\000\022P\n\021getNeighbourNodes\030\003 \001(\01323.iop.loc"
    "net.GetNeighbourNodesByDistanceLocalRequ"
    "estH\000\022S\n\024neighbourhoodChanged\030\004 \001(\01323.io"
    "p.locnet.NeighbourhoodChangedNotificatio"
    "nRequestH\000B\031\n\027LocalServiceRequestType\"\332\002"
    "\n\024LocalServiceResponse\022>\n\017registerServic"
    "e\030\001 \001(\0132#.iop.locnet.RegisterServiceResp"
    "onseH\000\022B\n\021deregisterService\030\002 \001(\0132%.iop."
    "locnet.DeregisterServiceResponseH\000\022L\n\021ge"
    "tNeighbourNodes\030\003 \001(\0132/.iop.locnet.GetNe"
    "ighbourNodesByDistanceResponseH\000\022T\n\024neig"
    "hbourhoodUpdated\030\004 \001(\01324.iop.locnet.Neig"
    "hbourhoodChangedNotificationResponseH\000B\032"
    "\n\030LocalServiceResponseType\"B\n\026RegisterSe"
    "rviceRequest\022(\n\007service\030\001 \001(\0132\027.iop.locn"
    "et.ServiceInfo\"D\n\027RegisterServiceRespons"
    "e\022)\n\010location\030\001 \001(\0132\027.iop.locnet.GpsLoca"
    "tion\"H\n\030DeregisterServiceRequest\022,\n\013serv"
    "iceType\030\001 \001(\0162\027.iop.locnet.ServiceType\"\033"
    "\n\031DeregisterServiceResponse\"J\n\'GetNeighb"
    "ourNodesByDistanceLocalRequest\022\037\n\027keepAl"
    "iveAndSendUpdates\030\001 \001(\010\"J\n#GetNeighbourN"
    "odesByDistanceResponse\022#\n\005nodes\030\001 \003(\0132\024."
    "iop.locnet.NodeInfo\"\234\001\n\023NeighbourhoodCha"
    "nge\022-\n\raddedNodeInfo\030\001 \001(\0132\024.iop.locnet."
    "NodeInfoH\000\022/\n\017updatedNodeInfo\030\002 \001(\0132\024.io"
    "p.locnet.NodeInfoH\000\022\027\n\rremovedNodeId\030\003 \001"
    "(\014H\000B\014\n\nChangeType\"[\n\'NeighbourhoodChang"
    "edNotificationRequest\0220\n\007changes\030\001 \003(\0132\037"
    ".iop.locnet.NeighbourhoodChange\"*\n(Neigh"
    "bourhoodChangedNotificationResponse\"\220\004\n\021"
    "RemoteNodeRequest\022:\n\017acceptColleague\030\001 \001"
    "(\0132\037.iop.locnet.BuildNetworkRequestH\000\0229\n"
    "\016renewColleague\030\002 \001(\0132\037.iop.locnet.Build"
    "NetworkRequestH\000\022:\n\017acceptNeighbour\030\003 \001("
    "\0132\037.iop.locnet.BuildNetworkRequestH\000\0229\n\016"
    "renewNeighbour\030\004 \001(\0132\037.iop.locnet.BuildN"
    "etworkRequestH\000\0227\n\014getNodeCount\030\005 \001(\0132\037."
    "iop.locnet.GetNodeCountRequestH\000\022;\n\016getR"
    "andomNodes\030\006 \001(\0132!.iop.locnet.GetRandomN"
    "odesRequestH\000\022G\n\017getClosestNodes\030\007 \001(\0132,"
    ".iop.locnet.GetClosestNodesByDistanceReq"
    "uestH\000\0225\n\013getNodeInfo\030\010 \001(\0132\036.iop.locnet"
    ".GetNodeInfoRequestH\000B\027\n\025RemoteNodeReque"
    "stType\"\232\004\n\022RemoteNodeResponse\022;\n\017acceptC"
    "olleague\030\001 \001(\0132 .iop.locnet.BuildNetwork"
    "ResponseH\000\022:\n\016renewColleague\030\002 \001(\0132 .iop"
    ".locnet.BuildNetworkResponseH\000\022;\n\017accept"
    "Neighbour\030\003 \001(\0132 .iop.locnet.BuildNetwor"
    "kResponseH\000\022:\n\016renewNeighbour\030\004 \001(\0132 .io"
    "p.locnet.BuildNetworkResponseH\000\0228\n\014getNo"
    "deCount\030\005 \001(\0132 .iop.locnet.GetNodeCountR"
    "esponseH\000\022<\n\016getRandomNodes\030\006 \001(\0132\".iop."
    "locnet.GetRandomNodesResponseH\000\022H\n\017getCl"
    "osestNodes\030\007 \001(\0132-.iop.locnet.GetClosest"
    "NodesByDistanceResponseH\000\0226\n\013getNodeInfo"
    "\030\010 \001(\0132\037.iop.locnet.GetNodeInfoResponseH"
    "\000B\030\n\026RemoteNodeResponseType\"F\n\023BuildNetw"
    "orkRequest\022/\n\021requestorNodeInfo\030\001 \001(\0132\024."
    "iop.locnet.NodeInfo\"q\n\024BuildNetworkRespo"
    "nse\022\020\n\010accepted\030\001 \001(\010\022.\n\020acceptorNodeInf"
    "o\030\002 \001(\0132\024.iop.locnet.NodeInfo\022\027\n\017remoteI"
    "pAddress\030\003 \001(\014\"\025\n\023GetNodeCountRequest\")\n"
    "\024GetNodeCountResponse\022\021\n\tnodeCount\030\001 \001(\r"
    "\"H\n\025GetRandomNodesRequest\022\024\n\014maxNodeCoun"
    "t\030\001 \001(\r\022\031\n\021includeNeighbours\030\002 \001(\010\"=\n\026Ge"
    "tRandomNodesResponse\022#\n\005nodes\030\001 \003(\0132\024.io"
    "p.locnet.NodeInfo\"\223\001\n GetClosestNodesByD"
    "istanceRequest\022)\n\010location\030\001 \001(\0132\027.iop.l"
    "ocnet.GpsLocation\022\023\n\013maxRadiusKm\030\002 \001(\002\022\024"
    "\n\014maxNodeCount\030\003 \001(\r\022\031\n\021includeNeighbour"
    "s\030\004 \001(\010\"H\n!GetClosestNodesByDistanceResp"
    "onse\022#\n\005nodes\030\001 \003(\0132\024.iop.locnet.NodeInf"
    "o\"\301\002\n\rClientRequest\0225\n\013getNodeInfo\030\001 \001(\013"
    "2\036.iop.locnet.GetNodeInfoRequestH\000\022Q\n\021ge"
    "tNeighbourNodes\030\002 \001(\01324.iop.locnet.GetNe"
    "ighbourNodesByDistanceClientRequestH\000\022G\n"
    "\017getClosestNodes\030\003 \001(\0132,.iop.locnet.GetC"
    "losestNodesByDistanceRequestH\000\022H\n\014explor"
    "eNodes\030\004 \001(\01320.iop.locnet.ExploreNetwork"
    "NodesByDistanceRequestH\000B\023\n\021ClientReques"
    "tType\"\301\002\n\016ClientResponse\0226\n\013getNodeInfo\030"
    "\001 \001(\0132\037.iop.locnet.GetNodeInfoResponseH\000"
    "\022L\n\021getNeighbourNodes\030\002 \001(\0132/.iop.locnet"
    ".GetNeighbourNodesByDistanceResponseH\000\022H"
    "\n\017getClosestNodes\030\003 \001(\0132-.iop.locnet.Get"
    "ClosestNodesByDistanceResponseH\000\022I\n\014expl"
    "oreNodes\030\004 \001(\01321.iop.locnet.ExploreNetwo"
    "rkNodesByDistanceResponseH\000B\024\n\022ClientRes"
    "ponseType\"\024\n\022GetNodeInfoRequest\"=\n\023GetNo"
    "deInfoResponse\022&\n\010nodeInfo\030\001 \001(\0132\024.iop.l"
    "ocnet.NodeInfo\"*\n(GetNeighbourNodesByDis"
    "tanceClientRequest\"\177\n$ExploreNetworkNode"
    "sByDistanceRequest\022)\n\010location\030\001 \001(\0132\027.i"
    "op.locnet.GpsLocation\022\027\n\017targetNodeCount"
    "\030\002 \001(\r\022\023\n\013maxNodeHops\030\003 \001(\r\"S\n%ExploreNe"
    "tworkNodesByDistanceResponse\022*\n\014closestN"
    "odes\030\001 \003(\0132\024.iop.locnet.NodeInfo*y\n\006Stat"
    "us\022\r\n\tSTATUS_OK\020\000\022\034\n\030ERROR_PROTOCOL_VIOL"
    "ATION\020\001\022\025\n\021ERROR_UNSUPPORTED\020\002\022\022\n\016ERROR_"
    "INTERNAL\020\010\022\027\n\023ERROR_INVALID_VALUE\0206*\226\001\n\013"
    "ServiceType\022\020\n\014Unstructured\020\000\022\013\n\007Content"
    "\020\001\022\013\n\007Latency\020\002\022\014\n\010Location\020\003\022\t\n\005Token\020\n"
    "\022\013\n\007Profile\020\013\022\r\n\tProximity\020\014\022\t\n\005Relay\020\r\022"
    "\016\n\nReputation\020\016\022\013\n\007Minting\020\017b\006proto3", 5396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IopLocNet.proto", &protobuf_RegisterTypes);
  ServiceInfo::default_instance_ = new ServiceInfo();
  GpsLocation::default_instance_ = new GpsLocation();
  NodeContact::default_instance_ = new NodeContact();
  NodeInfo::default_instance_ = new NodeInfo();
  MessageWithHeader::default_instance_ = new MessageWithHeader();
  Message::default_instance_ = new Message();
  Message_default_oneof_instance_ = new MessageOneofInstance();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  LocalServiceRequest::default_instance_ = new LocalServiceRequest();
  LocalServiceRequest_default_oneof_instance_ = new LocalServiceRequestOneofInstance();
  LocalServiceResponse::default_instance_ = new LocalServiceResponse();
  LocalServiceResponse_default_oneof_instance_ = new LocalServiceResponseOneofInstance();
  RegisterServiceRequest::default_instance_ = new RegisterServiceRequest();
  RegisterServiceResponse::default_instance_ = new RegisterServiceResponse();
  DeregisterServiceRequest::default_instance_ = new DeregisterServiceRequest();
  DeregisterServiceResponse::default_instance_ = new DeregisterServiceResponse();
  GetNeighbourNodesByDistanceLocalRequest::default_instance_ = new GetNeighbourNodesByDistanceLocalRequest();
  GetNeighbourNodesByDistanceResponse::default_instance_ = new GetNeighbourNodesByDistanceResponse();
  NeighbourhoodChange::default_instance_ = new NeighbourhoodChange();
  NeighbourhoodChange_default_oneof_instance_ = new NeighbourhoodChangeOneofInstance();
  NeighbourhoodChangedNotificationRequest::default_instance_ = new NeighbourhoodChangedNotificationRequest();
  NeighbourhoodChangedNotificationResponse::default_instance_ = new NeighbourhoodChangedNotificationResponse();
  RemoteNodeRequest::default_instance_ = new RemoteNodeRequest();
  RemoteNodeRequest_default_oneof_instance_ = new RemoteNodeRequestOneofInstance();
  RemoteNodeResponse::default_instance_ = new RemoteNodeResponse();
  RemoteNodeResponse_default_oneof_instance_ = new RemoteNodeResponseOneofInstance();
  BuildNetworkRequest::default_instance_ = new BuildNetworkRequest();
  BuildNetworkResponse::default_instance_ = new BuildNetworkResponse();
  GetNodeCountRequest::default_instance_ = new GetNodeCountRequest();
  GetNodeCountResponse::default_instance_ = new GetNodeCountResponse();
  GetRandomNodesRequest::default_instance_ = new GetRandomNodesRequest();
  GetRandomNodesResponse::default_instance_ = new GetRandomNodesResponse();
  GetClosestNodesByDistanceRequest::default_instance_ = new GetClosestNodesByDistanceRequest();
  GetClosestNodesByDistanceResponse::default_instance_ = new GetClosestNodesByDistanceResponse();
  ClientRequest::default_instance_ = new ClientRequest();
  ClientRequest_default_oneof_instance_ = new ClientRequestOneofInstance();
  ClientResponse::default_instance_ = new ClientResponse();
  ClientResponse_default_oneof_instance_ = new ClientResponseOneofInstance();
  GetNodeInfoRequest::default_instance_ = new GetNodeInfoRequest();
  GetNodeInfoResponse::default_instance_ = new GetNodeInfoResponse();
  GetNeighbourNodesByDistanceClientRequest::default_instance_ = new GetNeighbourNodesByDistanceClientRequest();
  ExploreNetworkNodesByDistanceRequest::default_instance_ = new ExploreNetworkNodesByDistanceRequest();
  ExploreNetworkNodesByDistanceResponse::default_instance_ = new ExploreNetworkNodesByDistanceResponse();
  ServiceInfo::default_instance_->InitAsDefaultInstance();
  GpsLocation::default_instance_->InitAsDefaultInstance();
  NodeContact::default_instance_->InitAsDefaultInstance();
  NodeInfo::default_instance_->InitAsDefaultInstance();
  MessageWithHeader::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  LocalServiceRequest::default_instance_->InitAsDefaultInstance();
  LocalServiceResponse::default_instance_->InitAsDefaultInstance();
  RegisterServiceRequest::default_instance_->InitAsDefaultInstance();
  RegisterServiceResponse::default_instance_->InitAsDefaultInstance();
  DeregisterServiceRequest::default_instance_->InitAsDefaultInstance();
  DeregisterServiceResponse::default_instance_->InitAsDefaultInstance();
  GetNeighbourNodesByDistanceLocalRequest::default_instance_->InitAsDefaultInstance();
  GetNeighbourNodesByDistanceResponse::default_instance_->InitAsDefaultInstance();
  NeighbourhoodChange::default_instance_->InitAsDefaultInstance();
  NeighbourhoodChangedNotificationRequest::default_instance_->InitAsDefaultInstance();
  NeighbourhoodChangedNotificationResponse::default_instance_->InitAsDefaultInstance();
  RemoteNodeRequest::default_instance_->InitAsDefaultInstance();
  RemoteNodeResponse::default_instance_->InitAsDefaultInstance();
  BuildNetworkRequest::default_instance_->InitAsDefaultInstance();
  BuildNetworkResponse::default_instance_->InitAsDefaultInstance();
  GetNodeCountRequest::default_instance_->InitAsDefaultInstance();
  GetNodeCountResponse::default_instance_->InitAsDefaultInstance();
  GetRandomNodesRequest::default_instance_->InitAsDefaultInstance();
  GetRandomNodesResponse::default_instance_->InitAsDefaultInstance();
  GetClosestNodesByDistanceRequest::default_instance_->InitAsDefaultInstance();
  GetClosestNodesByDistanceResponse::default_instance_->InitAsDefaultInstance();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientResponse::default_instance_->InitAsDefaultInstance();
  GetNodeInfoRequest::default_instance_->InitAsDefaultInstance();
  GetNodeInfoResponse::default_instance_->InitAsDefaultInstance();
  GetNeighbourNodesByDistanceClientRequest::default_instance_->InitAsDefaultInstance();
  ExploreNetworkNodesByDistanceRequest::default_instance_->InitAsDefaultInstance();
  ExploreNetworkNodesByDistanceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IopLocNet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IopLocNet_2eproto {
  StaticDescriptorInitializer_IopLocNet_2eproto() {
    protobuf_AddDesc_IopLocNet_2eproto();
  }
} static_descriptor_initializer_IopLocNet_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 8:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_descriptor_;
}
bool ServiceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceInfo::kTypeFieldNumber;
const int ServiceInfo::kPortFieldNumber;
const int ServiceInfo::kServiceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ServiceInfo)
}

void ServiceInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  port_ = 0u;
  servicedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:iop.locnet.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  servicedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfo_descriptor_;
}

const ServiceInfo& ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

ServiceInfo* ServiceInfo::default_instance_ = NULL;

ServiceInfo* ServiceInfo::New(::google::protobuf::Arena* arena) const {
  ServiceInfo* n = new ServiceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ServiceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServiceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServiceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, port_);
  servicedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.ServiceType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::iop::locnet::ServiceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceData;
        break;
      }

      // optional bytes serviceData = 3;
      case 3: {
        if (tag == 26) {
         parse_serviceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servicedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ServiceInfo)
  return false;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ServiceInfo)
  // optional .iop.locnet.ServiceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bytes serviceData = 3;
  if (this->servicedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->servicedata(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.ServiceInfo)
}

::google::protobuf::uint8* ServiceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ServiceInfo)
  // optional .iop.locnet.ServiceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bytes serviceData = 3;
  if (this->servicedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->servicedata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ServiceInfo)
  return target;
}

int ServiceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ServiceInfo)
  int total_size = 0;

  // optional .iop.locnet.ServiceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional bytes serviceData = 3;
  if (this->servicedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->servicedata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ServiceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ServiceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ServiceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.servicedata().size() > 0) {

    servicedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicedata_);
  }
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {

  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceInfo::InternalSwap(ServiceInfo* other) {
  std::swap(type_, other->type_);
  std::swap(port_, other->port_);
  servicedata_.Swap(&other->servicedata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfo_descriptor_;
  metadata.reflection = ServiceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceInfo

// optional .iop.locnet.ServiceType type = 1;
void ServiceInfo::clear_type() {
  type_ = 0;
}
 ::iop::locnet::ServiceType ServiceInfo::type() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ServiceInfo.type)
  return static_cast< ::iop::locnet::ServiceType >(type_);
}
 void ServiceInfo::set_type(::iop::locnet::ServiceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.ServiceInfo.type)
}

// optional uint32 port = 2;
void ServiceInfo::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 ServiceInfo::port() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ServiceInfo.port)
  return port_;
}
 void ServiceInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.ServiceInfo.port)
}

// optional bytes serviceData = 3;
void ServiceInfo::clear_servicedata() {
  servicedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceInfo::servicedata() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ServiceInfo.serviceData)
  return servicedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceInfo::set_servicedata(const ::std::string& value) {
  
  servicedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.ServiceInfo.serviceData)
}
 void ServiceInfo::set_servicedata(const char* value) {
  
  servicedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.ServiceInfo.serviceData)
}
 void ServiceInfo::set_servicedata(const void* value, size_t size) {
  
  servicedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.ServiceInfo.serviceData)
}
 ::std::string* ServiceInfo::mutable_servicedata() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.ServiceInfo.serviceData)
  return servicedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceInfo::release_servicedata() {
  // @@protoc_insertion_point(field_release:iop.locnet.ServiceInfo.serviceData)
  
  return servicedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceInfo::set_allocated_servicedata(::std::string* servicedata) {
  if (servicedata != NULL) {
    
  } else {
    
  }
  servicedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicedata);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ServiceInfo.serviceData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpsLocation::kLatitudeFieldNumber;
const int GpsLocation::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpsLocation::GpsLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GpsLocation)
}

void GpsLocation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GpsLocation::GpsLocation(const GpsLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GpsLocation)
}

void GpsLocation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
}

GpsLocation::~GpsLocation() {
  // @@protoc_insertion_point(destructor:iop.locnet.GpsLocation)
  SharedDtor();
}

void GpsLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GpsLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsLocation_descriptor_;
}

const GpsLocation& GpsLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GpsLocation* GpsLocation::default_instance_ = NULL;

GpsLocation* GpsLocation::New(::google::protobuf::Arena* arena) const {
  GpsLocation* n = new GpsLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GpsLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GpsLocation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GpsLocation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GpsLocation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latitude_, longitude_);

#undef ZR_HELPER_
#undef ZR_

}

bool GpsLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GpsLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 latitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional sfixed32 longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GpsLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GpsLocation)
  return false;
#undef DO_
}

void GpsLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GpsLocation)
  // optional sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->latitude(), output);
  }

  // optional sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->longitude(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GpsLocation)
}

::google::protobuf::uint8* GpsLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GpsLocation)
  // optional sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->latitude(), target);
  }

  // optional sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->longitude(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GpsLocation)
  return target;
}

int GpsLocation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GpsLocation)
  int total_size = 0;

  // optional sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GpsLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GpsLocation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GpsLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GpsLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GpsLocation)
    MergeFrom(*source);
  }
}

void GpsLocation::MergeFrom(const GpsLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GpsLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void GpsLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GpsLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsLocation::CopyFrom(const GpsLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GpsLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsLocation::IsInitialized() const {

  return true;
}

void GpsLocation::Swap(GpsLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpsLocation::InternalSwap(GpsLocation* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GpsLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsLocation_descriptor_;
  metadata.reflection = GpsLocation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GpsLocation

// optional sfixed32 latitude = 1;
void GpsLocation::clear_latitude() {
  latitude_ = 0;
}
 ::google::protobuf::int32 GpsLocation::latitude() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GpsLocation.latitude)
  return latitude_;
}
 void GpsLocation::set_latitude(::google::protobuf::int32 value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GpsLocation.latitude)
}

// optional sfixed32 longitude = 2;
void GpsLocation::clear_longitude() {
  longitude_ = 0;
}
 ::google::protobuf::int32 GpsLocation::longitude() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GpsLocation.longitude)
  return longitude_;
}
 void GpsLocation::set_longitude(::google::protobuf::int32 value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GpsLocation.longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeContact::kIpAddressFieldNumber;
const int NodeContact::kNodePortFieldNumber;
const int NodeContact::kClientPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeContact::NodeContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NodeContact)
}

void NodeContact::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeContact::NodeContact(const NodeContact& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NodeContact)
}

void NodeContact::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeport_ = 0u;
  clientport_ = 0u;
}

NodeContact::~NodeContact() {
  // @@protoc_insertion_point(destructor:iop.locnet.NodeContact)
  SharedDtor();
}

void NodeContact::SharedDtor() {
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeContact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeContact_descriptor_;
}

const NodeContact& NodeContact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

NodeContact* NodeContact::default_instance_ = NULL;

NodeContact* NodeContact::New(::google::protobuf::Arena* arena) const {
  NodeContact* n = new NodeContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeContact::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NodeContact)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeContact, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeContact*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nodeport_, clientport_);
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NodeContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NodeContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ipAddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nodePort;
        break;
      }

      // optional uint32 nodePort = 2;
      case 2: {
        if (tag == 16) {
         parse_nodePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientPort;
        break;
      }

      // optional uint32 clientPort = 3;
      case 3: {
        if (tag == 24) {
         parse_clientPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NodeContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NodeContact)
  return false;
#undef DO_
}

void NodeContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NodeContact)
  // optional bytes ipAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ipaddress(), output);
  }

  // optional uint32 nodePort = 2;
  if (this->nodeport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nodeport(), output);
  }

  // optional uint32 clientPort = 3;
  if (this->clientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientport(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.NodeContact)
}

::google::protobuf::uint8* NodeContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NodeContact)
  // optional bytes ipAddress = 1;
  if (this->ipaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ipaddress(), target);
  }

  // optional uint32 nodePort = 2;
  if (this->nodeport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nodeport(), target);
  }

  // optional uint32 clientPort = 3;
  if (this->clientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NodeContact)
  return target;
}

int NodeContact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NodeContact)
  int total_size = 0;

  // optional bytes ipAddress = 1;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ipaddress());
  }

  // optional uint32 nodePort = 2;
  if (this->nodeport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nodeport());
  }

  // optional uint32 clientPort = 3;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientport());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NodeContact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeContact* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NodeContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NodeContact)
    MergeFrom(*source);
  }
}

void NodeContact::MergeFrom(const NodeContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NodeContact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.nodeport() != 0) {
    set_nodeport(from.nodeport());
  }
  if (from.clientport() != 0) {
    set_clientport(from.clientport());
  }
}

void NodeContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NodeContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeContact::CopyFrom(const NodeContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NodeContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeContact::IsInitialized() const {

  return true;
}

void NodeContact::Swap(NodeContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeContact::InternalSwap(NodeContact* other) {
  ipaddress_.Swap(&other->ipaddress_);
  std::swap(nodeport_, other->nodeport_);
  std::swap(clientport_, other->clientport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeContact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeContact_descriptor_;
  metadata.reflection = NodeContact_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeContact

// optional bytes ipAddress = 1;
void NodeContact::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeContact::ipaddress() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeContact.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeContact::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.NodeContact.ipAddress)
}
 void NodeContact::set_ipaddress(const char* value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.NodeContact.ipAddress)
}
 void NodeContact::set_ipaddress(const void* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.NodeContact.ipAddress)
}
 ::std::string* NodeContact::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.NodeContact.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeContact::release_ipaddress() {
  // @@protoc_insertion_point(field_release:iop.locnet.NodeContact.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeContact::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NodeContact.ipAddress)
}

// optional uint32 nodePort = 2;
void NodeContact::clear_nodeport() {
  nodeport_ = 0u;
}
 ::google::protobuf::uint32 NodeContact::nodeport() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeContact.nodePort)
  return nodeport_;
}
 void NodeContact::set_nodeport(::google::protobuf::uint32 value) {
  
  nodeport_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.NodeContact.nodePort)
}

// optional uint32 clientPort = 3;
void NodeContact::clear_clientport() {
  clientport_ = 0u;
}
 ::google::protobuf::uint32 NodeContact::clientport() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeContact.clientPort)
  return clientport_;
}
 void NodeContact::set_clientport(::google::protobuf::uint32 value) {
  
  clientport_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.NodeContact.clientPort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kNodeIdFieldNumber;
const int NodeInfo::kContactFieldNumber;
const int NodeInfo::kLocationFieldNumber;
const int NodeInfo::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NodeInfo)
}

void NodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  contact_ = const_cast< ::iop::locnet::NodeContact*>(&::iop::locnet::NodeContact::default_instance());
  location_ = const_cast< ::iop::locnet::GpsLocation*>(&::iop::locnet::GpsLocation::default_instance());
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NodeInfo)
}

void NodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_ = NULL;
  location_ = NULL;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:iop.locnet.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete contact_;
    delete location_;
  }
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_descriptor_;
}

const NodeInfo& NodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

NodeInfo* NodeInfo::default_instance_ = NULL;

NodeInfo* NodeInfo::New(::google::protobuf::Arena* arena) const {
  NodeInfo* n = new NodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NodeInfo)
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) delete contact_;
  contact_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  services_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nodeId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }

      // optional .iop.locnet.NodeContact contact = 2;
      case 2: {
        if (tag == 18) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .iop.locnet.GpsLocation location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_services;
        break;
      }

      // repeated .iop.locnet.ServiceInfo services = 32;
      case 32: {
        if (tag == 258) {
         parse_services:
          DO_(input->IncrementRecursionDepth());
         parse_loop_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_services;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NodeInfo)
  // optional bytes nodeId = 1;
  if (this->nodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nodeid(), output);
  }

  // optional .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->contact_, output);
  }

  // optional .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // repeated .iop.locnet.ServiceInfo services = 32;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->services(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NodeInfo)
  // optional bytes nodeId = 1;
  if (this->nodeid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nodeid(), target);
  }

  // optional .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->contact_, false, target);
  }

  // optional .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  // repeated .iop.locnet.ServiceInfo services = 32;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->services(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NodeInfo)
  return target;
}

int NodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NodeInfo)
  int total_size = 0;

  // optional bytes nodeId = 1;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nodeid());
  }

  // optional .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contact_);
  }

  // optional .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // repeated .iop.locnet.ServiceInfo services = 32;
  total_size += 2 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  services_.MergeFrom(from.services_);
  if (from.nodeid().size() > 0) {

    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  if (from.has_contact()) {
    mutable_contact()->::iop::locnet::NodeContact::MergeFrom(from.contact());
  }
  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {

  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  nodeid_.Swap(&other->nodeid_);
  std::swap(contact_, other->contact_);
  std::swap(location_, other->location_);
  services_.UnsafeArenaSwap(&other->services_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_descriptor_;
  metadata.reflection = NodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfo

// optional bytes nodeId = 1;
void NodeInfo::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NodeInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeInfo.nodeId)
  return nodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeInfo::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.NodeInfo.nodeId)
}
 void NodeInfo::set_nodeid(const char* value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.NodeInfo.nodeId)
}
 void NodeInfo::set_nodeid(const void* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.NodeInfo.nodeId)
}
 ::std::string* NodeInfo::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.NodeInfo.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeInfo::release_nodeid() {
  // @@protoc_insertion_point(field_release:iop.locnet.NodeInfo.nodeId)
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeInfo::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != NULL) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NodeInfo.nodeId)
}

// optional .iop.locnet.NodeContact contact = 2;
bool NodeInfo::has_contact() const {
  return !_is_default_instance_ && contact_ != NULL;
}
void NodeInfo::clear_contact() {
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) delete contact_;
  contact_ = NULL;
}
const ::iop::locnet::NodeContact& NodeInfo::contact() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeInfo.contact)
  return contact_ != NULL ? *contact_ : *default_instance_->contact_;
}
::iop::locnet::NodeContact* NodeInfo::mutable_contact() {
  
  if (contact_ == NULL) {
    contact_ = new ::iop::locnet::NodeContact;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.NodeInfo.contact)
  return contact_;
}
::iop::locnet::NodeContact* NodeInfo::release_contact() {
  // @@protoc_insertion_point(field_release:iop.locnet.NodeInfo.contact)
  
  ::iop::locnet::NodeContact* temp = contact_;
  contact_ = NULL;
  return temp;
}
void NodeInfo::set_allocated_contact(::iop::locnet::NodeContact* contact) {
  delete contact_;
  contact_ = contact;
  if (contact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NodeInfo.contact)
}

// optional .iop.locnet.GpsLocation location = 3;
bool NodeInfo::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void NodeInfo::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::iop::locnet::GpsLocation& NodeInfo::location() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeInfo.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::iop::locnet::GpsLocation* NodeInfo::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::iop::locnet::GpsLocation;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.NodeInfo.location)
  return location_;
}
::iop::locnet::GpsLocation* NodeInfo::release_location() {
  // @@protoc_insertion_point(field_release:iop.locnet.NodeInfo.location)
  
  ::iop::locnet::GpsLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void NodeInfo::set_allocated_location(::iop::locnet::GpsLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NodeInfo.location)
}

// repeated .iop.locnet.ServiceInfo services = 32;
int NodeInfo::services_size() const {
  return services_.size();
}
void NodeInfo::clear_services() {
  services_.Clear();
}
const ::iop::locnet::ServiceInfo& NodeInfo::services(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.NodeInfo.services)
  return services_.Get(index);
}
::iop::locnet::ServiceInfo* NodeInfo::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.NodeInfo.services)
  return services_.Mutable(index);
}
::iop::locnet::ServiceInfo* NodeInfo::add_services() {
  // @@protoc_insertion_point(field_add:iop.locnet.NodeInfo.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::ServiceInfo >*
NodeInfo::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.NodeInfo.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::ServiceInfo >&
NodeInfo::services() const {
  // @@protoc_insertion_point(field_list:iop.locnet.NodeInfo.services)
  return services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageWithHeader::kHeaderFieldNumber;
const int MessageWithHeader::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageWithHeader::MessageWithHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.MessageWithHeader)
}

void MessageWithHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  body_ = const_cast< ::iop::locnet::Message*>(&::iop::locnet::Message::default_instance());
}

MessageWithHeader::MessageWithHeader(const MessageWithHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.MessageWithHeader)
}

void MessageWithHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = 0u;
  body_ = NULL;
}

MessageWithHeader::~MessageWithHeader() {
  // @@protoc_insertion_point(destructor:iop.locnet.MessageWithHeader)
  SharedDtor();
}

void MessageWithHeader::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
  }
}

void MessageWithHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWithHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWithHeader_descriptor_;
}

const MessageWithHeader& MessageWithHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

MessageWithHeader* MessageWithHeader::default_instance_ = NULL;

MessageWithHeader* MessageWithHeader::New(::google::protobuf::Arena* arena) const {
  MessageWithHeader* n = new MessageWithHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageWithHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.MessageWithHeader)
  header_ = 0u;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}

bool MessageWithHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.MessageWithHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 header = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &header_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .iop.locnet.Message body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.MessageWithHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.MessageWithHeader)
  return false;
#undef DO_
}

void MessageWithHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.MessageWithHeader)
  // optional fixed32 header = 1;
  if (this->header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->header(), output);
  }

  // optional .iop.locnet.Message body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.MessageWithHeader)
}

::google::protobuf::uint8* MessageWithHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.MessageWithHeader)
  // optional fixed32 header = 1;
  if (this->header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->header(), target);
  }

  // optional .iop.locnet.Message body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->body_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.MessageWithHeader)
  return target;
}

int MessageWithHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.MessageWithHeader)
  int total_size = 0;

  // optional fixed32 header = 1;
  if (this->header() != 0) {
    total_size += 1 + 4;
  }

  // optional .iop.locnet.Message body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWithHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.MessageWithHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageWithHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageWithHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.MessageWithHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.MessageWithHeader)
    MergeFrom(*source);
  }
}

void MessageWithHeader::MergeFrom(const MessageWithHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.MessageWithHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.header() != 0) {
    set_header(from.header());
  }
  if (from.has_body()) {
    mutable_body()->::iop::locnet::Message::MergeFrom(from.body());
  }
}

void MessageWithHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.MessageWithHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWithHeader::CopyFrom(const MessageWithHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.MessageWithHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWithHeader::IsInitialized() const {

  return true;
}

void MessageWithHeader::Swap(MessageWithHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageWithHeader::InternalSwap(MessageWithHeader* other) {
  std::swap(header_, other->header_);
  std::swap(body_, other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageWithHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageWithHeader_descriptor_;
  metadata.reflection = MessageWithHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageWithHeader

// optional fixed32 header = 1;
void MessageWithHeader::clear_header() {
  header_ = 0u;
}
 ::google::protobuf::uint32 MessageWithHeader::header() const {
  // @@protoc_insertion_point(field_get:iop.locnet.MessageWithHeader.header)
  return header_;
}
 void MessageWithHeader::set_header(::google::protobuf::uint32 value) {
  
  header_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.MessageWithHeader.header)
}

// optional .iop.locnet.Message body = 2;
bool MessageWithHeader::has_body() const {
  return !_is_default_instance_ && body_ != NULL;
}
void MessageWithHeader::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
const ::iop::locnet::Message& MessageWithHeader::body() const {
  // @@protoc_insertion_point(field_get:iop.locnet.MessageWithHeader.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
::iop::locnet::Message* MessageWithHeader::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::iop::locnet::Message;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.MessageWithHeader.body)
  return body_;
}
::iop::locnet::Message* MessageWithHeader::release_body() {
  // @@protoc_insertion_point(field_release:iop.locnet.MessageWithHeader.body)
  
  ::iop::locnet::Message* temp = body_;
  body_ = NULL;
  return temp;
}
void MessageWithHeader::set_allocated_body(::iop::locnet::Message* body) {
  delete body_;
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.MessageWithHeader.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kIdFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Message)
}

void Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Message_default_oneof_instance_->request_ = const_cast< ::iop::locnet::Request*>(&::iop::locnet::Request::default_instance());
  Message_default_oneof_instance_->response_ = const_cast< ::iop::locnet::Response*>(&::iop::locnet::Response::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Message)
}

void Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  clear_has_MessageType();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:iop.locnet.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_MessageType()) {
    clear_MessageType();
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_MessageType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Message)
  switch(MessageType_case()) {
    case kRequest: {
      delete MessageType_.request_;
      break;
    }
    case kResponse: {
      delete MessageType_.response_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Message)
  id_ = 0u;
  clear_MessageType();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .iop.locnet.Request request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional .iop.locnet.Response response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Message)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .iop.locnet.Request request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *MessageType_.request_, output);
  }

  // optional .iop.locnet.Response response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *MessageType_.response_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Message)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .iop.locnet.Request request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *MessageType_.request_, false, target);
  }

  // optional .iop.locnet.Response response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *MessageType_.response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Message)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  switch (MessageType_case()) {
    // optional .iop.locnet.Request request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *MessageType_.request_);
      break;
    }
    // optional .iop.locnet.Response response = 3;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *MessageType_.response_);
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.MessageType_case()) {
    case kRequest: {
      mutable_request()->::iop::locnet::Request::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::iop::locnet::Response::MergeFrom(from.response());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(id_, other->id_);
  std::swap(MessageType_, other->MessageType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional uint32 id = 1;
void Message::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Message::id() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Message.id)
  return id_;
}
 void Message::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.Message.id)
}

// optional .iop.locnet.Request request = 2;
bool Message::has_request() const {
  return MessageType_case() == kRequest;
}
void Message::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void Message::clear_request() {
  if (has_request()) {
    delete MessageType_.request_;
    clear_has_MessageType();
  }
}
 const ::iop::locnet::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Message.request)
  return has_request()
      ? *MessageType_.request_
      : ::iop::locnet::Request::default_instance();
}
::iop::locnet::Request* Message::mutable_request() {
  if (!has_request()) {
    clear_MessageType();
    set_has_request();
    MessageType_.request_ = new ::iop::locnet::Request;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Message.request)
  return MessageType_.request_;
}
::iop::locnet::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:iop.locnet.Message.request)
  if (has_request()) {
    clear_has_MessageType();
    ::iop::locnet::Request* temp = MessageType_.request_;
    MessageType_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_request(::iop::locnet::Request* request) {
  clear_MessageType();
  if (request) {
    set_has_request();
    MessageType_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Message.request)
}

// optional .iop.locnet.Response response = 3;
bool Message::has_response() const {
  return MessageType_case() == kResponse;
}
void Message::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void Message::clear_response() {
  if (has_response()) {
    delete MessageType_.response_;
    clear_has_MessageType();
  }
}
 const ::iop::locnet::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Message.response)
  return has_response()
      ? *MessageType_.response_
      : ::iop::locnet::Response::default_instance();
}
::iop::locnet::Response* Message::mutable_response() {
  if (!has_response()) {
    clear_MessageType();
    set_has_response();
    MessageType_.response_ = new ::iop::locnet::Response;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Message.response)
  return MessageType_.response_;
}
::iop::locnet::Response* Message::release_response() {
  // @@protoc_insertion_point(field_release:iop.locnet.Message.response)
  if (has_response()) {
    clear_has_MessageType();
    ::iop::locnet::Response* temp = MessageType_.response_;
    MessageType_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_response(::iop::locnet::Response* response) {
  clear_MessageType();
  if (response) {
    set_has_response();
    MessageType_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Message.response)
}

bool Message::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
void Message::clear_has_MessageType() {
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
Message::MessageTypeCase Message::MessageType_case() const {
  return Message::MessageTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kVersionFieldNumber;
const int Request::kLocalServiceFieldNumber;
const int Request::kRemoteNodeFieldNumber;
const int Request::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Request_default_oneof_instance_->localservice_ = const_cast< ::iop::locnet::LocalServiceRequest*>(&::iop::locnet::LocalServiceRequest::default_instance());
  Request_default_oneof_instance_->remotenode_ = const_cast< ::iop::locnet::RemoteNodeRequest*>(&::iop::locnet::RemoteNodeRequest::default_instance());
  Request_default_oneof_instance_->client_ = const_cast< ::iop::locnet::ClientRequest*>(&::iop::locnet::ClientRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_RequestType();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:iop.locnet.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_RequestType()) {
    clear_RequestType();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_RequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Request)
  switch(RequestType_case()) {
    case kLocalService: {
      delete RequestType_.localservice_;
      break;
    }
    case kRemoteNode: {
      delete RequestType_.remotenode_;
      break;
    }
    case kClient: {
      delete RequestType_.client_;
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTTYPE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Request)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_RequestType();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_localService;
        break;
      }

      // optional .iop.locnet.LocalServiceRequest localService = 2;
      case 2: {
        if (tag == 18) {
         parse_localService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remoteNode;
        break;
      }

      // optional .iop.locnet.RemoteNodeRequest remoteNode = 3;
      case 3: {
        if (tag == 26) {
         parse_remoteNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remotenode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client;
        break;
      }

      // optional .iop.locnet.ClientRequest client = 4;
      case 4: {
        if (tag == 34) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Request)
  // optional bytes version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // optional .iop.locnet.LocalServiceRequest localService = 2;
  if (has_localservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RequestType_.localservice_, output);
  }

  // optional .iop.locnet.RemoteNodeRequest remoteNode = 3;
  if (has_remotenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RequestType_.remotenode_, output);
  }

  // optional .iop.locnet.ClientRequest client = 4;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RequestType_.client_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Request)
  // optional bytes version = 1;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // optional .iop.locnet.LocalServiceRequest localService = 2;
  if (has_localservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *RequestType_.localservice_, false, target);
  }

  // optional .iop.locnet.RemoteNodeRequest remoteNode = 3;
  if (has_remotenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *RequestType_.remotenode_, false, target);
  }

  // optional .iop.locnet.ClientRequest client = 4;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *RequestType_.client_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Request)
  int total_size = 0;

  // optional bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  switch (RequestType_case()) {
    // optional .iop.locnet.LocalServiceRequest localService = 2;
    case kLocalService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RequestType_.localservice_);
      break;
    }
    // optional .iop.locnet.RemoteNodeRequest remoteNode = 3;
    case kRemoteNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RequestType_.remotenode_);
      break;
    }
    // optional .iop.locnet.ClientRequest client = 4;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RequestType_.client_);
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.RequestType_case()) {
    case kLocalService: {
      mutable_localservice()->::iop::locnet::LocalServiceRequest::MergeFrom(from.localservice());
      break;
    }
    case kRemoteNode: {
      mutable_remotenode()->::iop::locnet::RemoteNodeRequest::MergeFrom(from.remotenode());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientRequest::MergeFrom(from.client());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  version_.Swap(&other->version_);
  std::swap(RequestType_, other->RequestType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional bytes version = 1;
void Request::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::version() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Request.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.Request.version)
}
 void Request::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.Request.version)
}
 void Request::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.Request.version)
}
 ::std::string* Request::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.Request.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_version() {
  // @@protoc_insertion_point(field_release:iop.locnet.Request.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.version)
}

// optional .iop.locnet.LocalServiceRequest localService = 2;
bool Request::has_localservice() const {
  return RequestType_case() == kLocalService;
}
void Request::set_has_localservice() {
  _oneof_case_[0] = kLocalService;
}
void Request::clear_localservice() {
  if (has_localservice()) {
    delete RequestType_.localservice_;
    clear_has_RequestType();
  }
}
 const ::iop::locnet::LocalServiceRequest& Request::localservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Request.localService)
  return has_localservice()
      ? *RequestType_.localservice_
      : ::iop::locnet::LocalServiceRequest::default_instance();
}
::iop::locnet::LocalServiceRequest* Request::mutable_localservice() {
  if (!has_localservice()) {
    clear_RequestType();
    set_has_localservice();
    RequestType_.localservice_ = new ::iop::locnet::LocalServiceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Request.localService)
  return RequestType_.localservice_;
}
::iop::locnet::LocalServiceRequest* Request::release_localservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.Request.localService)
  if (has_localservice()) {
    clear_has_RequestType();
    ::iop::locnet::LocalServiceRequest* temp = RequestType_.localservice_;
    RequestType_.localservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_localservice(::iop::locnet::LocalServiceRequest* localservice) {
  clear_RequestType();
  if (localservice) {
    set_has_localservice();
    RequestType_.localservice_ = localservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.localService)
}

// optional .iop.locnet.RemoteNodeRequest remoteNode = 3;
bool Request::has_remotenode() const {
  return RequestType_case() == kRemoteNode;
}
void Request::set_has_remotenode() {
  _oneof_case_[0] = kRemoteNode;
}
void Request::clear_remotenode() {
  if (has_remotenode()) {
    delete RequestType_.remotenode_;
    clear_has_RequestType();
  }
}
 const ::iop::locnet::RemoteNodeRequest& Request::remotenode() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Request.remoteNode)
  return has_remotenode()
      ? *RequestType_.remotenode_
      : ::iop::locnet::RemoteNodeRequest::default_instance();
}
::iop::locnet::RemoteNodeRequest* Request::mutable_remotenode() {
  if (!has_remotenode()) {
    clear_RequestType();
    set_has_remotenode();
    RequestType_.remotenode_ = new ::iop::locnet::RemoteNodeRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Request.remoteNode)
  return RequestType_.remotenode_;
}
::iop::locnet::RemoteNodeRequest* Request::release_remotenode() {
  // @@protoc_insertion_point(field_release:iop.locnet.Request.remoteNode)
  if (has_remotenode()) {
    clear_has_RequestType();
    ::iop::locnet::RemoteNodeRequest* temp = RequestType_.remotenode_;
    RequestType_.remotenode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_remotenode(::iop::locnet::RemoteNodeRequest* remotenode) {
  clear_RequestType();
  if (remotenode) {
    set_has_remotenode();
    RequestType_.remotenode_ = remotenode;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.remoteNode)
}

// optional .iop.locnet.ClientRequest client = 4;
bool Request::has_client() const {
  return RequestType_case() == kClient;
}
void Request::set_has_client() {
  _oneof_case_[0] = kClient;
}
void Request::clear_client() {
  if (has_client()) {
    delete RequestType_.client_;
    clear_has_RequestType();
  }
}
 const ::iop::locnet::ClientRequest& Request::client() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Request.client)
  return has_client()
      ? *RequestType_.client_
      : ::iop::locnet::ClientRequest::default_instance();
}
::iop::locnet::ClientRequest* Request::mutable_client() {
  if (!has_client()) {
    clear_RequestType();
    set_has_client();
    RequestType_.client_ = new ::iop::locnet::ClientRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Request.client)
  return RequestType_.client_;
}
::iop::locnet::ClientRequest* Request::release_client() {
  // @@protoc_insertion_point(field_release:iop.locnet.Request.client)
  if (has_client()) {
    clear_has_RequestType();
    ::iop::locnet::ClientRequest* temp = RequestType_.client_;
    RequestType_.client_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_client(::iop::locnet::ClientRequest* client) {
  clear_RequestType();
  if (client) {
    set_has_client();
    RequestType_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.client)
}

bool Request::has_RequestType() const {
  return RequestType_case() != REQUESTTYPE_NOT_SET;
}
void Request::clear_has_RequestType() {
  _oneof_case_[0] = REQUESTTYPE_NOT_SET;
}
Request::RequestTypeCase Request::RequestType_case() const {
  return Request::RequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kTimestampFieldNumber;
const int Response::kDetailsFieldNumber;
const int Response::kLocalServiceFieldNumber;
const int Response::kRemoteNodeFieldNumber;
const int Response::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->localservice_ = const_cast< ::iop::locnet::LocalServiceResponse*>(&::iop::locnet::LocalServiceResponse::default_instance());
  Response_default_oneof_instance_->remotenode_ = const_cast< ::iop::locnet::RemoteNodeResponse*>(&::iop::locnet::RemoteNodeResponse::default_instance());
  Response_default_oneof_instance_->client_ = const_cast< ::iop::locnet::ClientResponse*>(&::iop::locnet::ClientResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ResponseType();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:iop.locnet.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_ResponseType()) {
    clear_ResponseType();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_ResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Response)
  switch(ResponseType_case()) {
    case kLocalService: {
      delete ResponseType_.localservice_;
      break;
    }
    case kRemoteNode: {
      delete ResponseType_.remotenode_;
      break;
    }
    case kClient: {
      delete ResponseType_.client_;
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSETYPE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Response)
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_ResponseType();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::iop::locnet::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_details;
        break;
      }

      // optional string details = 3;
      case 3: {
        if (tag == 26) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->details().data(), this->details().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iop.locnet.Response.details"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_localService;
        break;
      }

      // optional .iop.locnet.LocalServiceResponse localService = 4;
      case 4: {
        if (tag == 34) {
         parse_localService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remoteNode;
        break;
      }

      // optional .iop.locnet.RemoteNodeResponse remoteNode = 5;
      case 5: {
        if (tag == 42) {
         parse_remoteNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remotenode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_client;
        break;
      }

      // optional .iop.locnet.ClientResponse client = 6;
      case 6: {
        if (tag == 50) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Response)
  // optional .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->timestamp(), output);
  }

  // optional string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.Response.details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->details(), output);
  }

  // optional .iop.locnet.LocalServiceResponse localService = 4;
  if (has_localservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ResponseType_.localservice_, output);
  }

  // optional .iop.locnet.RemoteNodeResponse remoteNode = 5;
  if (has_remotenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *ResponseType_.remotenode_, output);
  }

  // optional .iop.locnet.ClientResponse client = 6;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *ResponseType_.client_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Response)
  // optional .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->timestamp(), target);
  }

  // optional string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.Response.details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->details(), target);
  }

  // optional .iop.locnet.LocalServiceResponse localService = 4;
  if (has_localservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *ResponseType_.localservice_, false, target);
  }

  // optional .iop.locnet.RemoteNodeResponse remoteNode = 5;
  if (has_remotenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *ResponseType_.remotenode_, false, target);
  }

  // optional .iop.locnet.ClientResponse client = 6;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *ResponseType_.client_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Response)
  int total_size = 0;

  // optional .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->timestamp());
  }

  // optional string details = 3;
  if (this->details().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->details());
  }

  switch (ResponseType_case()) {
    // optional .iop.locnet.LocalServiceResponse localService = 4;
    case kLocalService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ResponseType_.localservice_);
      break;
    }
    // optional .iop.locnet.RemoteNodeResponse remoteNode = 5;
    case kRemoteNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ResponseType_.remotenode_);
      break;
    }
    // optional .iop.locnet.ClientResponse client = 6;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ResponseType_.client_);
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ResponseType_case()) {
    case kLocalService: {
      mutable_localservice()->::iop::locnet::LocalServiceResponse::MergeFrom(from.localservice());
      break;
    }
    case kRemoteNode: {
      mutable_remotenode()->::iop::locnet::RemoteNodeResponse::MergeFrom(from.remotenode());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientResponse::MergeFrom(from.client());
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.details().size() > 0) {

    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  std::swap(timestamp_, other->timestamp_);
  details_.Swap(&other->details_);
  std::swap(ResponseType_, other->ResponseType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .iop.locnet.Status status = 1;
void Response::clear_status() {
  status_ = 0;
}
 ::iop::locnet::Status Response::status() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.status)
  return static_cast< ::iop::locnet::Status >(status_);
}
 void Response::set_status(::iop::locnet::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.Response.status)
}

// optional sint64 timestamp = 2;
void Response::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Response::timestamp() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.timestamp)
  return timestamp_;
}
 void Response::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.Response.timestamp)
}

// optional string details = 3;
void Response::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::details() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.details)
  return details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.Response.details)
}
 void Response::set_details(const char* value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.Response.details)
}
 void Response::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.Response.details)
}
 ::std::string* Response::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.Response.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_details() {
  // @@protoc_insertion_point(field_release:iop.locnet.Response.details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.details)
}

// optional .iop.locnet.LocalServiceResponse localService = 4;
bool Response::has_localservice() const {
  return ResponseType_case() == kLocalService;
}
void Response::set_has_localservice() {
  _oneof_case_[0] = kLocalService;
}
void Response::clear_localservice() {
  if (has_localservice()) {
    delete ResponseType_.localservice_;
    clear_has_ResponseType();
  }
}
 const ::iop::locnet::LocalServiceResponse& Response::localservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.localService)
  return has_localservice()
      ? *ResponseType_.localservice_
      : ::iop::locnet::LocalServiceResponse::default_instance();
}
::iop::locnet::LocalServiceResponse* Response::mutable_localservice() {
  if (!has_localservice()) {
    clear_ResponseType();
    set_has_localservice();
    ResponseType_.localservice_ = new ::iop::locnet::LocalServiceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Response.localService)
  return ResponseType_.localservice_;
}
::iop::locnet::LocalServiceResponse* Response::release_localservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.Response.localService)
  if (has_localservice()) {
    clear_has_ResponseType();
    ::iop::locnet::LocalServiceResponse* temp = ResponseType_.localservice_;
    ResponseType_.localservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_localservice(::iop::locnet::LocalServiceResponse* localservice) {
  clear_ResponseType();
  if (localservice) {
    set_has_localservice();
    ResponseType_.localservice_ = localservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.localService)
}

// optional .iop.locnet.RemoteNodeResponse remoteNode = 5;
bool Response::has_remotenode() const {
  return ResponseType_case() == kRemoteNode;
}
void Response::set_has_remotenode() {
  _oneof_case_[0] = kRemoteNode;
}
void Response::clear_remotenode() {
  if (has_remotenode()) {
    delete ResponseType_.remotenode_;
    clear_has_ResponseType();
  }
}
 const ::iop::locnet::RemoteNodeResponse& Response::remotenode() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.remoteNode)
  return has_remotenode()
      ? *ResponseType_.remotenode_
      : ::iop::locnet::RemoteNodeResponse::default_instance();
}
::iop::locnet::RemoteNodeResponse* Response::mutable_remotenode() {
  if (!has_remotenode()) {
    clear_ResponseType();
    set_has_remotenode();
    ResponseType_.remotenode_ = new ::iop::locnet::RemoteNodeResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Response.remoteNode)
  return ResponseType_.remotenode_;
}
::iop::locnet::RemoteNodeResponse* Response::release_remotenode() {
  // @@protoc_insertion_point(field_release:iop.locnet.Response.remoteNode)
  if (has_remotenode()) {
    clear_has_ResponseType();
    ::iop::locnet::RemoteNodeResponse* temp = ResponseType_.remotenode_;
    ResponseType_.remotenode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_remotenode(::iop::locnet::RemoteNodeResponse* remotenode) {
  clear_ResponseType();
  if (remotenode) {
    set_has_remotenode();
    ResponseType_.remotenode_ = remotenode;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.remoteNode)
}

// optional .iop.locnet.ClientResponse client = 6;
bool Response::has_client() const {
  return ResponseType_case() == kClient;
}
void Response::set_has_client() {
  _oneof_case_[0] = kClient;
}
void Response::clear_client() {
  if (has_client()) {
    delete ResponseType_.client_;
    clear_has_ResponseType();
  }
}
 const ::iop::locnet::ClientResponse& Response::client() const {
  // @@protoc_insertion_point(field_get:iop.locnet.Response.client)
  return has_client()
      ? *ResponseType_.client_
      : ::iop::locnet::ClientResponse::default_instance();
}
::iop::locnet::ClientResponse* Response::mutable_client() {
  if (!has_client()) {
    clear_ResponseType();
    set_has_client();
    ResponseType_.client_ = new ::iop::locnet::ClientResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.Response.client)
  return ResponseType_.client_;
}
::iop::locnet::ClientResponse* Response::release_client() {
  // @@protoc_insertion_point(field_release:iop.locnet.Response.client)
  if (has_client()) {
    clear_has_ResponseType();
    ::iop::locnet::ClientResponse* temp = ResponseType_.client_;
    ResponseType_.client_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_client(::iop::locnet::ClientResponse* client) {
  clear_ResponseType();
  if (client) {
    set_has_client();
    ResponseType_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.client)
}

bool Response::has_ResponseType() const {
  return ResponseType_case() != RESPONSETYPE_NOT_SET;
}
void Response::clear_has_ResponseType() {
  _oneof_case_[0] = RESPONSETYPE_NOT_SET;
}
Response::ResponseTypeCase Response::ResponseType_case() const {
  return Response::ResponseTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalServiceRequest::kRegisterServiceFieldNumber;
const int LocalServiceRequest::kDeregisterServiceFieldNumber;
const int LocalServiceRequest::kGetNeighbourNodesFieldNumber;
const int LocalServiceRequest::kNeighbourhoodChangedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalServiceRequest::LocalServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.LocalServiceRequest)
}

void LocalServiceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LocalServiceRequest_default_oneof_instance_->registerservice_ = const_cast< ::iop::locnet::RegisterServiceRequest*>(&::iop::locnet::RegisterServiceRequest::default_instance());
  LocalServiceRequest_default_oneof_instance_->deregisterservice_ = const_cast< ::iop::locnet::DeregisterServiceRequest*>(&::iop::locnet::DeregisterServiceRequest::default_instance());
  LocalServiceRequest_default_oneof_instance_->getneighbournodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest*>(&::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::default_instance());
  LocalServiceRequest_default_oneof_instance_->neighbourhoodchanged_ = const_cast< ::iop::locnet::NeighbourhoodChangedNotificationRequest*>(&::iop::locnet::NeighbourhoodChangedNotificationRequest::default_instance());
}

LocalServiceRequest::LocalServiceRequest(const LocalServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.LocalServiceRequest)
}

void LocalServiceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_LocalServiceRequestType();
}

LocalServiceRequest::~LocalServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.LocalServiceRequest)
  SharedDtor();
}

void LocalServiceRequest::SharedDtor() {
  if (has_LocalServiceRequestType()) {
    clear_LocalServiceRequestType();
  }
  if (this != default_instance_) {
  }
}

void LocalServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalServiceRequest_descriptor_;
}

const LocalServiceRequest& LocalServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

LocalServiceRequest* LocalServiceRequest::default_instance_ = NULL;

LocalServiceRequest* LocalServiceRequest::New(::google::protobuf::Arena* arena) const {
  LocalServiceRequest* n = new LocalServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalServiceRequest::clear_LocalServiceRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.LocalServiceRequest)
  switch(LocalServiceRequestType_case()) {
    case kRegisterService: {
      delete LocalServiceRequestType_.registerservice_;
      break;
    }
    case kDeregisterService: {
      delete LocalServiceRequestType_.deregisterservice_;
      break;
    }
    case kGetNeighbourNodes: {
      delete LocalServiceRequestType_.getneighbournodes_;
      break;
    }
    case kNeighbourhoodChanged: {
      delete LocalServiceRequestType_.neighbourhoodchanged_;
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALSERVICEREQUESTTYPE_NOT_SET;
}


void LocalServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.LocalServiceRequest)
  clear_LocalServiceRequestType();
}

bool LocalServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.LocalServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.RegisterServiceRequest registerService = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deregisterService;
        break;
      }

      // optional .iop.locnet.DeregisterServiceRequest deregisterService = 2;
      case 2: {
        if (tag == 18) {
         parse_deregisterService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deregisterservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getNeighbourNodes;
        break;
      }

      // optional .iop.locnet.GetNeighbourNodesByDistanceLocalRequest getNeighbourNodes = 3;
      case 3: {
        if (tag == 26) {
         parse_getNeighbourNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getneighbournodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_neighbourhoodChanged;
        break;
      }

      // optional .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhoodChanged = 4;
      case 4: {
        if (tag == 34) {
         parse_neighbourhoodChanged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neighbourhoodchanged()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.LocalServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.LocalServiceRequest)
  return false;
#undef DO_
}

void LocalServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.LocalServiceRequest)
  // optional .iop.locnet.RegisterServiceRequest registerService = 1;
  if (has_registerservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *LocalServiceRequestType_.registerservice_, output);
  }

  // optional .iop.locnet.DeregisterServiceRequest deregisterService = 2;
  if (has_deregisterservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *LocalServiceRequestType_.deregisterservice_, output);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceLocalRequest getNeighbourNodes = 3;
  if (has_getneighbournodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *LocalServiceRequestType_.getneighbournodes_, output);
  }

  // optional .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhoodChanged = 4;
  if (has_neighbourhoodchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *LocalServiceRequestType_.neighbourhoodchanged_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.LocalServiceRequest)
}

::google::protobuf::uint8* LocalServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.LocalServiceRequest)
  // optional .iop.locnet.RegisterServiceRequest registerService = 1;
  if (has_registerservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *LocalServiceRequestType_.registerservice_, false, target);
  }

  // optional .iop.locnet.DeregisterServiceRequest deregisterService = 2;
  if (has_deregisterservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *LocalServiceRequestType_.deregisterservice_, false, target);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceLocalRequest getNeighbourNodes = 3;
  if (has_getneighbournodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *LocalServiceRequestType_.getneighbournodes_, false, target);
  }

  // optional .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhoodChanged = 4;
  if (has_neighbourhoodchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *LocalServiceRequestType_.neighbourhoodchanged_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.LocalServiceRequest)
  return target;
}

int LocalServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.LocalServiceRequest)
  int total_size = 0;

  switch (LocalServiceRequestType_case()) {
    // optional .iop.locnet.RegisterServiceRequest registerService = 1;
    case kRegisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceRequestType_.registerservice_);
      break;
    }
    // optional .iop.locnet.DeregisterServiceRequest deregisterService = 2;
    case kDeregisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceRequestType_.deregisterservice_);
      break;
    }
    // optional .iop.locnet.GetNeighbourNodesByDistanceLocalRequest getNeighbourNodes = 3;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceRequestType_.getneighbournodes_);
      break;
    }
    // optional .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhoodChanged = 4;
    case kNeighbourhoodChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceRequestType_.neighbourhoodchanged_);
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.LocalServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.LocalServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.LocalServiceRequest)
    MergeFrom(*source);
  }
}

void LocalServiceRequest::MergeFrom(const LocalServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.LocalServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.LocalServiceRequestType_case()) {
    case kRegisterService: {
      mutable_registerservice()->::iop::locnet::RegisterServiceRequest::MergeFrom(from.registerservice());
      break;
    }
    case kDeregisterService: {
      mutable_deregisterservice()->::iop::locnet::DeregisterServiceRequest::MergeFrom(from.deregisterservice());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_getneighbournodes()->::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::MergeFrom(from.getneighbournodes());
      break;
    }
    case kNeighbourhoodChanged: {
      mutable_neighbourhoodchanged()->::iop::locnet::NeighbourhoodChangedNotificationRequest::MergeFrom(from.neighbourhoodchanged());
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void LocalServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.LocalServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalServiceRequest::CopyFrom(const LocalServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.LocalServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalServiceRequest::IsInitialized() const {

  return true;
}

void LocalServiceRequest::Swap(LocalServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalServiceRequest::InternalSwap(LocalServiceRequest* other) {
  std::swap(LocalServiceRequestType_, other->LocalServiceRequestType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalServiceRequest_descriptor_;
  metadata.reflection = LocalServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalServiceRequest

// optional .iop.locnet.RegisterServiceRequest registerService = 1;
bool LocalServiceRequest::has_registerservice() const {
  return LocalServiceRequestType_case() == kRegisterService;
}
void LocalServiceRequest::set_has_registerservice() {
  _oneof_case_[0] = kRegisterService;
}
void LocalServiceRequest::clear_registerservice() {
  if (has_registerservice()) {
    delete LocalServiceRequestType_.registerservice_;
    clear_has_LocalServiceRequestType();
  }
}
 const ::iop::locnet::RegisterServiceRequest& LocalServiceRequest::registerservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceRequest.registerService)
  return has_registerservice()
      ? *LocalServiceRequestType_.registerservice_
      : ::iop::locnet::RegisterServiceRequest::default_instance();
}
::iop::locnet::RegisterServiceRequest* LocalServiceRequest::mutable_registerservice() {
  if (!has_registerservice()) {
    clear_LocalServiceRequestType();
    set_has_registerservice();
    LocalServiceRequestType_.registerservice_ = new ::iop::locnet::RegisterServiceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceRequest.registerService)
  return LocalServiceRequestType_.registerservice_;
}
::iop::locnet::RegisterServiceRequest* LocalServiceRequest::release_registerservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceRequest.registerService)
  if (has_registerservice()) {
    clear_has_LocalServiceRequestType();
    ::iop::locnet::RegisterServiceRequest* temp = LocalServiceRequestType_.registerservice_;
    LocalServiceRequestType_.registerservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceRequest::set_allocated_registerservice(::iop::locnet::RegisterServiceRequest* registerservice) {
  clear_LocalServiceRequestType();
  if (registerservice) {
    set_has_registerservice();
    LocalServiceRequestType_.registerservice_ = registerservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.registerService)
}

// optional .iop.locnet.DeregisterServiceRequest deregisterService = 2;
bool LocalServiceRequest::has_deregisterservice() const {
  return LocalServiceRequestType_case() == kDeregisterService;
}
void LocalServiceRequest::set_has_deregisterservice() {
  _oneof_case_[0] = kDeregisterService;
}
void LocalServiceRequest::clear_deregisterservice() {
  if (has_deregisterservice()) {
    delete LocalServiceRequestType_.deregisterservice_;
    clear_has_LocalServiceRequestType();
  }
}
 const ::iop::locnet::DeregisterServiceRequest& LocalServiceRequest::deregisterservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceRequest.deregisterService)
  return has_deregisterservice()
      ? *LocalServiceRequestType_.deregisterservice_
      : ::iop::locnet::DeregisterServiceRequest::default_instance();
}
::iop::locnet::DeregisterServiceRequest* LocalServiceRequest::mutable_deregisterservice() {
  if (!has_deregisterservice()) {
    clear_LocalServiceRequestType();
    set_has_deregisterservice();
    LocalServiceRequestType_.deregisterservice_ = new ::iop::locnet::DeregisterServiceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceRequest.deregisterService)
  return LocalServiceRequestType_.deregisterservice_;
}
::iop::locnet::DeregisterServiceRequest* LocalServiceRequest::release_deregisterservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceRequest.deregisterService)
  if (has_deregisterservice()) {
    clear_has_LocalServiceRequestType();
    ::iop::locnet::DeregisterServiceRequest* temp = LocalServiceRequestType_.deregisterservice_;
    LocalServiceRequestType_.deregisterservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceRequest::set_allocated_deregisterservice(::iop::locnet::DeregisterServiceRequest* deregisterservice) {
  clear_LocalServiceRequestType();
  if (deregisterservice) {
    set_has_deregisterservice();
    LocalServiceRequestType_.deregisterservice_ = deregisterservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.deregisterService)
}

// optional .iop.locnet.GetNeighbourNodesByDistanceLocalRequest getNeighbourNodes = 3;
bool LocalServiceRequest::has_getneighbournodes() const {
  return LocalServiceRequestType_case() == kGetNeighbourNodes;
}
void LocalServiceRequest::set_has_getneighbournodes() {
  _oneof_case_[0] = kGetNeighbourNodes;
}
void LocalServiceRequest::clear_getneighbournodes() {
  if (has_getneighbournodes()) {
    delete LocalServiceRequestType_.getneighbournodes_;
    clear_has_LocalServiceRequestType();
  }
}
 const ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest& LocalServiceRequest::getneighbournodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceRequest.getNeighbourNodes)
  return has_getneighbournodes()
      ? *LocalServiceRequestType_.getneighbournodes_
      : ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::default_instance();
}
::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* LocalServiceRequest::mutable_getneighbournodes() {
  if (!has_getneighbournodes()) {
    clear_LocalServiceRequestType();
    set_has_getneighbournodes();
    LocalServiceRequestType_.getneighbournodes_ = new ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceRequest.getNeighbourNodes)
  return LocalServiceRequestType_.getneighbournodes_;
}
::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* LocalServiceRequest::release_getneighbournodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceRequest.getNeighbourNodes)
  if (has_getneighbournodes()) {
    clear_has_LocalServiceRequestType();
    ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* temp = LocalServiceRequestType_.getneighbournodes_;
    LocalServiceRequestType_.getneighbournodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceRequest::set_allocated_getneighbournodes(::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* getneighbournodes) {
  clear_LocalServiceRequestType();
  if (getneighbournodes) {
    set_has_getneighbournodes();
    LocalServiceRequestType_.getneighbournodes_ = getneighbournodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.getNeighbourNodes)
}

// optional .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhoodChanged = 4;
bool LocalServiceRequest::has_neighbourhoodchanged() const {
  return LocalServiceRequestType_case() == kNeighbourhoodChanged;
}
void LocalServiceRequest::set_has_neighbourhoodchanged() {
  _oneof_case_[0] = kNeighbourhoodChanged;
}
void LocalServiceRequest::clear_neighbourhoodchanged() {
  if (has_neighbourhoodchanged()) {
    delete LocalServiceRequestType_.neighbourhoodchanged_;
    clear_has_LocalServiceRequestType();
  }
}
 const ::iop::locnet::NeighbourhoodChangedNotificationRequest& LocalServiceRequest::neighbourhoodchanged() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceRequest.neighbourhoodChanged)
  return has_neighbourhoodchanged()
      ? *LocalServiceRequestType_.neighbourhoodchanged_
      : ::iop::locnet::NeighbourhoodChangedNotificationRequest::default_instance();
}
::iop::locnet::NeighbourhoodChangedNotificationRequest* LocalServiceRequest::mutable_neighbourhoodchanged() {
  if (!has_neighbourhoodchanged()) {
    clear_LocalServiceRequestType();
    set_has_neighbourhoodchanged();
    LocalServiceRequestType_.neighbourhoodchanged_ = new ::iop::locnet::NeighbourhoodChangedNotificationRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceRequest.neighbourhoodChanged)
  return LocalServiceRequestType_.neighbourhoodchanged_;
}
::iop::locnet::NeighbourhoodChangedNotificationRequest* LocalServiceRequest::release_neighbourhoodchanged() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceRequest.neighbourhoodChanged)
  if (has_neighbourhoodchanged()) {
    clear_has_LocalServiceRequestType();
    ::iop::locnet::NeighbourhoodChangedNotificationRequest* temp = LocalServiceRequestType_.neighbourhoodchanged_;
    LocalServiceRequestType_.neighbourhoodchanged_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceRequest::set_allocated_neighbourhoodchanged(::iop::locnet::NeighbourhoodChangedNotificationRequest* neighbourhoodchanged) {
  clear_LocalServiceRequestType();
  if (neighbourhoodchanged) {
    set_has_neighbourhoodchanged();
    LocalServiceRequestType_.neighbourhoodchanged_ = neighbourhoodchanged;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.neighbourhoodChanged)
}

bool LocalServiceRequest::has_LocalServiceRequestType() const {
  return LocalServiceRequestType_case() != LOCALSERVICEREQUESTTYPE_NOT_SET;
}
void LocalServiceRequest::clear_has_LocalServiceRequestType() {
  _oneof_case_[0] = LOCALSERVICEREQUESTTYPE_NOT_SET;
}
LocalServiceRequest::LocalServiceRequestTypeCase LocalServiceRequest::LocalServiceRequestType_case() const {
  return LocalServiceRequest::LocalServiceRequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalServiceResponse::kRegisterServiceFieldNumber;
const int LocalServiceResponse::kDeregisterServiceFieldNumber;
const int LocalServiceResponse::kGetNeighbourNodesFieldNumber;
const int LocalServiceResponse::kNeighbourhoodUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalServiceResponse::LocalServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.LocalServiceResponse)
}

void LocalServiceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LocalServiceResponse_default_oneof_instance_->registerservice_ = const_cast< ::iop::locnet::RegisterServiceResponse*>(&::iop::locnet::RegisterServiceResponse::default_instance());
  LocalServiceResponse_default_oneof_instance_->deregisterservice_ = const_cast< ::iop::locnet::DeregisterServiceResponse*>(&::iop::locnet::DeregisterServiceResponse::default_instance());
  LocalServiceResponse_default_oneof_instance_->getneighbournodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceResponse*>(&::iop::locnet::GetNeighbourNodesByDistanceResponse::default_instance());
  LocalServiceResponse_default_oneof_instance_->neighbourhoodupdated_ = const_cast< ::iop::locnet::NeighbourhoodChangedNotificationResponse*>(&::iop::locnet::NeighbourhoodChangedNotificationResponse::default_instance());
}

LocalServiceResponse::LocalServiceResponse(const LocalServiceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.LocalServiceResponse)
}

void LocalServiceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_LocalServiceResponseType();
}

LocalServiceResponse::~LocalServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.LocalServiceResponse)
  SharedDtor();
}

void LocalServiceResponse::SharedDtor() {
  if (has_LocalServiceResponseType()) {
    clear_LocalServiceResponseType();
  }
  if (this != default_instance_) {
  }
}

void LocalServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalServiceResponse_descriptor_;
}

const LocalServiceResponse& LocalServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

LocalServiceResponse* LocalServiceResponse::default_instance_ = NULL;

LocalServiceResponse* LocalServiceResponse::New(::google::protobuf::Arena* arena) const {
  LocalServiceResponse* n = new LocalServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalServiceResponse::clear_LocalServiceResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.LocalServiceResponse)
  switch(LocalServiceResponseType_case()) {
    case kRegisterService: {
      delete LocalServiceResponseType_.registerservice_;
      break;
    }
    case kDeregisterService: {
      delete LocalServiceResponseType_.deregisterservice_;
      break;
    }
    case kGetNeighbourNodes: {
      delete LocalServiceResponseType_.getneighbournodes_;
      break;
    }
    case kNeighbourhoodUpdated: {
      delete LocalServiceResponseType_.neighbourhoodupdated_;
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALSERVICERESPONSETYPE_NOT_SET;
}


void LocalServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.LocalServiceResponse)
  clear_LocalServiceResponseType();
}

bool LocalServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.LocalServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.RegisterServiceResponse registerService = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deregisterService;
        break;
      }

      // optional .iop.locnet.DeregisterServiceResponse deregisterService = 2;
      case 2: {
        if (tag == 18) {
         parse_deregisterService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deregisterservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getNeighbourNodes;
        break;
      }

      // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 3;
      case 3: {
        if (tag == 26) {
         parse_getNeighbourNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getneighbournodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_neighbourhoodUpdated;
        break;
      }

      // optional .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhoodUpdated = 4;
      case 4: {
        if (tag == 34) {
         parse_neighbourhoodUpdated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neighbourhoodupdated()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.LocalServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.LocalServiceResponse)
  return false;
#undef DO_
}

void LocalServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.LocalServiceResponse)
  // optional .iop.locnet.RegisterServiceResponse registerService = 1;
  if (has_registerservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *LocalServiceResponseType_.registerservice_, output);
  }

  // optional .iop.locnet.DeregisterServiceResponse deregisterService = 2;
  if (has_deregisterservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *LocalServiceResponseType_.deregisterservice_, output);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 3;
  if (has_getneighbournodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *LocalServiceResponseType_.getneighbournodes_, output);
  }

  // optional .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhoodUpdated = 4;
  if (has_neighbourhoodupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *LocalServiceResponseType_.neighbourhoodupdated_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.LocalServiceResponse)
}

::google::protobuf::uint8* LocalServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.LocalServiceResponse)
  // optional .iop.locnet.RegisterServiceResponse registerService = 1;
  if (has_registerservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *LocalServiceResponseType_.registerservice_, false, target);
  }

  // optional .iop.locnet.DeregisterServiceResponse deregisterService = 2;
  if (has_deregisterservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *LocalServiceResponseType_.deregisterservice_, false, target);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 3;
  if (has_getneighbournodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *LocalServiceResponseType_.getneighbournodes_, false, target);
  }

  // optional .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhoodUpdated = 4;
  if (has_neighbourhoodupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *LocalServiceResponseType_.neighbourhoodupdated_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.LocalServiceResponse)
  return target;
}

int LocalServiceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.LocalServiceResponse)
  int total_size = 0;

  switch (LocalServiceResponseType_case()) {
    // optional .iop.locnet.RegisterServiceResponse registerService = 1;
    case kRegisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceResponseType_.registerservice_);
      break;
    }
    // optional .iop.locnet.DeregisterServiceResponse deregisterService = 2;
    case kDeregisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceResponseType_.deregisterservice_);
      break;
    }
    // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 3;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceResponseType_.getneighbournodes_);
      break;
    }
    // optional .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhoodUpdated = 4;
    case kNeighbourhoodUpdated: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *LocalServiceResponseType_.neighbourhoodupdated_);
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.LocalServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalServiceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.LocalServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.LocalServiceResponse)
    MergeFrom(*source);
  }
}

void LocalServiceResponse::MergeFrom(const LocalServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.LocalServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.LocalServiceResponseType_case()) {
    case kRegisterService: {
      mutable_registerservice()->::iop::locnet::RegisterServiceResponse::MergeFrom(from.registerservice());
      break;
    }
    case kDeregisterService: {
      mutable_deregisterservice()->::iop::locnet::DeregisterServiceResponse::MergeFrom(from.deregisterservice());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_getneighbournodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.getneighbournodes());
      break;
    }
    case kNeighbourhoodUpdated: {
      mutable_neighbourhoodupdated()->::iop::locnet::NeighbourhoodChangedNotificationResponse::MergeFrom(from.neighbourhoodupdated());
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void LocalServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.LocalServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalServiceResponse::CopyFrom(const LocalServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.LocalServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalServiceResponse::IsInitialized() const {

  return true;
}

void LocalServiceResponse::Swap(LocalServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalServiceResponse::InternalSwap(LocalServiceResponse* other) {
  std::swap(LocalServiceResponseType_, other->LocalServiceResponseType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalServiceResponse_descriptor_;
  metadata.reflection = LocalServiceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalServiceResponse

// optional .iop.locnet.RegisterServiceResponse registerService = 1;
bool LocalServiceResponse::has_registerservice() const {
  return LocalServiceResponseType_case() == kRegisterService;
}
void LocalServiceResponse::set_has_registerservice() {
  _oneof_case_[0] = kRegisterService;
}
void LocalServiceResponse::clear_registerservice() {
  if (has_registerservice()) {
    delete LocalServiceResponseType_.registerservice_;
    clear_has_LocalServiceResponseType();
  }
}
 const ::iop::locnet::RegisterServiceResponse& LocalServiceResponse::registerservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceResponse.registerService)
  return has_registerservice()
      ? *LocalServiceResponseType_.registerservice_
      : ::iop::locnet::RegisterServiceResponse::default_instance();
}
::iop::locnet::RegisterServiceResponse* LocalServiceResponse::mutable_registerservice() {
  if (!has_registerservice()) {
    clear_LocalServiceResponseType();
    set_has_registerservice();
    LocalServiceResponseType_.registerservice_ = new ::iop::locnet::RegisterServiceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceResponse.registerService)
  return LocalServiceResponseType_.registerservice_;
}
::iop::locnet::RegisterServiceResponse* LocalServiceResponse::release_registerservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceResponse.registerService)
  if (has_registerservice()) {
    clear_has_LocalServiceResponseType();
    ::iop::locnet::RegisterServiceResponse* temp = LocalServiceResponseType_.registerservice_;
    LocalServiceResponseType_.registerservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceResponse::set_allocated_registerservice(::iop::locnet::RegisterServiceResponse* registerservice) {
  clear_LocalServiceResponseType();
  if (registerservice) {
    set_has_registerservice();
    LocalServiceResponseType_.registerservice_ = registerservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.registerService)
}

// optional .iop.locnet.DeregisterServiceResponse deregisterService = 2;
bool LocalServiceResponse::has_deregisterservice() const {
  return LocalServiceResponseType_case() == kDeregisterService;
}
void LocalServiceResponse::set_has_deregisterservice() {
  _oneof_case_[0] = kDeregisterService;
}
void LocalServiceResponse::clear_deregisterservice() {
  if (has_deregisterservice()) {
    delete LocalServiceResponseType_.deregisterservice_;
    clear_has_LocalServiceResponseType();
  }
}
 const ::iop::locnet::DeregisterServiceResponse& LocalServiceResponse::deregisterservice() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceResponse.deregisterService)
  return has_deregisterservice()
      ? *LocalServiceResponseType_.deregisterservice_
      : ::iop::locnet::DeregisterServiceResponse::default_instance();
}
::iop::locnet::DeregisterServiceResponse* LocalServiceResponse::mutable_deregisterservice() {
  if (!has_deregisterservice()) {
    clear_LocalServiceResponseType();
    set_has_deregisterservice();
    LocalServiceResponseType_.deregisterservice_ = new ::iop::locnet::DeregisterServiceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceResponse.deregisterService)
  return LocalServiceResponseType_.deregisterservice_;
}
::iop::locnet::DeregisterServiceResponse* LocalServiceResponse::release_deregisterservice() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceResponse.deregisterService)
  if (has_deregisterservice()) {
    clear_has_LocalServiceResponseType();
    ::iop::locnet::DeregisterServiceResponse* temp = LocalServiceResponseType_.deregisterservice_;
    LocalServiceResponseType_.deregisterservice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceResponse::set_allocated_deregisterservice(::iop::locnet::DeregisterServiceResponse* deregisterservice) {
  clear_LocalServiceResponseType();
  if (deregisterservice) {
    set_has_deregisterservice();
    LocalServiceResponseType_.deregisterservice_ = deregisterservice;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.deregisterService)
}

// optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 3;
bool LocalServiceResponse::has_getneighbournodes() const {
  return LocalServiceResponseType_case() == kGetNeighbourNodes;
}
void LocalServiceResponse::set_has_getneighbournodes() {
  _oneof_case_[0] = kGetNeighbourNodes;
}
void LocalServiceResponse::clear_getneighbournodes() {
  if (has_getneighbournodes()) {
    delete LocalServiceResponseType_.getneighbournodes_;
    clear_has_LocalServiceResponseType();
  }
}
 const ::iop::locnet::GetNeighbourNodesByDistanceResponse& LocalServiceResponse::getneighbournodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceResponse.getNeighbourNodes)
  return has_getneighbournodes()
      ? *LocalServiceResponseType_.getneighbournodes_
      : ::iop::locnet::GetNeighbourNodesByDistanceResponse::default_instance();
}
::iop::locnet::GetNeighbourNodesByDistanceResponse* LocalServiceResponse::mutable_getneighbournodes() {
  if (!has_getneighbournodes()) {
    clear_LocalServiceResponseType();
    set_has_getneighbournodes();
    LocalServiceResponseType_.getneighbournodes_ = new ::iop::locnet::GetNeighbourNodesByDistanceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceResponse.getNeighbourNodes)
  return LocalServiceResponseType_.getneighbournodes_;
}
::iop::locnet::GetNeighbourNodesByDistanceResponse* LocalServiceResponse::release_getneighbournodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceResponse.getNeighbourNodes)
  if (has_getneighbournodes()) {
    clear_has_LocalServiceResponseType();
    ::iop::locnet::GetNeighbourNodesByDistanceResponse* temp = LocalServiceResponseType_.getneighbournodes_;
    LocalServiceResponseType_.getneighbournodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceResponse::set_allocated_getneighbournodes(::iop::locnet::GetNeighbourNodesByDistanceResponse* getneighbournodes) {
  clear_LocalServiceResponseType();
  if (getneighbournodes) {
    set_has_getneighbournodes();
    LocalServiceResponseType_.getneighbournodes_ = getneighbournodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.getNeighbourNodes)
}

// optional .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhoodUpdated = 4;
bool LocalServiceResponse::has_neighbourhoodupdated() const {
  return LocalServiceResponseType_case() == kNeighbourhoodUpdated;
}
void LocalServiceResponse::set_has_neighbourhoodupdated() {
  _oneof_case_[0] = kNeighbourhoodUpdated;
}
void LocalServiceResponse::clear_neighbourhoodupdated() {
  if (has_neighbourhoodupdated()) {
    delete LocalServiceResponseType_.neighbourhoodupdated_;
    clear_has_LocalServiceResponseType();
  }
}
 const ::iop::locnet::NeighbourhoodChangedNotificationResponse& LocalServiceResponse::neighbourhoodupdated() const {
  // @@protoc_insertion_point(field_get:iop.locnet.LocalServiceResponse.neighbourhoodUpdated)
  return has_neighbourhoodupdated()
      ? *LocalServiceResponseType_.neighbourhoodupdated_
      : ::iop::locnet::NeighbourhoodChangedNotificationResponse::default_instance();
}
::iop::locnet::NeighbourhoodChangedNotificationResponse* LocalServiceResponse::mutable_neighbourhoodupdated() {
  if (!has_neighbourhoodupdated()) {
    clear_LocalServiceResponseType();
    set_has_neighbourhoodupdated();
    LocalServiceResponseType_.neighbourhoodupdated_ = new ::iop::locnet::NeighbourhoodChangedNotificationResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.LocalServiceResponse.neighbourhoodUpdated)
  return LocalServiceResponseType_.neighbourhoodupdated_;
}
::iop::locnet::NeighbourhoodChangedNotificationResponse* LocalServiceResponse::release_neighbourhoodupdated() {
  // @@protoc_insertion_point(field_release:iop.locnet.LocalServiceResponse.neighbourhoodUpdated)
  if (has_neighbourhoodupdated()) {
    clear_has_LocalServiceResponseType();
    ::iop::locnet::NeighbourhoodChangedNotificationResponse* temp = LocalServiceResponseType_.neighbourhoodupdated_;
    LocalServiceResponseType_.neighbourhoodupdated_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalServiceResponse::set_allocated_neighbourhoodupdated(::iop::locnet::NeighbourhoodChangedNotificationResponse* neighbourhoodupdated) {
  clear_LocalServiceResponseType();
  if (neighbourhoodupdated) {
    set_has_neighbourhoodupdated();
    LocalServiceResponseType_.neighbourhoodupdated_ = neighbourhoodupdated;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.neighbourhoodUpdated)
}

bool LocalServiceResponse::has_LocalServiceResponseType() const {
  return LocalServiceResponseType_case() != LOCALSERVICERESPONSETYPE_NOT_SET;
}
void LocalServiceResponse::clear_has_LocalServiceResponseType() {
  _oneof_case_[0] = LOCALSERVICERESPONSETYPE_NOT_SET;
}
LocalServiceResponse::LocalServiceResponseTypeCase LocalServiceResponse::LocalServiceResponseType_case() const {
  return LocalServiceResponse::LocalServiceResponseTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterServiceRequest::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterServiceRequest::RegisterServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RegisterServiceRequest)
}

void RegisterServiceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  service_ = const_cast< ::iop::locnet::ServiceInfo*>(&::iop::locnet::ServiceInfo::default_instance());
}

RegisterServiceRequest::RegisterServiceRequest(const RegisterServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RegisterServiceRequest)
}

void RegisterServiceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  service_ = NULL;
}

RegisterServiceRequest::~RegisterServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.RegisterServiceRequest)
  SharedDtor();
}

void RegisterServiceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete service_;
  }
}

void RegisterServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterServiceRequest_descriptor_;
}

const RegisterServiceRequest& RegisterServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

RegisterServiceRequest* RegisterServiceRequest::default_instance_ = NULL;

RegisterServiceRequest* RegisterServiceRequest::New(::google::protobuf::Arena* arena) const {
  RegisterServiceRequest* n = new RegisterServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RegisterServiceRequest)
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}

bool RegisterServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RegisterServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.ServiceInfo service = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RegisterServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RegisterServiceRequest)
  return false;
#undef DO_
}

void RegisterServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RegisterServiceRequest)
  // optional .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.RegisterServiceRequest)
}

::google::protobuf::uint8* RegisterServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RegisterServiceRequest)
  // optional .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->service_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RegisterServiceRequest)
  return target;
}

int RegisterServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RegisterServiceRequest)
  int total_size = 0;

  // optional .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RegisterServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RegisterServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RegisterServiceRequest)
    MergeFrom(*source);
  }
}

void RegisterServiceRequest::MergeFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RegisterServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_service()) {
    mutable_service()->::iop::locnet::ServiceInfo::MergeFrom(from.service());
  }
}

void RegisterServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceRequest::CopyFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceRequest::IsInitialized() const {

  return true;
}

void RegisterServiceRequest::Swap(RegisterServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterServiceRequest::InternalSwap(RegisterServiceRequest* other) {
  std::swap(service_, other->service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterServiceRequest_descriptor_;
  metadata.reflection = RegisterServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterServiceRequest

// optional .iop.locnet.ServiceInfo service = 1;
bool RegisterServiceRequest::has_service() const {
  return !_is_default_instance_ && service_ != NULL;
}
void RegisterServiceRequest::clear_service() {
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}
const ::iop::locnet::ServiceInfo& RegisterServiceRequest::service() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RegisterServiceRequest.service)
  return service_ != NULL ? *service_ : *default_instance_->service_;
}
::iop::locnet::ServiceInfo* RegisterServiceRequest::mutable_service() {
  
  if (service_ == NULL) {
    service_ = new ::iop::locnet::ServiceInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RegisterServiceRequest.service)
  return service_;
}
::iop::locnet::ServiceInfo* RegisterServiceRequest::release_service() {
  // @@protoc_insertion_point(field_release:iop.locnet.RegisterServiceRequest.service)
  
  ::iop::locnet::ServiceInfo* temp = service_;
  service_ = NULL;
  return temp;
}
void RegisterServiceRequest::set_allocated_service(::iop::locnet::ServiceInfo* service) {
  delete service_;
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RegisterServiceRequest.service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterServiceResponse::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterServiceResponse::RegisterServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RegisterServiceResponse)
}

void RegisterServiceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_ = const_cast< ::iop::locnet::GpsLocation*>(&::iop::locnet::GpsLocation::default_instance());
}

RegisterServiceResponse::RegisterServiceResponse(const RegisterServiceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RegisterServiceResponse)
}

void RegisterServiceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_ = NULL;
}

RegisterServiceResponse::~RegisterServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.RegisterServiceResponse)
  SharedDtor();
}

void RegisterServiceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void RegisterServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterServiceResponse_descriptor_;
}

const RegisterServiceResponse& RegisterServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

RegisterServiceResponse* RegisterServiceResponse::default_instance_ = NULL;

RegisterServiceResponse* RegisterServiceResponse::New(::google::protobuf::Arena* arena) const {
  RegisterServiceResponse* n = new RegisterServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RegisterServiceResponse)
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}

bool RegisterServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RegisterServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RegisterServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RegisterServiceResponse)
  return false;
#undef DO_
}

void RegisterServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RegisterServiceResponse)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.RegisterServiceResponse)
}

::google::protobuf::uint8* RegisterServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RegisterServiceResponse)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RegisterServiceResponse)
  return target;
}

int RegisterServiceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RegisterServiceResponse)
  int total_size = 0;

  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RegisterServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterServiceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RegisterServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RegisterServiceResponse)
    MergeFrom(*source);
  }
}

void RegisterServiceResponse::MergeFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RegisterServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
}

void RegisterServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceResponse::CopyFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceResponse::IsInitialized() const {

  return true;
}

void RegisterServiceResponse::Swap(RegisterServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterServiceResponse::InternalSwap(RegisterServiceResponse* other) {
  std::swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterServiceResponse_descriptor_;
  metadata.reflection = RegisterServiceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterServiceResponse

// optional .iop.locnet.GpsLocation location = 1;
bool RegisterServiceResponse::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void RegisterServiceResponse::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::iop::locnet::GpsLocation& RegisterServiceResponse::location() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RegisterServiceResponse.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::iop::locnet::GpsLocation* RegisterServiceResponse::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::iop::locnet::GpsLocation;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RegisterServiceResponse.location)
  return location_;
}
::iop::locnet::GpsLocation* RegisterServiceResponse::release_location() {
  // @@protoc_insertion_point(field_release:iop.locnet.RegisterServiceResponse.location)
  
  ::iop::locnet::GpsLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void RegisterServiceResponse::set_allocated_location(::iop::locnet::GpsLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RegisterServiceResponse.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterServiceRequest::kServiceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterServiceRequest::DeregisterServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.DeregisterServiceRequest)
}

void DeregisterServiceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeregisterServiceRequest::DeregisterServiceRequest(const DeregisterServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.DeregisterServiceRequest)
}

void DeregisterServiceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  servicetype_ = 0;
}

DeregisterServiceRequest::~DeregisterServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.DeregisterServiceRequest)
  SharedDtor();
}

void DeregisterServiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeregisterServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeregisterServiceRequest_descriptor_;
}

const DeregisterServiceRequest& DeregisterServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

DeregisterServiceRequest* DeregisterServiceRequest::default_instance_ = NULL;

DeregisterServiceRequest* DeregisterServiceRequest::New(::google::protobuf::Arena* arena) const {
  DeregisterServiceRequest* n = new DeregisterServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeregisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.DeregisterServiceRequest)
  servicetype_ = 0;
}

bool DeregisterServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.DeregisterServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.ServiceType serviceType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_servicetype(static_cast< ::iop::locnet::ServiceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.DeregisterServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.DeregisterServiceRequest)
  return false;
#undef DO_
}

void DeregisterServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.DeregisterServiceRequest)
  // optional .iop.locnet.ServiceType serviceType = 1;
  if (this->servicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->servicetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.DeregisterServiceRequest)
}

::google::protobuf::uint8* DeregisterServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.DeregisterServiceRequest)
  // optional .iop.locnet.ServiceType serviceType = 1;
  if (this->servicetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->servicetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.DeregisterServiceRequest)
  return target;
}

int DeregisterServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.DeregisterServiceRequest)
  int total_size = 0;

  // optional .iop.locnet.ServiceType serviceType = 1;
  if (this->servicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servicetype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.DeregisterServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeregisterServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.DeregisterServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.DeregisterServiceRequest)
    MergeFrom(*source);
  }
}

void DeregisterServiceRequest::MergeFrom(const DeregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.DeregisterServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.servicetype() != 0) {
    set_servicetype(from.servicetype());
  }
}

void DeregisterServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.DeregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterServiceRequest::CopyFrom(const DeregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.DeregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterServiceRequest::IsInitialized() const {

  return true;
}

void DeregisterServiceRequest::Swap(DeregisterServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterServiceRequest::InternalSwap(DeregisterServiceRequest* other) {
  std::swap(servicetype_, other->servicetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeregisterServiceRequest_descriptor_;
  metadata.reflection = DeregisterServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterServiceRequest

// optional .iop.locnet.ServiceType serviceType = 1;
void DeregisterServiceRequest::clear_servicetype() {
  servicetype_ = 0;
}
 ::iop::locnet::ServiceType DeregisterServiceRequest::servicetype() const {
  // @@protoc_insertion_point(field_get:iop.locnet.DeregisterServiceRequest.serviceType)
  return static_cast< ::iop::locnet::ServiceType >(servicetype_);
}
 void DeregisterServiceRequest::set_servicetype(::iop::locnet::ServiceType value) {
  
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.DeregisterServiceRequest.serviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterServiceResponse::DeregisterServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.DeregisterServiceResponse)
}

void DeregisterServiceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeregisterServiceResponse::DeregisterServiceResponse(const DeregisterServiceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.DeregisterServiceResponse)
}

void DeregisterServiceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DeregisterServiceResponse::~DeregisterServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.DeregisterServiceResponse)
  SharedDtor();
}

void DeregisterServiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeregisterServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeregisterServiceResponse_descriptor_;
}

const DeregisterServiceResponse& DeregisterServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

DeregisterServiceResponse* DeregisterServiceResponse::default_instance_ = NULL;

DeregisterServiceResponse* DeregisterServiceResponse::New(::google::protobuf::Arena* arena) const {
  DeregisterServiceResponse* n = new DeregisterServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeregisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.DeregisterServiceResponse)
}

bool DeregisterServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.DeregisterServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.DeregisterServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.DeregisterServiceResponse)
  return false;
#undef DO_
}

void DeregisterServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.DeregisterServiceResponse)
  // @@protoc_insertion_point(serialize_end:iop.locnet.DeregisterServiceResponse)
}

::google::protobuf::uint8* DeregisterServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.DeregisterServiceResponse)
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.DeregisterServiceResponse)
  return target;
}

int DeregisterServiceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.DeregisterServiceResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.DeregisterServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeregisterServiceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.DeregisterServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.DeregisterServiceResponse)
    MergeFrom(*source);
  }
}

void DeregisterServiceResponse::MergeFrom(const DeregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.DeregisterServiceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DeregisterServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.DeregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterServiceResponse::CopyFrom(const DeregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.DeregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterServiceResponse::IsInitialized() const {

  return true;
}

void DeregisterServiceResponse::Swap(DeregisterServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterServiceResponse::InternalSwap(DeregisterServiceResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeregisterServiceResponse_descriptor_;
  metadata.reflection = DeregisterServiceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterServiceResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighbourNodesByDistanceLocalRequest::kKeepAliveAndSendUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceLocalRequest::GetNeighbourNodesByDistanceLocalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}

void GetNeighbourNodesByDistanceLocalRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNeighbourNodesByDistanceLocalRequest::GetNeighbourNodesByDistanceLocalRequest(const GetNeighbourNodesByDistanceLocalRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}

void GetNeighbourNodesByDistanceLocalRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  keepaliveandsendupdates_ = false;
}

GetNeighbourNodesByDistanceLocalRequest::~GetNeighbourNodesByDistanceLocalRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  SharedDtor();
}

void GetNeighbourNodesByDistanceLocalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNeighbourNodesByDistanceLocalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceLocalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNeighbourNodesByDistanceLocalRequest_descriptor_;
}

const GetNeighbourNodesByDistanceLocalRequest& GetNeighbourNodesByDistanceLocalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNeighbourNodesByDistanceLocalRequest* GetNeighbourNodesByDistanceLocalRequest::default_instance_ = NULL;

GetNeighbourNodesByDistanceLocalRequest* GetNeighbourNodesByDistanceLocalRequest::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceLocalRequest* n = new GetNeighbourNodesByDistanceLocalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceLocalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  keepaliveandsendupdates_ = false;
}

bool GetNeighbourNodesByDistanceLocalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool keepAliveAndSendUpdates = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepaliveandsendupdates_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceLocalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  // optional bool keepAliveAndSendUpdates = 1;
  if (this->keepaliveandsendupdates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keepaliveandsendupdates(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceLocalRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  // optional bool keepAliveAndSendUpdates = 1;
  if (this->keepaliveandsendupdates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keepaliveandsendupdates(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return target;
}

int GetNeighbourNodesByDistanceLocalRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  int total_size = 0;

  // optional bool keepAliveAndSendUpdates = 1;
  if (this->keepaliveandsendupdates() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceLocalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNeighbourNodesByDistanceLocalRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceLocalRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceLocalRequest::MergeFrom(const GetNeighbourNodesByDistanceLocalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.keepaliveandsendupdates() != 0) {
    set_keepaliveandsendupdates(from.keepaliveandsendupdates());
  }
}

void GetNeighbourNodesByDistanceLocalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceLocalRequest::CopyFrom(const GetNeighbourNodesByDistanceLocalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceLocalRequest::IsInitialized() const {

  return true;
}

void GetNeighbourNodesByDistanceLocalRequest::Swap(GetNeighbourNodesByDistanceLocalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceLocalRequest::InternalSwap(GetNeighbourNodesByDistanceLocalRequest* other) {
  std::swap(keepaliveandsendupdates_, other->keepaliveandsendupdates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceLocalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNeighbourNodesByDistanceLocalRequest_descriptor_;
  metadata.reflection = GetNeighbourNodesByDistanceLocalRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNeighbourNodesByDistanceLocalRequest

// optional bool keepAliveAndSendUpdates = 1;
void GetNeighbourNodesByDistanceLocalRequest::clear_keepaliveandsendupdates() {
  keepaliveandsendupdates_ = false;
}
 bool GetNeighbourNodesByDistanceLocalRequest::keepaliveandsendupdates() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetNeighbourNodesByDistanceLocalRequest.keepAliveAndSendUpdates)
  return keepaliveandsendupdates_;
}
 void GetNeighbourNodesByDistanceLocalRequest::set_keepaliveandsendupdates(bool value) {
  
  keepaliveandsendupdates_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetNeighbourNodesByDistanceLocalRequest.keepAliveAndSendUpdates)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighbourNodesByDistanceResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceResponse::GetNeighbourNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
}

void GetNeighbourNodesByDistanceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNeighbourNodesByDistanceResponse::GetNeighbourNodesByDistanceResponse(const GetNeighbourNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
}

void GetNeighbourNodesByDistanceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetNeighbourNodesByDistanceResponse::~GetNeighbourNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
  SharedDtor();
}

void GetNeighbourNodesByDistanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNeighbourNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNeighbourNodesByDistanceResponse_descriptor_;
}

const GetNeighbourNodesByDistanceResponse& GetNeighbourNodesByDistanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNeighbourNodesByDistanceResponse* GetNeighbourNodesByDistanceResponse::default_instance_ = NULL;

GetNeighbourNodesByDistanceResponse* GetNeighbourNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceResponse* n = new GetNeighbourNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  nodes_.Clear();
}

bool GetNeighbourNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceResponse)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return target;
}

int GetNeighbourNodesByDistanceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  int total_size = 0;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNeighbourNodesByDistanceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceResponse::MergeFrom(const GetNeighbourNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void GetNeighbourNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceResponse::CopyFrom(const GetNeighbourNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceResponse::IsInitialized() const {

  return true;
}

void GetNeighbourNodesByDistanceResponse::Swap(GetNeighbourNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceResponse::InternalSwap(GetNeighbourNodesByDistanceResponse* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNeighbourNodesByDistanceResponse_descriptor_;
  metadata.reflection = GetNeighbourNodesByDistanceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNeighbourNodesByDistanceResponse

// repeated .iop.locnet.NodeInfo nodes = 1;
int GetNeighbourNodesByDistanceResponse::nodes_size() const {
  return nodes_.size();
}
void GetNeighbourNodesByDistanceResponse::clear_nodes() {
  nodes_.Clear();
}
const ::iop::locnet::NodeInfo& GetNeighbourNodesByDistanceResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetNeighbourNodesByDistanceResponse.nodes)
  return nodes_.Get(index);
}
::iop::locnet::NodeInfo* GetNeighbourNodesByDistanceResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.GetNeighbourNodesByDistanceResponse.nodes)
  return nodes_.Mutable(index);
}
::iop::locnet::NodeInfo* GetNeighbourNodesByDistanceResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:iop.locnet.GetNeighbourNodesByDistanceResponse.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >*
GetNeighbourNodesByDistanceResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.GetNeighbourNodesByDistanceResponse.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >&
GetNeighbourNodesByDistanceResponse::nodes() const {
  // @@protoc_insertion_point(field_list:iop.locnet.GetNeighbourNodesByDistanceResponse.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighbourhoodChange::kAddedNodeInfoFieldNumber;
const int NeighbourhoodChange::kUpdatedNodeInfoFieldNumber;
const int NeighbourhoodChange::kRemovedNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChange::NeighbourhoodChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChange)
}

void NeighbourhoodChange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  NeighbourhoodChange_default_oneof_instance_->addednodeinfo_ = const_cast< ::iop::locnet::NodeInfo*>(&::iop::locnet::NodeInfo::default_instance());
  NeighbourhoodChange_default_oneof_instance_->updatednodeinfo_ = const_cast< ::iop::locnet::NodeInfo*>(&::iop::locnet::NodeInfo::default_instance());
  NeighbourhoodChange_default_oneof_instance_->removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NeighbourhoodChange::NeighbourhoodChange(const NeighbourhoodChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChange)
}

void NeighbourhoodChange::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_ChangeType();
}

NeighbourhoodChange::~NeighbourhoodChange() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChange)
  SharedDtor();
}

void NeighbourhoodChange::SharedDtor() {
  if (has_ChangeType()) {
    clear_ChangeType();
  }
  if (this != default_instance_) {
  }
}

void NeighbourhoodChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeighbourhoodChange_descriptor_;
}

const NeighbourhoodChange& NeighbourhoodChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

NeighbourhoodChange* NeighbourhoodChange::default_instance_ = NULL;

NeighbourhoodChange* NeighbourhoodChange::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChange* n = new NeighbourhoodChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChange::clear_ChangeType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.NeighbourhoodChange)
  switch(ChangeType_case()) {
    case kAddedNodeInfo: {
      delete ChangeType_.addednodeinfo_;
      break;
    }
    case kUpdatedNodeInfo: {
      delete ChangeType_.updatednodeinfo_;
      break;
    }
    case kRemovedNodeId: {
      ChangeType_.removednodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGETYPE_NOT_SET;
}


void NeighbourhoodChange::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChange)
  clear_ChangeType();
}

bool NeighbourhoodChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.NodeInfo addedNodeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addednodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updatedNodeInfo;
        break;
      }

      // optional .iop.locnet.NodeInfo updatedNodeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_updatedNodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatednodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_removedNodeId;
        break;
      }

      // optional bytes removedNodeId = 3;
      case 3: {
        if (tag == 26) {
         parse_removedNodeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_removednodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChange)
  return false;
#undef DO_
}

void NeighbourhoodChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChange)
  // optional .iop.locnet.NodeInfo addedNodeInfo = 1;
  if (has_addednodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ChangeType_.addednodeinfo_, output);
  }

  // optional .iop.locnet.NodeInfo updatedNodeInfo = 2;
  if (has_updatednodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ChangeType_.updatednodeinfo_, output);
  }

  // optional bytes removedNodeId = 3;
  if (has_removednodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->removednodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChange)
}

::google::protobuf::uint8* NeighbourhoodChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChange)
  // optional .iop.locnet.NodeInfo addedNodeInfo = 1;
  if (has_addednodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *ChangeType_.addednodeinfo_, false, target);
  }

  // optional .iop.locnet.NodeInfo updatedNodeInfo = 2;
  if (has_updatednodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *ChangeType_.updatednodeinfo_, false, target);
  }

  // optional bytes removedNodeId = 3;
  if (has_removednodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->removednodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChange)
  return target;
}

int NeighbourhoodChange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChange)
  int total_size = 0;

  switch (ChangeType_case()) {
    // optional .iop.locnet.NodeInfo addedNodeInfo = 1;
    case kAddedNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ChangeType_.addednodeinfo_);
      break;
    }
    // optional .iop.locnet.NodeInfo updatedNodeInfo = 2;
    case kUpdatedNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ChangeType_.updatednodeinfo_);
      break;
    }
    // optional bytes removedNodeId = 3;
    case kRemovedNodeId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->removednodeid());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NeighbourhoodChange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChange)
    MergeFrom(*source);
  }
}

void NeighbourhoodChange::MergeFrom(const NeighbourhoodChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ChangeType_case()) {
    case kAddedNodeInfo: {
      mutable_addednodeinfo()->::iop::locnet::NodeInfo::MergeFrom(from.addednodeinfo());
      break;
    }
    case kUpdatedNodeInfo: {
      mutable_updatednodeinfo()->::iop::locnet::NodeInfo::MergeFrom(from.updatednodeinfo());
      break;
    }
    case kRemovedNodeId: {
      set_removednodeid(from.removednodeid());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
}

void NeighbourhoodChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChange::CopyFrom(const NeighbourhoodChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChange::IsInitialized() const {

  return true;
}

void NeighbourhoodChange::Swap(NeighbourhoodChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChange::InternalSwap(NeighbourhoodChange* other) {
  std::swap(ChangeType_, other->ChangeType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeighbourhoodChange_descriptor_;
  metadata.reflection = NeighbourhoodChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NeighbourhoodChange

// optional .iop.locnet.NodeInfo addedNodeInfo = 1;
bool NeighbourhoodChange::has_addednodeinfo() const {
  return ChangeType_case() == kAddedNodeInfo;
}
void NeighbourhoodChange::set_has_addednodeinfo() {
  _oneof_case_[0] = kAddedNodeInfo;
}
void NeighbourhoodChange::clear_addednodeinfo() {
  if (has_addednodeinfo()) {
    delete ChangeType_.addednodeinfo_;
    clear_has_ChangeType();
  }
}
 const ::iop::locnet::NodeInfo& NeighbourhoodChange::addednodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NeighbourhoodChange.addedNodeInfo)
  return has_addednodeinfo()
      ? *ChangeType_.addednodeinfo_
      : ::iop::locnet::NodeInfo::default_instance();
}
::iop::locnet::NodeInfo* NeighbourhoodChange::mutable_addednodeinfo() {
  if (!has_addednodeinfo()) {
    clear_ChangeType();
    set_has_addednodeinfo();
    ChangeType_.addednodeinfo_ = new ::iop::locnet::NodeInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.NeighbourhoodChange.addedNodeInfo)
  return ChangeType_.addednodeinfo_;
}
::iop::locnet::NodeInfo* NeighbourhoodChange::release_addednodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.NeighbourhoodChange.addedNodeInfo)
  if (has_addednodeinfo()) {
    clear_has_ChangeType();
    ::iop::locnet::NodeInfo* temp = ChangeType_.addednodeinfo_;
    ChangeType_.addednodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NeighbourhoodChange::set_allocated_addednodeinfo(::iop::locnet::NodeInfo* addednodeinfo) {
  clear_ChangeType();
  if (addednodeinfo) {
    set_has_addednodeinfo();
    ChangeType_.addednodeinfo_ = addednodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NeighbourhoodChange.addedNodeInfo)
}

// optional .iop.locnet.NodeInfo updatedNodeInfo = 2;
bool NeighbourhoodChange::has_updatednodeinfo() const {
  return ChangeType_case() == kUpdatedNodeInfo;
}
void NeighbourhoodChange::set_has_updatednodeinfo() {
  _oneof_case_[0] = kUpdatedNodeInfo;
}
void NeighbourhoodChange::clear_updatednodeinfo() {
  if (has_updatednodeinfo()) {
    delete ChangeType_.updatednodeinfo_;
    clear_has_ChangeType();
  }
}
 const ::iop::locnet::NodeInfo& NeighbourhoodChange::updatednodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NeighbourhoodChange.updatedNodeInfo)
  return has_updatednodeinfo()
      ? *ChangeType_.updatednodeinfo_
      : ::iop::locnet::NodeInfo::default_instance();
}
::iop::locnet::NodeInfo* NeighbourhoodChange::mutable_updatednodeinfo() {
  if (!has_updatednodeinfo()) {
    clear_ChangeType();
    set_has_updatednodeinfo();
    ChangeType_.updatednodeinfo_ = new ::iop::locnet::NodeInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.NeighbourhoodChange.updatedNodeInfo)
  return ChangeType_.updatednodeinfo_;
}
::iop::locnet::NodeInfo* NeighbourhoodChange::release_updatednodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.NeighbourhoodChange.updatedNodeInfo)
  if (has_updatednodeinfo()) {
    clear_has_ChangeType();
    ::iop::locnet::NodeInfo* temp = ChangeType_.updatednodeinfo_;
    ChangeType_.updatednodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NeighbourhoodChange::set_allocated_updatednodeinfo(::iop::locnet::NodeInfo* updatednodeinfo) {
  clear_ChangeType();
  if (updatednodeinfo) {
    set_has_updatednodeinfo();
    ChangeType_.updatednodeinfo_ = updatednodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NeighbourhoodChange.updatedNodeInfo)
}

// optional bytes removedNodeId = 3;
bool NeighbourhoodChange::has_removednodeid() const {
  return ChangeType_case() == kRemovedNodeId;
}
void NeighbourhoodChange::set_has_removednodeid() {
  _oneof_case_[0] = kRemovedNodeId;
}
void NeighbourhoodChange::clear_removednodeid() {
  if (has_removednodeid()) {
    ChangeType_.removednodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ChangeType();
  }
}
 const ::std::string& NeighbourhoodChange::removednodeid() const {
  // @@protoc_insertion_point(field_get:iop.locnet.NeighbourhoodChange.removedNodeId)
  if (has_removednodeid()) {
    return ChangeType_.removednodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void NeighbourhoodChange::set_removednodeid(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:iop.locnet.NeighbourhoodChange.removedNodeId)
  if (!has_removednodeid()) {
    clear_ChangeType();
    set_has_removednodeid();
    ChangeType_.removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ChangeType_.removednodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.NeighbourhoodChange.removedNodeId)
}
 void NeighbourhoodChange::set_removednodeid(const char* value) {
  if (!has_removednodeid()) {
    clear_ChangeType();
    set_has_removednodeid();
    ChangeType_.removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ChangeType_.removednodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.NeighbourhoodChange.removedNodeId)
}
 void NeighbourhoodChange::set_removednodeid(const void* value, size_t size) {
  if (!has_removednodeid()) {
    clear_ChangeType();
    set_has_removednodeid();
    ChangeType_.removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ChangeType_.removednodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.NeighbourhoodChange.removedNodeId)
}
 ::std::string* NeighbourhoodChange::mutable_removednodeid() {
  if (!has_removednodeid()) {
    clear_ChangeType();
    set_has_removednodeid();
    ChangeType_.removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.NeighbourhoodChange.removedNodeId)
  return ChangeType_.removednodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NeighbourhoodChange::release_removednodeid() {
  // @@protoc_insertion_point(field_release:iop.locnet.NeighbourhoodChange.removedNodeId)
  if (has_removednodeid()) {
    clear_has_ChangeType();
    return ChangeType_.removednodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void NeighbourhoodChange::set_allocated_removednodeid(::std::string* removednodeid) {
  if (!has_removednodeid()) {
    ChangeType_.removednodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ChangeType();
  if (removednodeid != NULL) {
    set_has_removednodeid();
    ChangeType_.removednodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        removednodeid);
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NeighbourhoodChange.removedNodeId)
}

bool NeighbourhoodChange::has_ChangeType() const {
  return ChangeType_case() != CHANGETYPE_NOT_SET;
}
void NeighbourhoodChange::clear_has_ChangeType() {
  _oneof_case_[0] = CHANGETYPE_NOT_SET;
}
NeighbourhoodChange::ChangeTypeCase NeighbourhoodChange::ChangeType_case() const {
  return NeighbourhoodChange::ChangeTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighbourhoodChangedNotificationRequest::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChangedNotificationRequest::NeighbourhoodChangedNotificationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
}

void NeighbourhoodChangedNotificationRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NeighbourhoodChangedNotificationRequest::NeighbourhoodChangedNotificationRequest(const NeighbourhoodChangedNotificationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
}

void NeighbourhoodChangedNotificationRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NeighbourhoodChangedNotificationRequest::~NeighbourhoodChangedNotificationRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
  SharedDtor();
}

void NeighbourhoodChangedNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeighbourhoodChangedNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeighbourhoodChangedNotificationRequest_descriptor_;
}

const NeighbourhoodChangedNotificationRequest& NeighbourhoodChangedNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

NeighbourhoodChangedNotificationRequest* NeighbourhoodChangedNotificationRequest::default_instance_ = NULL;

NeighbourhoodChangedNotificationRequest* NeighbourhoodChangedNotificationRequest::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChangedNotificationRequest* n = new NeighbourhoodChangedNotificationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChangedNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  changes_.Clear();
}

bool NeighbourhoodChangedNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NeighbourhoodChange changes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_changes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_changes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return false;
#undef DO_
}

void NeighbourhoodChangedNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  for (unsigned int i = 0, n = this->changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChangedNotificationRequest)
}

::google::protobuf::uint8* NeighbourhoodChangedNotificationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  for (unsigned int i = 0, n = this->changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->changes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return target;
}

int NeighbourhoodChangedNotificationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  int total_size = 0;

  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  total_size += 1 * this->changes_size();
  for (int i = 0; i < this->changes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChangedNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NeighbourhoodChangedNotificationRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChangedNotificationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChangedNotificationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChangedNotificationRequest)
    MergeFrom(*source);
  }
}

void NeighbourhoodChangedNotificationRequest::MergeFrom(const NeighbourhoodChangedNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  changes_.MergeFrom(from.changes_);
}

void NeighbourhoodChangedNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChangedNotificationRequest::CopyFrom(const NeighbourhoodChangedNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChangedNotificationRequest::IsInitialized() const {

  return true;
}

void NeighbourhoodChangedNotificationRequest::Swap(NeighbourhoodChangedNotificationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChangedNotificationRequest::InternalSwap(NeighbourhoodChangedNotificationRequest* other) {
  changes_.UnsafeArenaSwap(&other->changes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChangedNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeighbourhoodChangedNotificationRequest_descriptor_;
  metadata.reflection = NeighbourhoodChangedNotificationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NeighbourhoodChangedNotificationRequest

// repeated .iop.locnet.NeighbourhoodChange changes = 1;
int NeighbourhoodChangedNotificationRequest::changes_size() const {
  return changes_.size();
}
void NeighbourhoodChangedNotificationRequest::clear_changes() {
  changes_.Clear();
}
const ::iop::locnet::NeighbourhoodChange& NeighbourhoodChangedNotificationRequest::changes(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.NeighbourhoodChangedNotificationRequest.changes)
  return changes_.Get(index);
}
::iop::locnet::NeighbourhoodChange* NeighbourhoodChangedNotificationRequest::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.NeighbourhoodChangedNotificationRequest.changes)
  return changes_.Mutable(index);
}
::iop::locnet::NeighbourhoodChange* NeighbourhoodChangedNotificationRequest::add_changes() {
  // @@protoc_insertion_point(field_add:iop.locnet.NeighbourhoodChangedNotificationRequest.changes)
  return changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::NeighbourhoodChange >*
NeighbourhoodChangedNotificationRequest::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.NeighbourhoodChangedNotificationRequest.changes)
  return &changes_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::NeighbourhoodChange >&
NeighbourhoodChangedNotificationRequest::changes() const {
  // @@protoc_insertion_point(field_list:iop.locnet.NeighbourhoodChangedNotificationRequest.changes)
  return changes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChangedNotificationResponse::NeighbourhoodChangedNotificationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

void NeighbourhoodChangedNotificationResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NeighbourhoodChangedNotificationResponse::NeighbourhoodChangedNotificationResponse(const NeighbourhoodChangedNotificationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

void NeighbourhoodChangedNotificationResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NeighbourhoodChangedNotificationResponse::~NeighbourhoodChangedNotificationResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
  SharedDtor();
}

void NeighbourhoodChangedNotificationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeighbourhoodChangedNotificationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeighbourhoodChangedNotificationResponse_descriptor_;
}

const NeighbourhoodChangedNotificationResponse& NeighbourhoodChangedNotificationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

NeighbourhoodChangedNotificationResponse* NeighbourhoodChangedNotificationResponse::default_instance_ = NULL;

NeighbourhoodChangedNotificationResponse* NeighbourhoodChangedNotificationResponse::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChangedNotificationResponse* n = new NeighbourhoodChangedNotificationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChangedNotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

bool NeighbourhoodChangedNotificationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return false;
#undef DO_
}

void NeighbourhoodChangedNotificationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

::google::protobuf::uint8* NeighbourhoodChangedNotificationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return target;
}

int NeighbourhoodChangedNotificationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChangedNotificationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NeighbourhoodChangedNotificationResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChangedNotificationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChangedNotificationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChangedNotificationResponse)
    MergeFrom(*source);
  }
}

void NeighbourhoodChangedNotificationResponse::MergeFrom(const NeighbourhoodChangedNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void NeighbourhoodChangedNotificationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChangedNotificationResponse::CopyFrom(const NeighbourhoodChangedNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChangedNotificationResponse::IsInitialized() const {

  return true;
}

void NeighbourhoodChangedNotificationResponse::Swap(NeighbourhoodChangedNotificationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChangedNotificationResponse::InternalSwap(NeighbourhoodChangedNotificationResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChangedNotificationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeighbourhoodChangedNotificationResponse_descriptor_;
  metadata.reflection = NeighbourhoodChangedNotificationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NeighbourhoodChangedNotificationResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteNodeRequest::kAcceptColleagueFieldNumber;
const int RemoteNodeRequest::kRenewColleagueFieldNumber;
const int RemoteNodeRequest::kAcceptNeighbourFieldNumber;
const int RemoteNodeRequest::kRenewNeighbourFieldNumber;
const int RemoteNodeRequest::kGetNodeCountFieldNumber;
const int RemoteNodeRequest::kGetRandomNodesFieldNumber;
const int RemoteNodeRequest::kGetClosestNodesFieldNumber;
const int RemoteNodeRequest::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteNodeRequest::RemoteNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RemoteNodeRequest)
}

void RemoteNodeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RemoteNodeRequest_default_oneof_instance_->acceptcolleague_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(&::iop::locnet::BuildNetworkRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->renewcolleague_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(&::iop::locnet::BuildNetworkRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->acceptneighbour_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(&::iop::locnet::BuildNetworkRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->renewneighbour_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(&::iop::locnet::BuildNetworkRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->getnodecount_ = const_cast< ::iop::locnet::GetNodeCountRequest*>(&::iop::locnet::GetNodeCountRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->getrandomnodes_ = const_cast< ::iop::locnet::GetRandomNodesRequest*>(&::iop::locnet::GetRandomNodesRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->getclosestnodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceRequest*>(&::iop::locnet::GetClosestNodesByDistanceRequest::default_instance());
  RemoteNodeRequest_default_oneof_instance_->getnodeinfo_ = const_cast< ::iop::locnet::GetNodeInfoRequest*>(&::iop::locnet::GetNodeInfoRequest::default_instance());
}

RemoteNodeRequest::RemoteNodeRequest(const RemoteNodeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RemoteNodeRequest)
}

void RemoteNodeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_RemoteNodeRequestType();
}

RemoteNodeRequest::~RemoteNodeRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.RemoteNodeRequest)
  SharedDtor();
}

void RemoteNodeRequest::SharedDtor() {
  if (has_RemoteNodeRequestType()) {
    clear_RemoteNodeRequestType();
  }
  if (this != default_instance_) {
  }
}

void RemoteNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteNodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteNodeRequest_descriptor_;
}

const RemoteNodeRequest& RemoteNodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

RemoteNodeRequest* RemoteNodeRequest::default_instance_ = NULL;

RemoteNodeRequest* RemoteNodeRequest::New(::google::protobuf::Arena* arena) const {
  RemoteNodeRequest* n = new RemoteNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteNodeRequest::clear_RemoteNodeRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.RemoteNodeRequest)
  switch(RemoteNodeRequestType_case()) {
    case kAcceptColleague: {
      delete RemoteNodeRequestType_.acceptcolleague_;
      break;
    }
    case kRenewColleague: {
      delete RemoteNodeRequestType_.renewcolleague_;
      break;
    }
    case kAcceptNeighbour: {
      delete RemoteNodeRequestType_.acceptneighbour_;
      break;
    }
    case kRenewNeighbour: {
      delete RemoteNodeRequestType_.renewneighbour_;
      break;
    }
    case kGetNodeCount: {
      delete RemoteNodeRequestType_.getnodecount_;
      break;
    }
    case kGetRandomNodes: {
      delete RemoteNodeRequestType_.getrandomnodes_;
      break;
    }
    case kGetClosestNodes: {
      delete RemoteNodeRequestType_.getclosestnodes_;
      break;
    }
    case kGetNodeInfo: {
      delete RemoteNodeRequestType_.getnodeinfo_;
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOTENODEREQUESTTYPE_NOT_SET;
}


void RemoteNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RemoteNodeRequest)
  clear_RemoteNodeRequestType();
}

bool RemoteNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RemoteNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.BuildNetworkRequest acceptColleague = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptcolleague()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_renewColleague;
        break;
      }

      // optional .iop.locnet.BuildNetworkRequest renewColleague = 2;
      case 2: {
        if (tag == 18) {
         parse_renewColleague:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renewcolleague()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acceptNeighbour;
        break;
      }

      // optional .iop.locnet.BuildNetworkRequest acceptNeighbour = 3;
      case 3: {
        if (tag == 26) {
         parse_acceptNeighbour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptneighbour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_renewNeighbour;
        break;
      }

      // optional .iop.locnet.BuildNetworkRequest renewNeighbour = 4;
      case 4: {
        if (tag == 34) {
         parse_renewNeighbour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renewneighbour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_getNodeCount;
        break;
      }

      // optional .iop.locnet.GetNodeCountRequest getNodeCount = 5;
      case 5: {
        if (tag == 42) {
         parse_getNodeCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodecount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_getRandomNodes;
        break;
      }

      // optional .iop.locnet.GetRandomNodesRequest getRandomNodes = 6;
      case 6: {
        if (tag == 50) {
         parse_getRandomNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getrandomnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_getClosestNodes;
        break;
      }

      // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 7;
      case 7: {
        if (tag == 58) {
         parse_getClosestNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getclosestnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_getNodeInfo;
        break;
      }

      // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_getNodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RemoteNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RemoteNodeRequest)
  return false;
#undef DO_
}

void RemoteNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RemoteNodeRequest)
  // optional .iop.locnet.BuildNetworkRequest acceptColleague = 1;
  if (has_acceptcolleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *RemoteNodeRequestType_.acceptcolleague_, output);
  }

  // optional .iop.locnet.BuildNetworkRequest renewColleague = 2;
  if (has_renewcolleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RemoteNodeRequestType_.renewcolleague_, output);
  }

  // optional .iop.locnet.BuildNetworkRequest acceptNeighbour = 3;
  if (has_acceptneighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RemoteNodeRequestType_.acceptneighbour_, output);
  }

  // optional .iop.locnet.BuildNetworkRequest renewNeighbour = 4;
  if (has_renewneighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RemoteNodeRequestType_.renewneighbour_, output);
  }

  // optional .iop.locnet.GetNodeCountRequest getNodeCount = 5;
  if (has_getnodecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *RemoteNodeRequestType_.getnodecount_, output);
  }

  // optional .iop.locnet.GetRandomNodesRequest getRandomNodes = 6;
  if (has_getrandomnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *RemoteNodeRequestType_.getrandomnodes_, output);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 7;
  if (has_getclosestnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *RemoteNodeRequestType_.getclosestnodes_, output);
  }

  // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 8;
  if (has_getnodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *RemoteNodeRequestType_.getnodeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.RemoteNodeRequest)
}

::google::protobuf::uint8* RemoteNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RemoteNodeRequest)
  // optional .iop.locnet.BuildNetworkRequest acceptColleague = 1;
  if (has_acceptcolleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *RemoteNodeRequestType_.acceptcolleague_, false, target);
  }

  // optional .iop.locnet.BuildNetworkRequest renewColleague = 2;
  if (has_renewcolleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *RemoteNodeRequestType_.renewcolleague_, false, target);
  }

  // optional .iop.locnet.BuildNetworkRequest acceptNeighbour = 3;
  if (has_acceptneighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *RemoteNodeRequestType_.acceptneighbour_, false, target);
  }

  // optional .iop.locnet.BuildNetworkRequest renewNeighbour = 4;
  if (has_renewneighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *RemoteNodeRequestType_.renewneighbour_, false, target);
  }

  // optional .iop.locnet.GetNodeCountRequest getNodeCount = 5;
  if (has_getnodecount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *RemoteNodeRequestType_.getnodecount_, false, target);
  }

  // optional .iop.locnet.GetRandomNodesRequest getRandomNodes = 6;
  if (has_getrandomnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *RemoteNodeRequestType_.getrandomnodes_, false, target);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 7;
  if (has_getclosestnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *RemoteNodeRequestType_.getclosestnodes_, false, target);
  }

  // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 8;
  if (has_getnodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *RemoteNodeRequestType_.getnodeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RemoteNodeRequest)
  return target;
}

int RemoteNodeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RemoteNodeRequest)
  int total_size = 0;

  switch (RemoteNodeRequestType_case()) {
    // optional .iop.locnet.BuildNetworkRequest acceptColleague = 1;
    case kAcceptColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.acceptcolleague_);
      break;
    }
    // optional .iop.locnet.BuildNetworkRequest renewColleague = 2;
    case kRenewColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.renewcolleague_);
      break;
    }
    // optional .iop.locnet.BuildNetworkRequest acceptNeighbour = 3;
    case kAcceptNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.acceptneighbour_);
      break;
    }
    // optional .iop.locnet.BuildNetworkRequest renewNeighbour = 4;
    case kRenewNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.renewneighbour_);
      break;
    }
    // optional .iop.locnet.GetNodeCountRequest getNodeCount = 5;
    case kGetNodeCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.getnodecount_);
      break;
    }
    // optional .iop.locnet.GetRandomNodesRequest getRandomNodes = 6;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.getrandomnodes_);
      break;
    }
    // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 7;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.getclosestnodes_);
      break;
    }
    // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 8;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeRequestType_.getnodeinfo_);
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RemoteNodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoteNodeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RemoteNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RemoteNodeRequest)
    MergeFrom(*source);
  }
}

void RemoteNodeRequest::MergeFrom(const RemoteNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RemoteNodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.RemoteNodeRequestType_case()) {
    case kAcceptColleague: {
      mutable_acceptcolleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.acceptcolleague());
      break;
    }
    case kRenewColleague: {
      mutable_renewcolleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renewcolleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_acceptneighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.acceptneighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renewneighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renewneighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_getnodecount()->::iop::locnet::GetNodeCountRequest::MergeFrom(from.getnodecount());
      break;
    }
    case kGetRandomNodes: {
      mutable_getrandomnodes()->::iop::locnet::GetRandomNodesRequest::MergeFrom(from.getrandomnodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_getclosestnodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.getclosestnodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_getnodeinfo()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.getnodeinfo());
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RemoteNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteNodeRequest::CopyFrom(const RemoteNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RemoteNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteNodeRequest::IsInitialized() const {

  return true;
}

void RemoteNodeRequest::Swap(RemoteNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteNodeRequest::InternalSwap(RemoteNodeRequest* other) {
  std::swap(RemoteNodeRequestType_, other->RemoteNodeRequestType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteNodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteNodeRequest_descriptor_;
  metadata.reflection = RemoteNodeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteNodeRequest

// optional .iop.locnet.BuildNetworkRequest acceptColleague = 1;
bool RemoteNodeRequest::has_acceptcolleague() const {
  return RemoteNodeRequestType_case() == kAcceptColleague;
}
void RemoteNodeRequest::set_has_acceptcolleague() {
  _oneof_case_[0] = kAcceptColleague;
}
void RemoteNodeRequest::clear_acceptcolleague() {
  if (has_acceptcolleague()) {
    delete RemoteNodeRequestType_.acceptcolleague_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::BuildNetworkRequest& RemoteNodeRequest::acceptcolleague() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.acceptColleague)
  return has_acceptcolleague()
      ? *RemoteNodeRequestType_.acceptcolleague_
      : ::iop::locnet::BuildNetworkRequest::default_instance();
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::mutable_acceptcolleague() {
  if (!has_acceptcolleague()) {
    clear_RemoteNodeRequestType();
    set_has_acceptcolleague();
    RemoteNodeRequestType_.acceptcolleague_ = new ::iop::locnet::BuildNetworkRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.acceptColleague)
  return RemoteNodeRequestType_.acceptcolleague_;
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::release_acceptcolleague() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.acceptColleague)
  if (has_acceptcolleague()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::BuildNetworkRequest* temp = RemoteNodeRequestType_.acceptcolleague_;
    RemoteNodeRequestType_.acceptcolleague_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_acceptcolleague(::iop::locnet::BuildNetworkRequest* acceptcolleague) {
  clear_RemoteNodeRequestType();
  if (acceptcolleague) {
    set_has_acceptcolleague();
    RemoteNodeRequestType_.acceptcolleague_ = acceptcolleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.acceptColleague)
}

// optional .iop.locnet.BuildNetworkRequest renewColleague = 2;
bool RemoteNodeRequest::has_renewcolleague() const {
  return RemoteNodeRequestType_case() == kRenewColleague;
}
void RemoteNodeRequest::set_has_renewcolleague() {
  _oneof_case_[0] = kRenewColleague;
}
void RemoteNodeRequest::clear_renewcolleague() {
  if (has_renewcolleague()) {
    delete RemoteNodeRequestType_.renewcolleague_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::BuildNetworkRequest& RemoteNodeRequest::renewcolleague() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.renewColleague)
  return has_renewcolleague()
      ? *RemoteNodeRequestType_.renewcolleague_
      : ::iop::locnet::BuildNetworkRequest::default_instance();
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::mutable_renewcolleague() {
  if (!has_renewcolleague()) {
    clear_RemoteNodeRequestType();
    set_has_renewcolleague();
    RemoteNodeRequestType_.renewcolleague_ = new ::iop::locnet::BuildNetworkRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.renewColleague)
  return RemoteNodeRequestType_.renewcolleague_;
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::release_renewcolleague() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.renewColleague)
  if (has_renewcolleague()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::BuildNetworkRequest* temp = RemoteNodeRequestType_.renewcolleague_;
    RemoteNodeRequestType_.renewcolleague_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_renewcolleague(::iop::locnet::BuildNetworkRequest* renewcolleague) {
  clear_RemoteNodeRequestType();
  if (renewcolleague) {
    set_has_renewcolleague();
    RemoteNodeRequestType_.renewcolleague_ = renewcolleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.renewColleague)
}

// optional .iop.locnet.BuildNetworkRequest acceptNeighbour = 3;
bool RemoteNodeRequest::has_acceptneighbour() const {
  return RemoteNodeRequestType_case() == kAcceptNeighbour;
}
void RemoteNodeRequest::set_has_acceptneighbour() {
  _oneof_case_[0] = kAcceptNeighbour;
}
void RemoteNodeRequest::clear_acceptneighbour() {
  if (has_acceptneighbour()) {
    delete RemoteNodeRequestType_.acceptneighbour_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::BuildNetworkRequest& RemoteNodeRequest::acceptneighbour() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.acceptNeighbour)
  return has_acceptneighbour()
      ? *RemoteNodeRequestType_.acceptneighbour_
      : ::iop::locnet::BuildNetworkRequest::default_instance();
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::mutable_acceptneighbour() {
  if (!has_acceptneighbour()) {
    clear_RemoteNodeRequestType();
    set_has_acceptneighbour();
    RemoteNodeRequestType_.acceptneighbour_ = new ::iop::locnet::BuildNetworkRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.acceptNeighbour)
  return RemoteNodeRequestType_.acceptneighbour_;
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::release_acceptneighbour() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.acceptNeighbour)
  if (has_acceptneighbour()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::BuildNetworkRequest* temp = RemoteNodeRequestType_.acceptneighbour_;
    RemoteNodeRequestType_.acceptneighbour_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_acceptneighbour(::iop::locnet::BuildNetworkRequest* acceptneighbour) {
  clear_RemoteNodeRequestType();
  if (acceptneighbour) {
    set_has_acceptneighbour();
    RemoteNodeRequestType_.acceptneighbour_ = acceptneighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.acceptNeighbour)
}

// optional .iop.locnet.BuildNetworkRequest renewNeighbour = 4;
bool RemoteNodeRequest::has_renewneighbour() const {
  return RemoteNodeRequestType_case() == kRenewNeighbour;
}
void RemoteNodeRequest::set_has_renewneighbour() {
  _oneof_case_[0] = kRenewNeighbour;
}
void RemoteNodeRequest::clear_renewneighbour() {
  if (has_renewneighbour()) {
    delete RemoteNodeRequestType_.renewneighbour_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::BuildNetworkRequest& RemoteNodeRequest::renewneighbour() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.renewNeighbour)
  return has_renewneighbour()
      ? *RemoteNodeRequestType_.renewneighbour_
      : ::iop::locnet::BuildNetworkRequest::default_instance();
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::mutable_renewneighbour() {
  if (!has_renewneighbour()) {
    clear_RemoteNodeRequestType();
    set_has_renewneighbour();
    RemoteNodeRequestType_.renewneighbour_ = new ::iop::locnet::BuildNetworkRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.renewNeighbour)
  return RemoteNodeRequestType_.renewneighbour_;
}
::iop::locnet::BuildNetworkRequest* RemoteNodeRequest::release_renewneighbour() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.renewNeighbour)
  if (has_renewneighbour()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::BuildNetworkRequest* temp = RemoteNodeRequestType_.renewneighbour_;
    RemoteNodeRequestType_.renewneighbour_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_renewneighbour(::iop::locnet::BuildNetworkRequest* renewneighbour) {
  clear_RemoteNodeRequestType();
  if (renewneighbour) {
    set_has_renewneighbour();
    RemoteNodeRequestType_.renewneighbour_ = renewneighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.renewNeighbour)
}

// optional .iop.locnet.GetNodeCountRequest getNodeCount = 5;
bool RemoteNodeRequest::has_getnodecount() const {
  return RemoteNodeRequestType_case() == kGetNodeCount;
}
void RemoteNodeRequest::set_has_getnodecount() {
  _oneof_case_[0] = kGetNodeCount;
}
void RemoteNodeRequest::clear_getnodecount() {
  if (has_getnodecount()) {
    delete RemoteNodeRequestType_.getnodecount_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::GetNodeCountRequest& RemoteNodeRequest::getnodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.getNodeCount)
  return has_getnodecount()
      ? *RemoteNodeRequestType_.getnodecount_
      : ::iop::locnet::GetNodeCountRequest::default_instance();
}
::iop::locnet::GetNodeCountRequest* RemoteNodeRequest::mutable_getnodecount() {
  if (!has_getnodecount()) {
    clear_RemoteNodeRequestType();
    set_has_getnodecount();
    RemoteNodeRequestType_.getnodecount_ = new ::iop::locnet::GetNodeCountRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.getNodeCount)
  return RemoteNodeRequestType_.getnodecount_;
}
::iop::locnet::GetNodeCountRequest* RemoteNodeRequest::release_getnodecount() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.getNodeCount)
  if (has_getnodecount()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::GetNodeCountRequest* temp = RemoteNodeRequestType_.getnodecount_;
    RemoteNodeRequestType_.getnodecount_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_getnodecount(::iop::locnet::GetNodeCountRequest* getnodecount) {
  clear_RemoteNodeRequestType();
  if (getnodecount) {
    set_has_getnodecount();
    RemoteNodeRequestType_.getnodecount_ = getnodecount;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.getNodeCount)
}

// optional .iop.locnet.GetRandomNodesRequest getRandomNodes = 6;
bool RemoteNodeRequest::has_getrandomnodes() const {
  return RemoteNodeRequestType_case() == kGetRandomNodes;
}
void RemoteNodeRequest::set_has_getrandomnodes() {
  _oneof_case_[0] = kGetRandomNodes;
}
void RemoteNodeRequest::clear_getrandomnodes() {
  if (has_getrandomnodes()) {
    delete RemoteNodeRequestType_.getrandomnodes_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::GetRandomNodesRequest& RemoteNodeRequest::getrandomnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.getRandomNodes)
  return has_getrandomnodes()
      ? *RemoteNodeRequestType_.getrandomnodes_
      : ::iop::locnet::GetRandomNodesRequest::default_instance();
}
::iop::locnet::GetRandomNodesRequest* RemoteNodeRequest::mutable_getrandomnodes() {
  if (!has_getrandomnodes()) {
    clear_RemoteNodeRequestType();
    set_has_getrandomnodes();
    RemoteNodeRequestType_.getrandomnodes_ = new ::iop::locnet::GetRandomNodesRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.getRandomNodes)
  return RemoteNodeRequestType_.getrandomnodes_;
}
::iop::locnet::GetRandomNodesRequest* RemoteNodeRequest::release_getrandomnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.getRandomNodes)
  if (has_getrandomnodes()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::GetRandomNodesRequest* temp = RemoteNodeRequestType_.getrandomnodes_;
    RemoteNodeRequestType_.getrandomnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_getrandomnodes(::iop::locnet::GetRandomNodesRequest* getrandomnodes) {
  clear_RemoteNodeRequestType();
  if (getrandomnodes) {
    set_has_getrandomnodes();
    RemoteNodeRequestType_.getrandomnodes_ = getrandomnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.getRandomNodes)
}

// optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 7;
bool RemoteNodeRequest::has_getclosestnodes() const {
  return RemoteNodeRequestType_case() == kGetClosestNodes;
}
void RemoteNodeRequest::set_has_getclosestnodes() {
  _oneof_case_[0] = kGetClosestNodes;
}
void RemoteNodeRequest::clear_getclosestnodes() {
  if (has_getclosestnodes()) {
    delete RemoteNodeRequestType_.getclosestnodes_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::GetClosestNodesByDistanceRequest& RemoteNodeRequest::getclosestnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.getClosestNodes)
  return has_getclosestnodes()
      ? *RemoteNodeRequestType_.getclosestnodes_
      : ::iop::locnet::GetClosestNodesByDistanceRequest::default_instance();
}
::iop::locnet::GetClosestNodesByDistanceRequest* RemoteNodeRequest::mutable_getclosestnodes() {
  if (!has_getclosestnodes()) {
    clear_RemoteNodeRequestType();
    set_has_getclosestnodes();
    RemoteNodeRequestType_.getclosestnodes_ = new ::iop::locnet::GetClosestNodesByDistanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.getClosestNodes)
  return RemoteNodeRequestType_.getclosestnodes_;
}
::iop::locnet::GetClosestNodesByDistanceRequest* RemoteNodeRequest::release_getclosestnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.getClosestNodes)
  if (has_getclosestnodes()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::GetClosestNodesByDistanceRequest* temp = RemoteNodeRequestType_.getclosestnodes_;
    RemoteNodeRequestType_.getclosestnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_getclosestnodes(::iop::locnet::GetClosestNodesByDistanceRequest* getclosestnodes) {
  clear_RemoteNodeRequestType();
  if (getclosestnodes) {
    set_has_getclosestnodes();
    RemoteNodeRequestType_.getclosestnodes_ = getclosestnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.getClosestNodes)
}

// optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 8;
bool RemoteNodeRequest::has_getnodeinfo() const {
  return RemoteNodeRequestType_case() == kGetNodeInfo;
}
void RemoteNodeRequest::set_has_getnodeinfo() {
  _oneof_case_[0] = kGetNodeInfo;
}
void RemoteNodeRequest::clear_getnodeinfo() {
  if (has_getnodeinfo()) {
    delete RemoteNodeRequestType_.getnodeinfo_;
    clear_has_RemoteNodeRequestType();
  }
}
 const ::iop::locnet::GetNodeInfoRequest& RemoteNodeRequest::getnodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeRequest.getNodeInfo)
  return has_getnodeinfo()
      ? *RemoteNodeRequestType_.getnodeinfo_
      : ::iop::locnet::GetNodeInfoRequest::default_instance();
}
::iop::locnet::GetNodeInfoRequest* RemoteNodeRequest::mutable_getnodeinfo() {
  if (!has_getnodeinfo()) {
    clear_RemoteNodeRequestType();
    set_has_getnodeinfo();
    RemoteNodeRequestType_.getnodeinfo_ = new ::iop::locnet::GetNodeInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeRequest.getNodeInfo)
  return RemoteNodeRequestType_.getnodeinfo_;
}
::iop::locnet::GetNodeInfoRequest* RemoteNodeRequest::release_getnodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeRequest.getNodeInfo)
  if (has_getnodeinfo()) {
    clear_has_RemoteNodeRequestType();
    ::iop::locnet::GetNodeInfoRequest* temp = RemoteNodeRequestType_.getnodeinfo_;
    RemoteNodeRequestType_.getnodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeRequest::set_allocated_getnodeinfo(::iop::locnet::GetNodeInfoRequest* getnodeinfo) {
  clear_RemoteNodeRequestType();
  if (getnodeinfo) {
    set_has_getnodeinfo();
    RemoteNodeRequestType_.getnodeinfo_ = getnodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.getNodeInfo)
}

bool RemoteNodeRequest::has_RemoteNodeRequestType() const {
  return RemoteNodeRequestType_case() != REMOTENODEREQUESTTYPE_NOT_SET;
}
void RemoteNodeRequest::clear_has_RemoteNodeRequestType() {
  _oneof_case_[0] = REMOTENODEREQUESTTYPE_NOT_SET;
}
RemoteNodeRequest::RemoteNodeRequestTypeCase RemoteNodeRequest::RemoteNodeRequestType_case() const {
  return RemoteNodeRequest::RemoteNodeRequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteNodeResponse::kAcceptColleagueFieldNumber;
const int RemoteNodeResponse::kRenewColleagueFieldNumber;
const int RemoteNodeResponse::kAcceptNeighbourFieldNumber;
const int RemoteNodeResponse::kRenewNeighbourFieldNumber;
const int RemoteNodeResponse::kGetNodeCountFieldNumber;
const int RemoteNodeResponse::kGetRandomNodesFieldNumber;
const int RemoteNodeResponse::kGetClosestNodesFieldNumber;
const int RemoteNodeResponse::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteNodeResponse::RemoteNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RemoteNodeResponse)
}

void RemoteNodeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RemoteNodeResponse_default_oneof_instance_->acceptcolleague_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(&::iop::locnet::BuildNetworkResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->renewcolleague_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(&::iop::locnet::BuildNetworkResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->acceptneighbour_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(&::iop::locnet::BuildNetworkResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->renewneighbour_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(&::iop::locnet::BuildNetworkResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->getnodecount_ = const_cast< ::iop::locnet::GetNodeCountResponse*>(&::iop::locnet::GetNodeCountResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->getrandomnodes_ = const_cast< ::iop::locnet::GetRandomNodesResponse*>(&::iop::locnet::GetRandomNodesResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->getclosestnodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceResponse*>(&::iop::locnet::GetClosestNodesByDistanceResponse::default_instance());
  RemoteNodeResponse_default_oneof_instance_->getnodeinfo_ = const_cast< ::iop::locnet::GetNodeInfoResponse*>(&::iop::locnet::GetNodeInfoResponse::default_instance());
}

RemoteNodeResponse::RemoteNodeResponse(const RemoteNodeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RemoteNodeResponse)
}

void RemoteNodeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_RemoteNodeResponseType();
}

RemoteNodeResponse::~RemoteNodeResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.RemoteNodeResponse)
  SharedDtor();
}

void RemoteNodeResponse::SharedDtor() {
  if (has_RemoteNodeResponseType()) {
    clear_RemoteNodeResponseType();
  }
  if (this != default_instance_) {
  }
}

void RemoteNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteNodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteNodeResponse_descriptor_;
}

const RemoteNodeResponse& RemoteNodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

RemoteNodeResponse* RemoteNodeResponse::default_instance_ = NULL;

RemoteNodeResponse* RemoteNodeResponse::New(::google::protobuf::Arena* arena) const {
  RemoteNodeResponse* n = new RemoteNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteNodeResponse::clear_RemoteNodeResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.RemoteNodeResponse)
  switch(RemoteNodeResponseType_case()) {
    case kAcceptColleague: {
      delete RemoteNodeResponseType_.acceptcolleague_;
      break;
    }
    case kRenewColleague: {
      delete RemoteNodeResponseType_.renewcolleague_;
      break;
    }
    case kAcceptNeighbour: {
      delete RemoteNodeResponseType_.acceptneighbour_;
      break;
    }
    case kRenewNeighbour: {
      delete RemoteNodeResponseType_.renewneighbour_;
      break;
    }
    case kGetNodeCount: {
      delete RemoteNodeResponseType_.getnodecount_;
      break;
    }
    case kGetRandomNodes: {
      delete RemoteNodeResponseType_.getrandomnodes_;
      break;
    }
    case kGetClosestNodes: {
      delete RemoteNodeResponseType_.getclosestnodes_;
      break;
    }
    case kGetNodeInfo: {
      delete RemoteNodeResponseType_.getnodeinfo_;
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOTENODERESPONSETYPE_NOT_SET;
}


void RemoteNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RemoteNodeResponse)
  clear_RemoteNodeResponseType();
}

bool RemoteNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RemoteNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.BuildNetworkResponse acceptColleague = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptcolleague()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_renewColleague;
        break;
      }

      // optional .iop.locnet.BuildNetworkResponse renewColleague = 2;
      case 2: {
        if (tag == 18) {
         parse_renewColleague:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renewcolleague()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acceptNeighbour;
        break;
      }

      // optional .iop.locnet.BuildNetworkResponse acceptNeighbour = 3;
      case 3: {
        if (tag == 26) {
         parse_acceptNeighbour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptneighbour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_renewNeighbour;
        break;
      }

      // optional .iop.locnet.BuildNetworkResponse renewNeighbour = 4;
      case 4: {
        if (tag == 34) {
         parse_renewNeighbour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renewneighbour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_getNodeCount;
        break;
      }

      // optional .iop.locnet.GetNodeCountResponse getNodeCount = 5;
      case 5: {
        if (tag == 42) {
         parse_getNodeCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodecount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_getRandomNodes;
        break;
      }

      // optional .iop.locnet.GetRandomNodesResponse getRandomNodes = 6;
      case 6: {
        if (tag == 50) {
         parse_getRandomNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getrandomnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_getClosestNodes;
        break;
      }

      // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 7;
      case 7: {
        if (tag == 58) {
         parse_getClosestNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getclosestnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_getNodeInfo;
        break;
      }

      // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_getNodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RemoteNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RemoteNodeResponse)
  return false;
#undef DO_
}

void RemoteNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RemoteNodeResponse)
  // optional .iop.locnet.BuildNetworkResponse acceptColleague = 1;
  if (has_acceptcolleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *RemoteNodeResponseType_.acceptcolleague_, output);
  }

  // optional .iop.locnet.BuildNetworkResponse renewColleague = 2;
  if (has_renewcolleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RemoteNodeResponseType_.renewcolleague_, output);
  }

  // optional .iop.locnet.BuildNetworkResponse acceptNeighbour = 3;
  if (has_acceptneighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RemoteNodeResponseType_.acceptneighbour_, output);
  }

  // optional .iop.locnet.BuildNetworkResponse renewNeighbour = 4;
  if (has_renewneighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RemoteNodeResponseType_.renewneighbour_, output);
  }

  // optional .iop.locnet.GetNodeCountResponse getNodeCount = 5;
  if (has_getnodecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *RemoteNodeResponseType_.getnodecount_, output);
  }

  // optional .iop.locnet.GetRandomNodesResponse getRandomNodes = 6;
  if (has_getrandomnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *RemoteNodeResponseType_.getrandomnodes_, output);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 7;
  if (has_getclosestnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *RemoteNodeResponseType_.getclosestnodes_, output);
  }

  // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 8;
  if (has_getnodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *RemoteNodeResponseType_.getnodeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.RemoteNodeResponse)
}

::google::protobuf::uint8* RemoteNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RemoteNodeResponse)
  // optional .iop.locnet.BuildNetworkResponse acceptColleague = 1;
  if (has_acceptcolleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *RemoteNodeResponseType_.acceptcolleague_, false, target);
  }

  // optional .iop.locnet.BuildNetworkResponse renewColleague = 2;
  if (has_renewcolleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *RemoteNodeResponseType_.renewcolleague_, false, target);
  }

  // optional .iop.locnet.BuildNetworkResponse acceptNeighbour = 3;
  if (has_acceptneighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *RemoteNodeResponseType_.acceptneighbour_, false, target);
  }

  // optional .iop.locnet.BuildNetworkResponse renewNeighbour = 4;
  if (has_renewneighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *RemoteNodeResponseType_.renewneighbour_, false, target);
  }

  // optional .iop.locnet.GetNodeCountResponse getNodeCount = 5;
  if (has_getnodecount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *RemoteNodeResponseType_.getnodecount_, false, target);
  }

  // optional .iop.locnet.GetRandomNodesResponse getRandomNodes = 6;
  if (has_getrandomnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *RemoteNodeResponseType_.getrandomnodes_, false, target);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 7;
  if (has_getclosestnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *RemoteNodeResponseType_.getclosestnodes_, false, target);
  }

  // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 8;
  if (has_getnodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *RemoteNodeResponseType_.getnodeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RemoteNodeResponse)
  return target;
}

int RemoteNodeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RemoteNodeResponse)
  int total_size = 0;

  switch (RemoteNodeResponseType_case()) {
    // optional .iop.locnet.BuildNetworkResponse acceptColleague = 1;
    case kAcceptColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.acceptcolleague_);
      break;
    }
    // optional .iop.locnet.BuildNetworkResponse renewColleague = 2;
    case kRenewColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.renewcolleague_);
      break;
    }
    // optional .iop.locnet.BuildNetworkResponse acceptNeighbour = 3;
    case kAcceptNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.acceptneighbour_);
      break;
    }
    // optional .iop.locnet.BuildNetworkResponse renewNeighbour = 4;
    case kRenewNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.renewneighbour_);
      break;
    }
    // optional .iop.locnet.GetNodeCountResponse getNodeCount = 5;
    case kGetNodeCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.getnodecount_);
      break;
    }
    // optional .iop.locnet.GetRandomNodesResponse getRandomNodes = 6;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.getrandomnodes_);
      break;
    }
    // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 7;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.getclosestnodes_);
      break;
    }
    // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 8;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RemoteNodeResponseType_.getnodeinfo_);
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RemoteNodeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoteNodeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RemoteNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RemoteNodeResponse)
    MergeFrom(*source);
  }
}

void RemoteNodeResponse::MergeFrom(const RemoteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RemoteNodeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.RemoteNodeResponseType_case()) {
    case kAcceptColleague: {
      mutable_acceptcolleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.acceptcolleague());
      break;
    }
    case kRenewColleague: {
      mutable_renewcolleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renewcolleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_acceptneighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.acceptneighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renewneighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renewneighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_getnodecount()->::iop::locnet::GetNodeCountResponse::MergeFrom(from.getnodecount());
      break;
    }
    case kGetRandomNodes: {
      mutable_getrandomnodes()->::iop::locnet::GetRandomNodesResponse::MergeFrom(from.getrandomnodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_getclosestnodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.getclosestnodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_getnodeinfo()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.getnodeinfo());
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RemoteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteNodeResponse::CopyFrom(const RemoteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RemoteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteNodeResponse::IsInitialized() const {

  return true;
}

void RemoteNodeResponse::Swap(RemoteNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteNodeResponse::InternalSwap(RemoteNodeResponse* other) {
  std::swap(RemoteNodeResponseType_, other->RemoteNodeResponseType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteNodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteNodeResponse_descriptor_;
  metadata.reflection = RemoteNodeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteNodeResponse

// optional .iop.locnet.BuildNetworkResponse acceptColleague = 1;
bool RemoteNodeResponse::has_acceptcolleague() const {
  return RemoteNodeResponseType_case() == kAcceptColleague;
}
void RemoteNodeResponse::set_has_acceptcolleague() {
  _oneof_case_[0] = kAcceptColleague;
}
void RemoteNodeResponse::clear_acceptcolleague() {
  if (has_acceptcolleague()) {
    delete RemoteNodeResponseType_.acceptcolleague_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::BuildNetworkResponse& RemoteNodeResponse::acceptcolleague() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.acceptColleague)
  return has_acceptcolleague()
      ? *RemoteNodeResponseType_.acceptcolleague_
      : ::iop::locnet::BuildNetworkResponse::default_instance();
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::mutable_acceptcolleague() {
  if (!has_acceptcolleague()) {
    clear_RemoteNodeResponseType();
    set_has_acceptcolleague();
    RemoteNodeResponseType_.acceptcolleague_ = new ::iop::locnet::BuildNetworkResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.acceptColleague)
  return RemoteNodeResponseType_.acceptcolleague_;
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::release_acceptcolleague() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.acceptColleague)
  if (has_acceptcolleague()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::BuildNetworkResponse* temp = RemoteNodeResponseType_.acceptcolleague_;
    RemoteNodeResponseType_.acceptcolleague_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_acceptcolleague(::iop::locnet::BuildNetworkResponse* acceptcolleague) {
  clear_RemoteNodeResponseType();
  if (acceptcolleague) {
    set_has_acceptcolleague();
    RemoteNodeResponseType_.acceptcolleague_ = acceptcolleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.acceptColleague)
}

// optional .iop.locnet.BuildNetworkResponse renewColleague = 2;
bool RemoteNodeResponse::has_renewcolleague() const {
  return RemoteNodeResponseType_case() == kRenewColleague;
}
void RemoteNodeResponse::set_has_renewcolleague() {
  _oneof_case_[0] = kRenewColleague;
}
void RemoteNodeResponse::clear_renewcolleague() {
  if (has_renewcolleague()) {
    delete RemoteNodeResponseType_.renewcolleague_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::BuildNetworkResponse& RemoteNodeResponse::renewcolleague() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.renewColleague)
  return has_renewcolleague()
      ? *RemoteNodeResponseType_.renewcolleague_
      : ::iop::locnet::BuildNetworkResponse::default_instance();
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::mutable_renewcolleague() {
  if (!has_renewcolleague()) {
    clear_RemoteNodeResponseType();
    set_has_renewcolleague();
    RemoteNodeResponseType_.renewcolleague_ = new ::iop::locnet::BuildNetworkResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.renewColleague)
  return RemoteNodeResponseType_.renewcolleague_;
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::release_renewcolleague() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.renewColleague)
  if (has_renewcolleague()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::BuildNetworkResponse* temp = RemoteNodeResponseType_.renewcolleague_;
    RemoteNodeResponseType_.renewcolleague_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_renewcolleague(::iop::locnet::BuildNetworkResponse* renewcolleague) {
  clear_RemoteNodeResponseType();
  if (renewcolleague) {
    set_has_renewcolleague();
    RemoteNodeResponseType_.renewcolleague_ = renewcolleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.renewColleague)
}

// optional .iop.locnet.BuildNetworkResponse acceptNeighbour = 3;
bool RemoteNodeResponse::has_acceptneighbour() const {
  return RemoteNodeResponseType_case() == kAcceptNeighbour;
}
void RemoteNodeResponse::set_has_acceptneighbour() {
  _oneof_case_[0] = kAcceptNeighbour;
}
void RemoteNodeResponse::clear_acceptneighbour() {
  if (has_acceptneighbour()) {
    delete RemoteNodeResponseType_.acceptneighbour_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::BuildNetworkResponse& RemoteNodeResponse::acceptneighbour() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.acceptNeighbour)
  return has_acceptneighbour()
      ? *RemoteNodeResponseType_.acceptneighbour_
      : ::iop::locnet::BuildNetworkResponse::default_instance();
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::mutable_acceptneighbour() {
  if (!has_acceptneighbour()) {
    clear_RemoteNodeResponseType();
    set_has_acceptneighbour();
    RemoteNodeResponseType_.acceptneighbour_ = new ::iop::locnet::BuildNetworkResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.acceptNeighbour)
  return RemoteNodeResponseType_.acceptneighbour_;
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::release_acceptneighbour() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.acceptNeighbour)
  if (has_acceptneighbour()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::BuildNetworkResponse* temp = RemoteNodeResponseType_.acceptneighbour_;
    RemoteNodeResponseType_.acceptneighbour_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_acceptneighbour(::iop::locnet::BuildNetworkResponse* acceptneighbour) {
  clear_RemoteNodeResponseType();
  if (acceptneighbour) {
    set_has_acceptneighbour();
    RemoteNodeResponseType_.acceptneighbour_ = acceptneighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.acceptNeighbour)
}

// optional .iop.locnet.BuildNetworkResponse renewNeighbour = 4;
bool RemoteNodeResponse::has_renewneighbour() const {
  return RemoteNodeResponseType_case() == kRenewNeighbour;
}
void RemoteNodeResponse::set_has_renewneighbour() {
  _oneof_case_[0] = kRenewNeighbour;
}
void RemoteNodeResponse::clear_renewneighbour() {
  if (has_renewneighbour()) {
    delete RemoteNodeResponseType_.renewneighbour_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::BuildNetworkResponse& RemoteNodeResponse::renewneighbour() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.renewNeighbour)
  return has_renewneighbour()
      ? *RemoteNodeResponseType_.renewneighbour_
      : ::iop::locnet::BuildNetworkResponse::default_instance();
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::mutable_renewneighbour() {
  if (!has_renewneighbour()) {
    clear_RemoteNodeResponseType();
    set_has_renewneighbour();
    RemoteNodeResponseType_.renewneighbour_ = new ::iop::locnet::BuildNetworkResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.renewNeighbour)
  return RemoteNodeResponseType_.renewneighbour_;
}
::iop::locnet::BuildNetworkResponse* RemoteNodeResponse::release_renewneighbour() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.renewNeighbour)
  if (has_renewneighbour()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::BuildNetworkResponse* temp = RemoteNodeResponseType_.renewneighbour_;
    RemoteNodeResponseType_.renewneighbour_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_renewneighbour(::iop::locnet::BuildNetworkResponse* renewneighbour) {
  clear_RemoteNodeResponseType();
  if (renewneighbour) {
    set_has_renewneighbour();
    RemoteNodeResponseType_.renewneighbour_ = renewneighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.renewNeighbour)
}

// optional .iop.locnet.GetNodeCountResponse getNodeCount = 5;
bool RemoteNodeResponse::has_getnodecount() const {
  return RemoteNodeResponseType_case() == kGetNodeCount;
}
void RemoteNodeResponse::set_has_getnodecount() {
  _oneof_case_[0] = kGetNodeCount;
}
void RemoteNodeResponse::clear_getnodecount() {
  if (has_getnodecount()) {
    delete RemoteNodeResponseType_.getnodecount_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::GetNodeCountResponse& RemoteNodeResponse::getnodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.getNodeCount)
  return has_getnodecount()
      ? *RemoteNodeResponseType_.getnodecount_
      : ::iop::locnet::GetNodeCountResponse::default_instance();
}
::iop::locnet::GetNodeCountResponse* RemoteNodeResponse::mutable_getnodecount() {
  if (!has_getnodecount()) {
    clear_RemoteNodeResponseType();
    set_has_getnodecount();
    RemoteNodeResponseType_.getnodecount_ = new ::iop::locnet::GetNodeCountResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.getNodeCount)
  return RemoteNodeResponseType_.getnodecount_;
}
::iop::locnet::GetNodeCountResponse* RemoteNodeResponse::release_getnodecount() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.getNodeCount)
  if (has_getnodecount()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::GetNodeCountResponse* temp = RemoteNodeResponseType_.getnodecount_;
    RemoteNodeResponseType_.getnodecount_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_getnodecount(::iop::locnet::GetNodeCountResponse* getnodecount) {
  clear_RemoteNodeResponseType();
  if (getnodecount) {
    set_has_getnodecount();
    RemoteNodeResponseType_.getnodecount_ = getnodecount;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.getNodeCount)
}

// optional .iop.locnet.GetRandomNodesResponse getRandomNodes = 6;
bool RemoteNodeResponse::has_getrandomnodes() const {
  return RemoteNodeResponseType_case() == kGetRandomNodes;
}
void RemoteNodeResponse::set_has_getrandomnodes() {
  _oneof_case_[0] = kGetRandomNodes;
}
void RemoteNodeResponse::clear_getrandomnodes() {
  if (has_getrandomnodes()) {
    delete RemoteNodeResponseType_.getrandomnodes_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::GetRandomNodesResponse& RemoteNodeResponse::getrandomnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.getRandomNodes)
  return has_getrandomnodes()
      ? *RemoteNodeResponseType_.getrandomnodes_
      : ::iop::locnet::GetRandomNodesResponse::default_instance();
}
::iop::locnet::GetRandomNodesResponse* RemoteNodeResponse::mutable_getrandomnodes() {
  if (!has_getrandomnodes()) {
    clear_RemoteNodeResponseType();
    set_has_getrandomnodes();
    RemoteNodeResponseType_.getrandomnodes_ = new ::iop::locnet::GetRandomNodesResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.getRandomNodes)
  return RemoteNodeResponseType_.getrandomnodes_;
}
::iop::locnet::GetRandomNodesResponse* RemoteNodeResponse::release_getrandomnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.getRandomNodes)
  if (has_getrandomnodes()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::GetRandomNodesResponse* temp = RemoteNodeResponseType_.getrandomnodes_;
    RemoteNodeResponseType_.getrandomnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_getrandomnodes(::iop::locnet::GetRandomNodesResponse* getrandomnodes) {
  clear_RemoteNodeResponseType();
  if (getrandomnodes) {
    set_has_getrandomnodes();
    RemoteNodeResponseType_.getrandomnodes_ = getrandomnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.getRandomNodes)
}

// optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 7;
bool RemoteNodeResponse::has_getclosestnodes() const {
  return RemoteNodeResponseType_case() == kGetClosestNodes;
}
void RemoteNodeResponse::set_has_getclosestnodes() {
  _oneof_case_[0] = kGetClosestNodes;
}
void RemoteNodeResponse::clear_getclosestnodes() {
  if (has_getclosestnodes()) {
    delete RemoteNodeResponseType_.getclosestnodes_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::GetClosestNodesByDistanceResponse& RemoteNodeResponse::getclosestnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.getClosestNodes)
  return has_getclosestnodes()
      ? *RemoteNodeResponseType_.getclosestnodes_
      : ::iop::locnet::GetClosestNodesByDistanceResponse::default_instance();
}
::iop::locnet::GetClosestNodesByDistanceResponse* RemoteNodeResponse::mutable_getclosestnodes() {
  if (!has_getclosestnodes()) {
    clear_RemoteNodeResponseType();
    set_has_getclosestnodes();
    RemoteNodeResponseType_.getclosestnodes_ = new ::iop::locnet::GetClosestNodesByDistanceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.getClosestNodes)
  return RemoteNodeResponseType_.getclosestnodes_;
}
::iop::locnet::GetClosestNodesByDistanceResponse* RemoteNodeResponse::release_getclosestnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.getClosestNodes)
  if (has_getclosestnodes()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::GetClosestNodesByDistanceResponse* temp = RemoteNodeResponseType_.getclosestnodes_;
    RemoteNodeResponseType_.getclosestnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_getclosestnodes(::iop::locnet::GetClosestNodesByDistanceResponse* getclosestnodes) {
  clear_RemoteNodeResponseType();
  if (getclosestnodes) {
    set_has_getclosestnodes();
    RemoteNodeResponseType_.getclosestnodes_ = getclosestnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.getClosestNodes)
}

// optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 8;
bool RemoteNodeResponse::has_getnodeinfo() const {
  return RemoteNodeResponseType_case() == kGetNodeInfo;
}
void RemoteNodeResponse::set_has_getnodeinfo() {
  _oneof_case_[0] = kGetNodeInfo;
}
void RemoteNodeResponse::clear_getnodeinfo() {
  if (has_getnodeinfo()) {
    delete RemoteNodeResponseType_.getnodeinfo_;
    clear_has_RemoteNodeResponseType();
  }
}
 const ::iop::locnet::GetNodeInfoResponse& RemoteNodeResponse::getnodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.RemoteNodeResponse.getNodeInfo)
  return has_getnodeinfo()
      ? *RemoteNodeResponseType_.getnodeinfo_
      : ::iop::locnet::GetNodeInfoResponse::default_instance();
}
::iop::locnet::GetNodeInfoResponse* RemoteNodeResponse::mutable_getnodeinfo() {
  if (!has_getnodeinfo()) {
    clear_RemoteNodeResponseType();
    set_has_getnodeinfo();
    RemoteNodeResponseType_.getnodeinfo_ = new ::iop::locnet::GetNodeInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.RemoteNodeResponse.getNodeInfo)
  return RemoteNodeResponseType_.getnodeinfo_;
}
::iop::locnet::GetNodeInfoResponse* RemoteNodeResponse::release_getnodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.RemoteNodeResponse.getNodeInfo)
  if (has_getnodeinfo()) {
    clear_has_RemoteNodeResponseType();
    ::iop::locnet::GetNodeInfoResponse* temp = RemoteNodeResponseType_.getnodeinfo_;
    RemoteNodeResponseType_.getnodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RemoteNodeResponse::set_allocated_getnodeinfo(::iop::locnet::GetNodeInfoResponse* getnodeinfo) {
  clear_RemoteNodeResponseType();
  if (getnodeinfo) {
    set_has_getnodeinfo();
    RemoteNodeResponseType_.getnodeinfo_ = getnodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.getNodeInfo)
}

bool RemoteNodeResponse::has_RemoteNodeResponseType() const {
  return RemoteNodeResponseType_case() != REMOTENODERESPONSETYPE_NOT_SET;
}
void RemoteNodeResponse::clear_has_RemoteNodeResponseType() {
  _oneof_case_[0] = REMOTENODERESPONSETYPE_NOT_SET;
}
RemoteNodeResponse::RemoteNodeResponseTypeCase RemoteNodeResponse::RemoteNodeResponseType_case() const {
  return RemoteNodeResponse::RemoteNodeResponseTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildNetworkRequest::kRequestorNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildNetworkRequest::BuildNetworkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.BuildNetworkRequest)
}

void BuildNetworkRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  requestornodeinfo_ = const_cast< ::iop::locnet::NodeInfo*>(&::iop::locnet::NodeInfo::default_instance());
}

BuildNetworkRequest::BuildNetworkRequest(const BuildNetworkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.BuildNetworkRequest)
}

void BuildNetworkRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  requestornodeinfo_ = NULL;
}

BuildNetworkRequest::~BuildNetworkRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.BuildNetworkRequest)
  SharedDtor();
}

void BuildNetworkRequest::SharedDtor() {
  if (this != default_instance_) {
    delete requestornodeinfo_;
  }
}

void BuildNetworkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildNetworkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildNetworkRequest_descriptor_;
}

const BuildNetworkRequest& BuildNetworkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

BuildNetworkRequest* BuildNetworkRequest::default_instance_ = NULL;

BuildNetworkRequest* BuildNetworkRequest::New(::google::protobuf::Arena* arena) const {
  BuildNetworkRequest* n = new BuildNetworkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuildNetworkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.BuildNetworkRequest)
  if (GetArenaNoVirtual() == NULL && requestornodeinfo_ != NULL) delete requestornodeinfo_;
  requestornodeinfo_ = NULL;
}

bool BuildNetworkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.BuildNetworkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.NodeInfo requestorNodeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestornodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.BuildNetworkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.BuildNetworkRequest)
  return false;
#undef DO_
}

void BuildNetworkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.BuildNetworkRequest)
  // optional .iop.locnet.NodeInfo requestorNodeInfo = 1;
  if (this->has_requestornodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->requestornodeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.BuildNetworkRequest)
}

::google::protobuf::uint8* BuildNetworkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.BuildNetworkRequest)
  // optional .iop.locnet.NodeInfo requestorNodeInfo = 1;
  if (this->has_requestornodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->requestornodeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.BuildNetworkRequest)
  return target;
}

int BuildNetworkRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.BuildNetworkRequest)
  int total_size = 0;

  // optional .iop.locnet.NodeInfo requestorNodeInfo = 1;
  if (this->has_requestornodeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestornodeinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildNetworkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.BuildNetworkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BuildNetworkRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildNetworkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.BuildNetworkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.BuildNetworkRequest)
    MergeFrom(*source);
  }
}

void BuildNetworkRequest::MergeFrom(const BuildNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.BuildNetworkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_requestornodeinfo()) {
    mutable_requestornodeinfo()->::iop::locnet::NodeInfo::MergeFrom(from.requestornodeinfo());
  }
}

void BuildNetworkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.BuildNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildNetworkRequest::CopyFrom(const BuildNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.BuildNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildNetworkRequest::IsInitialized() const {

  return true;
}

void BuildNetworkRequest::Swap(BuildNetworkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildNetworkRequest::InternalSwap(BuildNetworkRequest* other) {
  std::swap(requestornodeinfo_, other->requestornodeinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildNetworkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildNetworkRequest_descriptor_;
  metadata.reflection = BuildNetworkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuildNetworkRequest

// optional .iop.locnet.NodeInfo requestorNodeInfo = 1;
bool BuildNetworkRequest::has_requestornodeinfo() const {
  return !_is_default_instance_ && requestornodeinfo_ != NULL;
}
void BuildNetworkRequest::clear_requestornodeinfo() {
  if (GetArenaNoVirtual() == NULL && requestornodeinfo_ != NULL) delete requestornodeinfo_;
  requestornodeinfo_ = NULL;
}
const ::iop::locnet::NodeInfo& BuildNetworkRequest::requestornodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.BuildNetworkRequest.requestorNodeInfo)
  return requestornodeinfo_ != NULL ? *requestornodeinfo_ : *default_instance_->requestornodeinfo_;
}
::iop::locnet::NodeInfo* BuildNetworkRequest::mutable_requestornodeinfo() {
  
  if (requestornodeinfo_ == NULL) {
    requestornodeinfo_ = new ::iop::locnet::NodeInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.BuildNetworkRequest.requestorNodeInfo)
  return requestornodeinfo_;
}
::iop::locnet::NodeInfo* BuildNetworkRequest::release_requestornodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.BuildNetworkRequest.requestorNodeInfo)
  
  ::iop::locnet::NodeInfo* temp = requestornodeinfo_;
  requestornodeinfo_ = NULL;
  return temp;
}
void BuildNetworkRequest::set_allocated_requestornodeinfo(::iop::locnet::NodeInfo* requestornodeinfo) {
  delete requestornodeinfo_;
  requestornodeinfo_ = requestornodeinfo;
  if (requestornodeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.BuildNetworkRequest.requestorNodeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildNetworkResponse::kAcceptedFieldNumber;
const int BuildNetworkResponse::kAcceptorNodeInfoFieldNumber;
const int BuildNetworkResponse::kRemoteIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildNetworkResponse::BuildNetworkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.BuildNetworkResponse)
}

void BuildNetworkResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  acceptornodeinfo_ = const_cast< ::iop::locnet::NodeInfo*>(&::iop::locnet::NodeInfo::default_instance());
}

BuildNetworkResponse::BuildNetworkResponse(const BuildNetworkResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.BuildNetworkResponse)
}

void BuildNetworkResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accepted_ = false;
  acceptornodeinfo_ = NULL;
  remoteipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BuildNetworkResponse::~BuildNetworkResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.BuildNetworkResponse)
  SharedDtor();
}

void BuildNetworkResponse::SharedDtor() {
  remoteipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete acceptornodeinfo_;
  }
}

void BuildNetworkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildNetworkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildNetworkResponse_descriptor_;
}

const BuildNetworkResponse& BuildNetworkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

BuildNetworkResponse* BuildNetworkResponse::default_instance_ = NULL;

BuildNetworkResponse* BuildNetworkResponse::New(::google::protobuf::Arena* arena) const {
  BuildNetworkResponse* n = new BuildNetworkResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuildNetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.BuildNetworkResponse)
  accepted_ = false;
  if (GetArenaNoVirtual() == NULL && acceptornodeinfo_ != NULL) delete acceptornodeinfo_;
  acceptornodeinfo_ = NULL;
  remoteipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BuildNetworkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.BuildNetworkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accepted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acceptorNodeInfo;
        break;
      }

      // optional .iop.locnet.NodeInfo acceptorNodeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_acceptorNodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptornodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remoteIpAddress;
        break;
      }

      // optional bytes remoteIpAddress = 3;
      case 3: {
        if (tag == 26) {
         parse_remoteIpAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remoteipaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.BuildNetworkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.BuildNetworkResponse)
  return false;
#undef DO_
}

void BuildNetworkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.BuildNetworkResponse)
  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  // optional .iop.locnet.NodeInfo acceptorNodeInfo = 2;
  if (this->has_acceptornodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->acceptornodeinfo_, output);
  }

  // optional bytes remoteIpAddress = 3;
  if (this->remoteipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->remoteipaddress(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.BuildNetworkResponse)
}

::google::protobuf::uint8* BuildNetworkResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.BuildNetworkResponse)
  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  // optional .iop.locnet.NodeInfo acceptorNodeInfo = 2;
  if (this->has_acceptornodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->acceptornodeinfo_, false, target);
  }

  // optional bytes remoteIpAddress = 3;
  if (this->remoteipaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->remoteipaddress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.BuildNetworkResponse)
  return target;
}

int BuildNetworkResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.BuildNetworkResponse)
  int total_size = 0;

  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    total_size += 1 + 1;
  }

  // optional .iop.locnet.NodeInfo acceptorNodeInfo = 2;
  if (this->has_acceptornodeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceptornodeinfo_);
  }

  // optional bytes remoteIpAddress = 3;
  if (this->remoteipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->remoteipaddress());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildNetworkResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.BuildNetworkResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BuildNetworkResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildNetworkResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.BuildNetworkResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.BuildNetworkResponse)
    MergeFrom(*source);
  }
}

void BuildNetworkResponse::MergeFrom(const BuildNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.BuildNetworkResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
  if (from.has_acceptornodeinfo()) {
    mutable_acceptornodeinfo()->::iop::locnet::NodeInfo::MergeFrom(from.acceptornodeinfo());
  }
  if (from.remoteipaddress().size() > 0) {

    remoteipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteipaddress_);
  }
}

void BuildNetworkResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.BuildNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildNetworkResponse::CopyFrom(const BuildNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.BuildNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildNetworkResponse::IsInitialized() const {

  return true;
}

void BuildNetworkResponse::Swap(BuildNetworkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildNetworkResponse::InternalSwap(BuildNetworkResponse* other) {
  std::swap(accepted_, other->accepted_);
  std::swap(acceptornodeinfo_, other->acceptornodeinfo_);
  remoteipaddress_.Swap(&other->remoteipaddress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildNetworkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildNetworkResponse_descriptor_;
  metadata.reflection = BuildNetworkResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuildNetworkResponse

// optional bool accepted = 1;
void BuildNetworkResponse::clear_accepted() {
  accepted_ = false;
}
 bool BuildNetworkResponse::accepted() const {
  // @@protoc_insertion_point(field_get:iop.locnet.BuildNetworkResponse.accepted)
  return accepted_;
}
 void BuildNetworkResponse::set_accepted(bool value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.BuildNetworkResponse.accepted)
}

// optional .iop.locnet.NodeInfo acceptorNodeInfo = 2;
bool BuildNetworkResponse::has_acceptornodeinfo() const {
  return !_is_default_instance_ && acceptornodeinfo_ != NULL;
}
void BuildNetworkResponse::clear_acceptornodeinfo() {
  if (GetArenaNoVirtual() == NULL && acceptornodeinfo_ != NULL) delete acceptornodeinfo_;
  acceptornodeinfo_ = NULL;
}
const ::iop::locnet::NodeInfo& BuildNetworkResponse::acceptornodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.BuildNetworkResponse.acceptorNodeInfo)
  return acceptornodeinfo_ != NULL ? *acceptornodeinfo_ : *default_instance_->acceptornodeinfo_;
}
::iop::locnet::NodeInfo* BuildNetworkResponse::mutable_acceptornodeinfo() {
  
  if (acceptornodeinfo_ == NULL) {
    acceptornodeinfo_ = new ::iop::locnet::NodeInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.BuildNetworkResponse.acceptorNodeInfo)
  return acceptornodeinfo_;
}
::iop::locnet::NodeInfo* BuildNetworkResponse::release_acceptornodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.BuildNetworkResponse.acceptorNodeInfo)
  
  ::iop::locnet::NodeInfo* temp = acceptornodeinfo_;
  acceptornodeinfo_ = NULL;
  return temp;
}
void BuildNetworkResponse::set_allocated_acceptornodeinfo(::iop::locnet::NodeInfo* acceptornodeinfo) {
  delete acceptornodeinfo_;
  acceptornodeinfo_ = acceptornodeinfo;
  if (acceptornodeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.BuildNetworkResponse.acceptorNodeInfo)
}

// optional bytes remoteIpAddress = 3;
void BuildNetworkResponse::clear_remoteipaddress() {
  remoteipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BuildNetworkResponse::remoteipaddress() const {
  // @@protoc_insertion_point(field_get:iop.locnet.BuildNetworkResponse.remoteIpAddress)
  return remoteipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BuildNetworkResponse::set_remoteipaddress(const ::std::string& value) {
  
  remoteipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iop.locnet.BuildNetworkResponse.remoteIpAddress)
}
 void BuildNetworkResponse::set_remoteipaddress(const char* value) {
  
  remoteipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iop.locnet.BuildNetworkResponse.remoteIpAddress)
}
 void BuildNetworkResponse::set_remoteipaddress(const void* value, size_t size) {
  
  remoteipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iop.locnet.BuildNetworkResponse.remoteIpAddress)
}
 ::std::string* BuildNetworkResponse::mutable_remoteipaddress() {
  
  // @@protoc_insertion_point(field_mutable:iop.locnet.BuildNetworkResponse.remoteIpAddress)
  return remoteipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BuildNetworkResponse::release_remoteipaddress() {
  // @@protoc_insertion_point(field_release:iop.locnet.BuildNetworkResponse.remoteIpAddress)
  
  return remoteipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BuildNetworkResponse::set_allocated_remoteipaddress(::std::string* remoteipaddress) {
  if (remoteipaddress != NULL) {
    
  } else {
    
  }
  remoteipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remoteipaddress);
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.BuildNetworkResponse.remoteIpAddress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeCountRequest::GetNodeCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeCountRequest)
}

void GetNodeCountRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNodeCountRequest::GetNodeCountRequest(const GetNodeCountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeCountRequest)
}

void GetNodeCountRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetNodeCountRequest::~GetNodeCountRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeCountRequest)
  SharedDtor();
}

void GetNodeCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeCountRequest_descriptor_;
}

const GetNodeCountRequest& GetNodeCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNodeCountRequest* GetNodeCountRequest::default_instance_ = NULL;

GetNodeCountRequest* GetNodeCountRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeCountRequest* n = new GetNodeCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeCountRequest)
}

bool GetNodeCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeCountRequest)
  return false;
#undef DO_
}

void GetNodeCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeCountRequest)
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeCountRequest)
}

::google::protobuf::uint8* GetNodeCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeCountRequest)
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeCountRequest)
  return target;
}

int GetNodeCountRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeCountRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeCountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNodeCountRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeCountRequest)
    MergeFrom(*source);
  }
}

void GetNodeCountRequest::MergeFrom(const GetNodeCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeCountRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetNodeCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeCountRequest::CopyFrom(const GetNodeCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeCountRequest::IsInitialized() const {

  return true;
}

void GetNodeCountRequest::Swap(GetNodeCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeCountRequest::InternalSwap(GetNodeCountRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeCountRequest_descriptor_;
  metadata.reflection = GetNodeCountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeCountRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeCountResponse::kNodeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeCountResponse::GetNodeCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeCountResponse)
}

void GetNodeCountResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNodeCountResponse::GetNodeCountResponse(const GetNodeCountResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeCountResponse)
}

void GetNodeCountResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nodecount_ = 0u;
}

GetNodeCountResponse::~GetNodeCountResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeCountResponse)
  SharedDtor();
}

void GetNodeCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeCountResponse_descriptor_;
}

const GetNodeCountResponse& GetNodeCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNodeCountResponse* GetNodeCountResponse::default_instance_ = NULL;

GetNodeCountResponse* GetNodeCountResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeCountResponse* n = new GetNodeCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeCountResponse)
  nodecount_ = 0u;
}

bool GetNodeCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nodeCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeCountResponse)
  return false;
#undef DO_
}

void GetNodeCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeCountResponse)
  // optional uint32 nodeCount = 1;
  if (this->nodecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nodecount(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeCountResponse)
}

::google::protobuf::uint8* GetNodeCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeCountResponse)
  // optional uint32 nodeCount = 1;
  if (this->nodecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nodecount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeCountResponse)
  return target;
}

int GetNodeCountResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeCountResponse)
  int total_size = 0;

  // optional uint32 nodeCount = 1;
  if (this->nodecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nodecount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeCountResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNodeCountResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeCountResponse)
    MergeFrom(*source);
  }
}

void GetNodeCountResponse::MergeFrom(const GetNodeCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeCountResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nodecount() != 0) {
    set_nodecount(from.nodecount());
  }
}

void GetNodeCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeCountResponse::CopyFrom(const GetNodeCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeCountResponse::IsInitialized() const {

  return true;
}

void GetNodeCountResponse::Swap(GetNodeCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeCountResponse::InternalSwap(GetNodeCountResponse* other) {
  std::swap(nodecount_, other->nodecount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeCountResponse_descriptor_;
  metadata.reflection = GetNodeCountResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeCountResponse

// optional uint32 nodeCount = 1;
void GetNodeCountResponse::clear_nodecount() {
  nodecount_ = 0u;
}
 ::google::protobuf::uint32 GetNodeCountResponse::nodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetNodeCountResponse.nodeCount)
  return nodecount_;
}
 void GetNodeCountResponse::set_nodecount(::google::protobuf::uint32 value) {
  
  nodecount_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetNodeCountResponse.nodeCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRandomNodesRequest::kMaxNodeCountFieldNumber;
const int GetRandomNodesRequest::kIncludeNeighboursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRandomNodesRequest::GetRandomNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetRandomNodesRequest)
}

void GetRandomNodesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRandomNodesRequest::GetRandomNodesRequest(const GetRandomNodesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetRandomNodesRequest)
}

void GetRandomNodesRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  maxnodecount_ = 0u;
  includeneighbours_ = false;
}

GetRandomNodesRequest::~GetRandomNodesRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetRandomNodesRequest)
  SharedDtor();
}

void GetRandomNodesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRandomNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRandomNodesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRandomNodesRequest_descriptor_;
}

const GetRandomNodesRequest& GetRandomNodesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetRandomNodesRequest* GetRandomNodesRequest::default_instance_ = NULL;

GetRandomNodesRequest* GetRandomNodesRequest::New(::google::protobuf::Arena* arena) const {
  GetRandomNodesRequest* n = new GetRandomNodesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRandomNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetRandomNodesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetRandomNodesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRandomNodesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxnodecount_, includeneighbours_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetRandomNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetRandomNodesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxNodeCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnodecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_includeNeighbours;
        break;
      }

      // optional bool includeNeighbours = 2;
      case 2: {
        if (tag == 16) {
         parse_includeNeighbours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeneighbours_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetRandomNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetRandomNodesRequest)
  return false;
#undef DO_
}

void GetRandomNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetRandomNodesRequest)
  // optional uint32 maxNodeCount = 1;
  if (this->maxnodecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxnodecount(), output);
  }

  // optional bool includeNeighbours = 2;
  if (this->includeneighbours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->includeneighbours(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetRandomNodesRequest)
}

::google::protobuf::uint8* GetRandomNodesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetRandomNodesRequest)
  // optional uint32 maxNodeCount = 1;
  if (this->maxnodecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxnodecount(), target);
  }

  // optional bool includeNeighbours = 2;
  if (this->includeneighbours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->includeneighbours(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetRandomNodesRequest)
  return target;
}

int GetRandomNodesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetRandomNodesRequest)
  int total_size = 0;

  // optional uint32 maxNodeCount = 1;
  if (this->maxnodecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnodecount());
  }

  // optional bool includeNeighbours = 2;
  if (this->includeneighbours() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetRandomNodesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRandomNodesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRandomNodesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetRandomNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetRandomNodesRequest)
    MergeFrom(*source);
  }
}

void GetRandomNodesRequest::MergeFrom(const GetRandomNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetRandomNodesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.maxnodecount() != 0) {
    set_maxnodecount(from.maxnodecount());
  }
  if (from.includeneighbours() != 0) {
    set_includeneighbours(from.includeneighbours());
  }
}

void GetRandomNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetRandomNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomNodesRequest::CopyFrom(const GetRandomNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetRandomNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomNodesRequest::IsInitialized() const {

  return true;
}

void GetRandomNodesRequest::Swap(GetRandomNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRandomNodesRequest::InternalSwap(GetRandomNodesRequest* other) {
  std::swap(maxnodecount_, other->maxnodecount_);
  std::swap(includeneighbours_, other->includeneighbours_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRandomNodesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRandomNodesRequest_descriptor_;
  metadata.reflection = GetRandomNodesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRandomNodesRequest

// optional uint32 maxNodeCount = 1;
void GetRandomNodesRequest::clear_maxnodecount() {
  maxnodecount_ = 0u;
}
 ::google::protobuf::uint32 GetRandomNodesRequest::maxnodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetRandomNodesRequest.maxNodeCount)
  return maxnodecount_;
}
 void GetRandomNodesRequest::set_maxnodecount(::google::protobuf::uint32 value) {
  
  maxnodecount_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetRandomNodesRequest.maxNodeCount)
}

// optional bool includeNeighbours = 2;
void GetRandomNodesRequest::clear_includeneighbours() {
  includeneighbours_ = false;
}
 bool GetRandomNodesRequest::includeneighbours() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetRandomNodesRequest.includeNeighbours)
  return includeneighbours_;
}
 void GetRandomNodesRequest::set_includeneighbours(bool value) {
  
  includeneighbours_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetRandomNodesRequest.includeNeighbours)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRandomNodesResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRandomNodesResponse::GetRandomNodesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetRandomNodesResponse)
}

void GetRandomNodesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRandomNodesResponse::GetRandomNodesResponse(const GetRandomNodesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetRandomNodesResponse)
}

void GetRandomNodesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetRandomNodesResponse::~GetRandomNodesResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetRandomNodesResponse)
  SharedDtor();
}

void GetRandomNodesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRandomNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRandomNodesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRandomNodesResponse_descriptor_;
}

const GetRandomNodesResponse& GetRandomNodesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetRandomNodesResponse* GetRandomNodesResponse::default_instance_ = NULL;

GetRandomNodesResponse* GetRandomNodesResponse::New(::google::protobuf::Arena* arena) const {
  GetRandomNodesResponse* n = new GetRandomNodesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRandomNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetRandomNodesResponse)
  nodes_.Clear();
}

bool GetRandomNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetRandomNodesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetRandomNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetRandomNodesResponse)
  return false;
#undef DO_
}

void GetRandomNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetRandomNodesResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetRandomNodesResponse)
}

::google::protobuf::uint8* GetRandomNodesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetRandomNodesResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetRandomNodesResponse)
  return target;
}

int GetRandomNodesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetRandomNodesResponse)
  int total_size = 0;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetRandomNodesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRandomNodesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRandomNodesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetRandomNodesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetRandomNodesResponse)
    MergeFrom(*source);
  }
}

void GetRandomNodesResponse::MergeFrom(const GetRandomNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetRandomNodesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void GetRandomNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetRandomNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomNodesResponse::CopyFrom(const GetRandomNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetRandomNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomNodesResponse::IsInitialized() const {

  return true;
}

void GetRandomNodesResponse::Swap(GetRandomNodesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRandomNodesResponse::InternalSwap(GetRandomNodesResponse* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRandomNodesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRandomNodesResponse_descriptor_;
  metadata.reflection = GetRandomNodesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRandomNodesResponse

// repeated .iop.locnet.NodeInfo nodes = 1;
int GetRandomNodesResponse::nodes_size() const {
  return nodes_.size();
}
void GetRandomNodesResponse::clear_nodes() {
  nodes_.Clear();
}
const ::iop::locnet::NodeInfo& GetRandomNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetRandomNodesResponse.nodes)
  return nodes_.Get(index);
}
::iop::locnet::NodeInfo* GetRandomNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.GetRandomNodesResponse.nodes)
  return nodes_.Mutable(index);
}
::iop::locnet::NodeInfo* GetRandomNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:iop.locnet.GetRandomNodesResponse.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >*
GetRandomNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.GetRandomNodesResponse.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >&
GetRandomNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:iop.locnet.GetRandomNodesResponse.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClosestNodesByDistanceRequest::kLocationFieldNumber;
const int GetClosestNodesByDistanceRequest::kMaxRadiusKmFieldNumber;
const int GetClosestNodesByDistanceRequest::kMaxNodeCountFieldNumber;
const int GetClosestNodesByDistanceRequest::kIncludeNeighboursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClosestNodesByDistanceRequest::GetClosestNodesByDistanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetClosestNodesByDistanceRequest)
}

void GetClosestNodesByDistanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_ = const_cast< ::iop::locnet::GpsLocation*>(&::iop::locnet::GpsLocation::default_instance());
}

GetClosestNodesByDistanceRequest::GetClosestNodesByDistanceRequest(const GetClosestNodesByDistanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetClosestNodesByDistanceRequest)
}

void GetClosestNodesByDistanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_ = NULL;
  maxradiuskm_ = 0;
  maxnodecount_ = 0u;
  includeneighbours_ = false;
}

GetClosestNodesByDistanceRequest::~GetClosestNodesByDistanceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetClosestNodesByDistanceRequest)
  SharedDtor();
}

void GetClosestNodesByDistanceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void GetClosestNodesByDistanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClosestNodesByDistanceRequest_descriptor_;
}

const GetClosestNodesByDistanceRequest& GetClosestNodesByDistanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetClosestNodesByDistanceRequest* GetClosestNodesByDistanceRequest::default_instance_ = NULL;

GetClosestNodesByDistanceRequest* GetClosestNodesByDistanceRequest::New(::google::protobuf::Arena* arena) const {
  GetClosestNodesByDistanceRequest* n = new GetClosestNodesByDistanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClosestNodesByDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetClosestNodesByDistanceRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetClosestNodesByDistanceRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetClosestNodesByDistanceRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(maxradiuskm_, includeneighbours_);
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool GetClosestNodesByDistanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetClosestNodesByDistanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_maxRadiusKm;
        break;
      }

      // optional float maxRadiusKm = 2;
      case 2: {
        if (tag == 21) {
         parse_maxRadiusKm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxradiuskm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxNodeCount;
        break;
      }

      // optional uint32 maxNodeCount = 3;
      case 3: {
        if (tag == 24) {
         parse_maxNodeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnodecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_includeNeighbours;
        break;
      }

      // optional bool includeNeighbours = 4;
      case 4: {
        if (tag == 32) {
         parse_includeNeighbours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeneighbours_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetClosestNodesByDistanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetClosestNodesByDistanceRequest)
  return false;
#undef DO_
}

void GetClosestNodesByDistanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetClosestNodesByDistanceRequest)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional float maxRadiusKm = 2;
  if (this->maxradiuskm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxradiuskm(), output);
  }

  // optional uint32 maxNodeCount = 3;
  if (this->maxnodecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxnodecount(), output);
  }

  // optional bool includeNeighbours = 4;
  if (this->includeneighbours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->includeneighbours(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetClosestNodesByDistanceRequest)
}

::google::protobuf::uint8* GetClosestNodesByDistanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetClosestNodesByDistanceRequest)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional float maxRadiusKm = 2;
  if (this->maxradiuskm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxradiuskm(), target);
  }

  // optional uint32 maxNodeCount = 3;
  if (this->maxnodecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxnodecount(), target);
  }

  // optional bool includeNeighbours = 4;
  if (this->includeneighbours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->includeneighbours(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetClosestNodesByDistanceRequest)
  return target;
}

int GetClosestNodesByDistanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetClosestNodesByDistanceRequest)
  int total_size = 0;

  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional float maxRadiusKm = 2;
  if (this->maxradiuskm() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 maxNodeCount = 3;
  if (this->maxnodecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnodecount());
  }

  // optional bool includeNeighbours = 4;
  if (this->includeneighbours() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClosestNodesByDistanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetClosestNodesByDistanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClosestNodesByDistanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetClosestNodesByDistanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetClosestNodesByDistanceRequest)
    MergeFrom(*source);
  }
}

void GetClosestNodesByDistanceRequest::MergeFrom(const GetClosestNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
  if (from.maxradiuskm() != 0) {
    set_maxradiuskm(from.maxradiuskm());
  }
  if (from.maxnodecount() != 0) {
    set_maxnodecount(from.maxnodecount());
  }
  if (from.includeneighbours() != 0) {
    set_includeneighbours(from.includeneighbours());
  }
}

void GetClosestNodesByDistanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClosestNodesByDistanceRequest::CopyFrom(const GetClosestNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNodesByDistanceRequest::IsInitialized() const {

  return true;
}

void GetClosestNodesByDistanceRequest::Swap(GetClosestNodesByDistanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClosestNodesByDistanceRequest::InternalSwap(GetClosestNodesByDistanceRequest* other) {
  std::swap(location_, other->location_);
  std::swap(maxradiuskm_, other->maxradiuskm_);
  std::swap(maxnodecount_, other->maxnodecount_);
  std::swap(includeneighbours_, other->includeneighbours_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClosestNodesByDistanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClosestNodesByDistanceRequest_descriptor_;
  metadata.reflection = GetClosestNodesByDistanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClosestNodesByDistanceRequest

// optional .iop.locnet.GpsLocation location = 1;
bool GetClosestNodesByDistanceRequest::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void GetClosestNodesByDistanceRequest::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::iop::locnet::GpsLocation& GetClosestNodesByDistanceRequest::location() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetClosestNodesByDistanceRequest.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::iop::locnet::GpsLocation* GetClosestNodesByDistanceRequest::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::iop::locnet::GpsLocation;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.GetClosestNodesByDistanceRequest.location)
  return location_;
}
::iop::locnet::GpsLocation* GetClosestNodesByDistanceRequest::release_location() {
  // @@protoc_insertion_point(field_release:iop.locnet.GetClosestNodesByDistanceRequest.location)
  
  ::iop::locnet::GpsLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void GetClosestNodesByDistanceRequest::set_allocated_location(::iop::locnet::GpsLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.GetClosestNodesByDistanceRequest.location)
}

// optional float maxRadiusKm = 2;
void GetClosestNodesByDistanceRequest::clear_maxradiuskm() {
  maxradiuskm_ = 0;
}
 float GetClosestNodesByDistanceRequest::maxradiuskm() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetClosestNodesByDistanceRequest.maxRadiusKm)
  return maxradiuskm_;
}
 void GetClosestNodesByDistanceRequest::set_maxradiuskm(float value) {
  
  maxradiuskm_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetClosestNodesByDistanceRequest.maxRadiusKm)
}

// optional uint32 maxNodeCount = 3;
void GetClosestNodesByDistanceRequest::clear_maxnodecount() {
  maxnodecount_ = 0u;
}
 ::google::protobuf::uint32 GetClosestNodesByDistanceRequest::maxnodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetClosestNodesByDistanceRequest.maxNodeCount)
  return maxnodecount_;
}
 void GetClosestNodesByDistanceRequest::set_maxnodecount(::google::protobuf::uint32 value) {
  
  maxnodecount_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetClosestNodesByDistanceRequest.maxNodeCount)
}

// optional bool includeNeighbours = 4;
void GetClosestNodesByDistanceRequest::clear_includeneighbours() {
  includeneighbours_ = false;
}
 bool GetClosestNodesByDistanceRequest::includeneighbours() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetClosestNodesByDistanceRequest.includeNeighbours)
  return includeneighbours_;
}
 void GetClosestNodesByDistanceRequest::set_includeneighbours(bool value) {
  
  includeneighbours_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.GetClosestNodesByDistanceRequest.includeNeighbours)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClosestNodesByDistanceResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClosestNodesByDistanceResponse::GetClosestNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetClosestNodesByDistanceResponse)
}

void GetClosestNodesByDistanceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetClosestNodesByDistanceResponse::GetClosestNodesByDistanceResponse(const GetClosestNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetClosestNodesByDistanceResponse)
}

void GetClosestNodesByDistanceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetClosestNodesByDistanceResponse::~GetClosestNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetClosestNodesByDistanceResponse)
  SharedDtor();
}

void GetClosestNodesByDistanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetClosestNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClosestNodesByDistanceResponse_descriptor_;
}

const GetClosestNodesByDistanceResponse& GetClosestNodesByDistanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetClosestNodesByDistanceResponse* GetClosestNodesByDistanceResponse::default_instance_ = NULL;

GetClosestNodesByDistanceResponse* GetClosestNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  GetClosestNodesByDistanceResponse* n = new GetClosestNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClosestNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetClosestNodesByDistanceResponse)
  nodes_.Clear();
}

bool GetClosestNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetClosestNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetClosestNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetClosestNodesByDistanceResponse)
  return false;
#undef DO_
}

void GetClosestNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetClosestNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetClosestNodesByDistanceResponse)
}

::google::protobuf::uint8* GetClosestNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetClosestNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetClosestNodesByDistanceResponse)
  return target;
}

int GetClosestNodesByDistanceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetClosestNodesByDistanceResponse)
  int total_size = 0;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClosestNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetClosestNodesByDistanceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClosestNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetClosestNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetClosestNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void GetClosestNodesByDistanceResponse::MergeFrom(const GetClosestNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void GetClosestNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClosestNodesByDistanceResponse::CopyFrom(const GetClosestNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNodesByDistanceResponse::IsInitialized() const {

  return true;
}

void GetClosestNodesByDistanceResponse::Swap(GetClosestNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClosestNodesByDistanceResponse::InternalSwap(GetClosestNodesByDistanceResponse* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClosestNodesByDistanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClosestNodesByDistanceResponse_descriptor_;
  metadata.reflection = GetClosestNodesByDistanceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClosestNodesByDistanceResponse

// repeated .iop.locnet.NodeInfo nodes = 1;
int GetClosestNodesByDistanceResponse::nodes_size() const {
  return nodes_.size();
}
void GetClosestNodesByDistanceResponse::clear_nodes() {
  nodes_.Clear();
}
const ::iop::locnet::NodeInfo& GetClosestNodesByDistanceResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetClosestNodesByDistanceResponse.nodes)
  return nodes_.Get(index);
}
::iop::locnet::NodeInfo* GetClosestNodesByDistanceResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.GetClosestNodesByDistanceResponse.nodes)
  return nodes_.Mutable(index);
}
::iop::locnet::NodeInfo* GetClosestNodesByDistanceResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:iop.locnet.GetClosestNodesByDistanceResponse.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >*
GetClosestNodesByDistanceResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.GetClosestNodesByDistanceResponse.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >&
GetClosestNodesByDistanceResponse::nodes() const {
  // @@protoc_insertion_point(field_list:iop.locnet.GetClosestNodesByDistanceResponse.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRequest::kGetNodeInfoFieldNumber;
const int ClientRequest::kGetNeighbourNodesFieldNumber;
const int ClientRequest::kGetClosestNodesFieldNumber;
const int ClientRequest::kExploreNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRequest::ClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ClientRequest_default_oneof_instance_->getnodeinfo_ = const_cast< ::iop::locnet::GetNodeInfoRequest*>(&::iop::locnet::GetNodeInfoRequest::default_instance());
  ClientRequest_default_oneof_instance_->getneighbournodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceClientRequest*>(&::iop::locnet::GetNeighbourNodesByDistanceClientRequest::default_instance());
  ClientRequest_default_oneof_instance_->getclosestnodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceRequest*>(&::iop::locnet::GetClosestNodesByDistanceRequest::default_instance());
  ClientRequest_default_oneof_instance_->explorenodes_ = const_cast< ::iop::locnet::ExploreNetworkNodesByDistanceRequest*>(&::iop::locnet::ExploreNetworkNodesByDistanceRequest::default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ClientRequest)
}

void ClientRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_ClientRequestType();
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (has_ClientRequestType()) {
    clear_ClientRequestType();
  }
  if (this != default_instance_) {
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New(::google::protobuf::Arena* arena) const {
  ClientRequest* n = new ClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientRequest::clear_ClientRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.ClientRequest)
  switch(ClientRequestType_case()) {
    case kGetNodeInfo: {
      delete ClientRequestType_.getnodeinfo_;
      break;
    }
    case kGetNeighbourNodes: {
      delete ClientRequestType_.getneighbournodes_;
      break;
    }
    case kGetClosestNodes: {
      delete ClientRequestType_.getclosestnodes_;
      break;
    }
    case kExploreNodes: {
      delete ClientRequestType_.explorenodes_;
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIENTREQUESTTYPE_NOT_SET;
}


void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ClientRequest)
  clear_ClientRequestType();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getNeighbourNodes;
        break;
      }

      // optional .iop.locnet.GetNeighbourNodesByDistanceClientRequest getNeighbourNodes = 2;
      case 2: {
        if (tag == 18) {
         parse_getNeighbourNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getneighbournodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getClosestNodes;
        break;
      }

      // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 3;
      case 3: {
        if (tag == 26) {
         parse_getClosestNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getclosestnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exploreNodes;
        break;
      }

      // optional .iop.locnet.ExploreNetworkNodesByDistanceRequest exploreNodes = 4;
      case 4: {
        if (tag == 34) {
         parse_exploreNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_explorenodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ClientRequest)
  // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 1;
  if (has_getnodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ClientRequestType_.getnodeinfo_, output);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceClientRequest getNeighbourNodes = 2;
  if (has_getneighbournodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ClientRequestType_.getneighbournodes_, output);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 3;
  if (has_getclosestnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *ClientRequestType_.getclosestnodes_, output);
  }

  // optional .iop.locnet.ExploreNetworkNodesByDistanceRequest exploreNodes = 4;
  if (has_explorenodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ClientRequestType_.explorenodes_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.ClientRequest)
}

::google::protobuf::uint8* ClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ClientRequest)
  // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 1;
  if (has_getnodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *ClientRequestType_.getnodeinfo_, false, target);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceClientRequest getNeighbourNodes = 2;
  if (has_getneighbournodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *ClientRequestType_.getneighbournodes_, false, target);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 3;
  if (has_getclosestnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *ClientRequestType_.getclosestnodes_, false, target);
  }

  // optional .iop.locnet.ExploreNetworkNodesByDistanceRequest exploreNodes = 4;
  if (has_explorenodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *ClientRequestType_.explorenodes_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ClientRequest)
  return target;
}

int ClientRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ClientRequest)
  int total_size = 0;

  switch (ClientRequestType_case()) {
    // optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 1;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientRequestType_.getnodeinfo_);
      break;
    }
    // optional .iop.locnet.GetNeighbourNodesByDistanceClientRequest getNeighbourNodes = 2;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientRequestType_.getneighbournodes_);
      break;
    }
    // optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 3;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientRequestType_.getclosestnodes_);
      break;
    }
    // optional .iop.locnet.ExploreNetworkNodesByDistanceRequest exploreNodes = 4;
    case kExploreNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientRequestType_.explorenodes_);
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ClientRequest)
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ClientRequestType_case()) {
    case kGetNodeInfo: {
      mutable_getnodeinfo()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.getnodeinfo());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_getneighbournodes()->::iop::locnet::GetNeighbourNodesByDistanceClientRequest::MergeFrom(from.getneighbournodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_getclosestnodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.getclosestnodes());
      break;
    }
    case kExploreNodes: {
      mutable_explorenodes()->::iop::locnet::ExploreNetworkNodesByDistanceRequest::MergeFrom(from.explorenodes());
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {

  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRequest::InternalSwap(ClientRequest* other) {
  std::swap(ClientRequestType_, other->ClientRequestType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// optional .iop.locnet.GetNodeInfoRequest getNodeInfo = 1;
bool ClientRequest::has_getnodeinfo() const {
  return ClientRequestType_case() == kGetNodeInfo;
}
void ClientRequest::set_has_getnodeinfo() {
  _oneof_case_[0] = kGetNodeInfo;
}
void ClientRequest::clear_getnodeinfo() {
  if (has_getnodeinfo()) {
    delete ClientRequestType_.getnodeinfo_;
    clear_has_ClientRequestType();
  }
}
 const ::iop::locnet::GetNodeInfoRequest& ClientRequest::getnodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientRequest.getNodeInfo)
  return has_getnodeinfo()
      ? *ClientRequestType_.getnodeinfo_
      : ::iop::locnet::GetNodeInfoRequest::default_instance();
}
::iop::locnet::GetNodeInfoRequest* ClientRequest::mutable_getnodeinfo() {
  if (!has_getnodeinfo()) {
    clear_ClientRequestType();
    set_has_getnodeinfo();
    ClientRequestType_.getnodeinfo_ = new ::iop::locnet::GetNodeInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientRequest.getNodeInfo)
  return ClientRequestType_.getnodeinfo_;
}
::iop::locnet::GetNodeInfoRequest* ClientRequest::release_getnodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientRequest.getNodeInfo)
  if (has_getnodeinfo()) {
    clear_has_ClientRequestType();
    ::iop::locnet::GetNodeInfoRequest* temp = ClientRequestType_.getnodeinfo_;
    ClientRequestType_.getnodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientRequest::set_allocated_getnodeinfo(::iop::locnet::GetNodeInfoRequest* getnodeinfo) {
  clear_ClientRequestType();
  if (getnodeinfo) {
    set_has_getnodeinfo();
    ClientRequestType_.getnodeinfo_ = getnodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.getNodeInfo)
}

// optional .iop.locnet.GetNeighbourNodesByDistanceClientRequest getNeighbourNodes = 2;
bool ClientRequest::has_getneighbournodes() const {
  return ClientRequestType_case() == kGetNeighbourNodes;
}
void ClientRequest::set_has_getneighbournodes() {
  _oneof_case_[0] = kGetNeighbourNodes;
}
void ClientRequest::clear_getneighbournodes() {
  if (has_getneighbournodes()) {
    delete ClientRequestType_.getneighbournodes_;
    clear_has_ClientRequestType();
  }
}
 const ::iop::locnet::GetNeighbourNodesByDistanceClientRequest& ClientRequest::getneighbournodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientRequest.getNeighbourNodes)
  return has_getneighbournodes()
      ? *ClientRequestType_.getneighbournodes_
      : ::iop::locnet::GetNeighbourNodesByDistanceClientRequest::default_instance();
}
::iop::locnet::GetNeighbourNodesByDistanceClientRequest* ClientRequest::mutable_getneighbournodes() {
  if (!has_getneighbournodes()) {
    clear_ClientRequestType();
    set_has_getneighbournodes();
    ClientRequestType_.getneighbournodes_ = new ::iop::locnet::GetNeighbourNodesByDistanceClientRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientRequest.getNeighbourNodes)
  return ClientRequestType_.getneighbournodes_;
}
::iop::locnet::GetNeighbourNodesByDistanceClientRequest* ClientRequest::release_getneighbournodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientRequest.getNeighbourNodes)
  if (has_getneighbournodes()) {
    clear_has_ClientRequestType();
    ::iop::locnet::GetNeighbourNodesByDistanceClientRequest* temp = ClientRequestType_.getneighbournodes_;
    ClientRequestType_.getneighbournodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientRequest::set_allocated_getneighbournodes(::iop::locnet::GetNeighbourNodesByDistanceClientRequest* getneighbournodes) {
  clear_ClientRequestType();
  if (getneighbournodes) {
    set_has_getneighbournodes();
    ClientRequestType_.getneighbournodes_ = getneighbournodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.getNeighbourNodes)
}

// optional .iop.locnet.GetClosestNodesByDistanceRequest getClosestNodes = 3;
bool ClientRequest::has_getclosestnodes() const {
  return ClientRequestType_case() == kGetClosestNodes;
}
void ClientRequest::set_has_getclosestnodes() {
  _oneof_case_[0] = kGetClosestNodes;
}
void ClientRequest::clear_getclosestnodes() {
  if (has_getclosestnodes()) {
    delete ClientRequestType_.getclosestnodes_;
    clear_has_ClientRequestType();
  }
}
 const ::iop::locnet::GetClosestNodesByDistanceRequest& ClientRequest::getclosestnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientRequest.getClosestNodes)
  return has_getclosestnodes()
      ? *ClientRequestType_.getclosestnodes_
      : ::iop::locnet::GetClosestNodesByDistanceRequest::default_instance();
}
::iop::locnet::GetClosestNodesByDistanceRequest* ClientRequest::mutable_getclosestnodes() {
  if (!has_getclosestnodes()) {
    clear_ClientRequestType();
    set_has_getclosestnodes();
    ClientRequestType_.getclosestnodes_ = new ::iop::locnet::GetClosestNodesByDistanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientRequest.getClosestNodes)
  return ClientRequestType_.getclosestnodes_;
}
::iop::locnet::GetClosestNodesByDistanceRequest* ClientRequest::release_getclosestnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientRequest.getClosestNodes)
  if (has_getclosestnodes()) {
    clear_has_ClientRequestType();
    ::iop::locnet::GetClosestNodesByDistanceRequest* temp = ClientRequestType_.getclosestnodes_;
    ClientRequestType_.getclosestnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientRequest::set_allocated_getclosestnodes(::iop::locnet::GetClosestNodesByDistanceRequest* getclosestnodes) {
  clear_ClientRequestType();
  if (getclosestnodes) {
    set_has_getclosestnodes();
    ClientRequestType_.getclosestnodes_ = getclosestnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.getClosestNodes)
}

// optional .iop.locnet.ExploreNetworkNodesByDistanceRequest exploreNodes = 4;
bool ClientRequest::has_explorenodes() const {
  return ClientRequestType_case() == kExploreNodes;
}
void ClientRequest::set_has_explorenodes() {
  _oneof_case_[0] = kExploreNodes;
}
void ClientRequest::clear_explorenodes() {
  if (has_explorenodes()) {
    delete ClientRequestType_.explorenodes_;
    clear_has_ClientRequestType();
  }
}
 const ::iop::locnet::ExploreNetworkNodesByDistanceRequest& ClientRequest::explorenodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientRequest.exploreNodes)
  return has_explorenodes()
      ? *ClientRequestType_.explorenodes_
      : ::iop::locnet::ExploreNetworkNodesByDistanceRequest::default_instance();
}
::iop::locnet::ExploreNetworkNodesByDistanceRequest* ClientRequest::mutable_explorenodes() {
  if (!has_explorenodes()) {
    clear_ClientRequestType();
    set_has_explorenodes();
    ClientRequestType_.explorenodes_ = new ::iop::locnet::ExploreNetworkNodesByDistanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientRequest.exploreNodes)
  return ClientRequestType_.explorenodes_;
}
::iop::locnet::ExploreNetworkNodesByDistanceRequest* ClientRequest::release_explorenodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientRequest.exploreNodes)
  if (has_explorenodes()) {
    clear_has_ClientRequestType();
    ::iop::locnet::ExploreNetworkNodesByDistanceRequest* temp = ClientRequestType_.explorenodes_;
    ClientRequestType_.explorenodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientRequest::set_allocated_explorenodes(::iop::locnet::ExploreNetworkNodesByDistanceRequest* explorenodes) {
  clear_ClientRequestType();
  if (explorenodes) {
    set_has_explorenodes();
    ClientRequestType_.explorenodes_ = explorenodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.exploreNodes)
}

bool ClientRequest::has_ClientRequestType() const {
  return ClientRequestType_case() != CLIENTREQUESTTYPE_NOT_SET;
}
void ClientRequest::clear_has_ClientRequestType() {
  _oneof_case_[0] = CLIENTREQUESTTYPE_NOT_SET;
}
ClientRequest::ClientRequestTypeCase ClientRequest::ClientRequestType_case() const {
  return ClientRequest::ClientRequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientResponse::kGetNodeInfoFieldNumber;
const int ClientResponse::kGetNeighbourNodesFieldNumber;
const int ClientResponse::kGetClosestNodesFieldNumber;
const int ClientResponse::kExploreNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientResponse::ClientResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ClientResponse)
}

void ClientResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ClientResponse_default_oneof_instance_->getnodeinfo_ = const_cast< ::iop::locnet::GetNodeInfoResponse*>(&::iop::locnet::GetNodeInfoResponse::default_instance());
  ClientResponse_default_oneof_instance_->getneighbournodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceResponse*>(&::iop::locnet::GetNeighbourNodesByDistanceResponse::default_instance());
  ClientResponse_default_oneof_instance_->getclosestnodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceResponse*>(&::iop::locnet::GetClosestNodesByDistanceResponse::default_instance());
  ClientResponse_default_oneof_instance_->explorenodes_ = const_cast< ::iop::locnet::ExploreNetworkNodesByDistanceResponse*>(&::iop::locnet::ExploreNetworkNodesByDistanceResponse::default_instance());
}

ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ClientResponse)
}

void ClientResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_ClientResponseType();
}

ClientResponse::~ClientResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.ClientResponse)
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  if (has_ClientResponseType()) {
    clear_ClientResponseType();
  }
  if (this != default_instance_) {
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResponse_descriptor_;
}

const ClientResponse& ClientResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

ClientResponse* ClientResponse::default_instance_ = NULL;

ClientResponse* ClientResponse::New(::google::protobuf::Arena* arena) const {
  ClientResponse* n = new ClientResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientResponse::clear_ClientResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.ClientResponse)
  switch(ClientResponseType_case()) {
    case kGetNodeInfo: {
      delete ClientResponseType_.getnodeinfo_;
      break;
    }
    case kGetNeighbourNodes: {
      delete ClientResponseType_.getneighbournodes_;
      break;
    }
    case kGetClosestNodes: {
      delete ClientResponseType_.getclosestnodes_;
      break;
    }
    case kExploreNodes: {
      delete ClientResponseType_.explorenodes_;
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIENTRESPONSETYPE_NOT_SET;
}


void ClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ClientResponse)
  clear_ClientResponseType();
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getNeighbourNodes;
        break;
      }

      // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 2;
      case 2: {
        if (tag == 18) {
         parse_getNeighbourNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getneighbournodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getClosestNodes;
        break;
      }

      // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 3;
      case 3: {
        if (tag == 26) {
         parse_getClosestNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getclosestnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exploreNodes;
        break;
      }

      // optional .iop.locnet.ExploreNetworkNodesByDistanceResponse exploreNodes = 4;
      case 4: {
        if (tag == 34) {
         parse_exploreNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_explorenodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ClientResponse)
  return false;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ClientResponse)
  // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 1;
  if (has_getnodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ClientResponseType_.getnodeinfo_, output);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 2;
  if (has_getneighbournodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ClientResponseType_.getneighbournodes_, output);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 3;
  if (has_getclosestnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *ClientResponseType_.getclosestnodes_, output);
  }

  // optional .iop.locnet.ExploreNetworkNodesByDistanceResponse exploreNodes = 4;
  if (has_explorenodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ClientResponseType_.explorenodes_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.ClientResponse)
}

::google::protobuf::uint8* ClientResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ClientResponse)
  // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 1;
  if (has_getnodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *ClientResponseType_.getnodeinfo_, false, target);
  }

  // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 2;
  if (has_getneighbournodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *ClientResponseType_.getneighbournodes_, false, target);
  }

  // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 3;
  if (has_getclosestnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *ClientResponseType_.getclosestnodes_, false, target);
  }

  // optional .iop.locnet.ExploreNetworkNodesByDistanceResponse exploreNodes = 4;
  if (has_explorenodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *ClientResponseType_.explorenodes_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ClientResponse)
  return target;
}

int ClientResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ClientResponse)
  int total_size = 0;

  switch (ClientResponseType_case()) {
    // optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 1;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientResponseType_.getnodeinfo_);
      break;
    }
    // optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 2;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientResponseType_.getneighbournodes_);
      break;
    }
    // optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 3;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientResponseType_.getclosestnodes_);
      break;
    }
    // optional .iop.locnet.ExploreNetworkNodesByDistanceResponse exploreNodes = 4;
    case kExploreNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ClientResponseType_.explorenodes_);
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ClientResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ClientResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ClientResponse)
    MergeFrom(*source);
  }
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ClientResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.ClientResponseType_case()) {
    case kGetNodeInfo: {
      mutable_getnodeinfo()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.getnodeinfo());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_getneighbournodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.getneighbournodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_getclosestnodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.getclosestnodes());
      break;
    }
    case kExploreNodes: {
      mutable_explorenodes()->::iop::locnet::ExploreNetworkNodesByDistanceResponse::MergeFrom(from.explorenodes());
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void ClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {

  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientResponse::InternalSwap(ClientResponse* other) {
  std::swap(ClientResponseType_, other->ClientResponseType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResponse_descriptor_;
  metadata.reflection = ClientResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientResponse

// optional .iop.locnet.GetNodeInfoResponse getNodeInfo = 1;
bool ClientResponse::has_getnodeinfo() const {
  return ClientResponseType_case() == kGetNodeInfo;
}
void ClientResponse::set_has_getnodeinfo() {
  _oneof_case_[0] = kGetNodeInfo;
}
void ClientResponse::clear_getnodeinfo() {
  if (has_getnodeinfo()) {
    delete ClientResponseType_.getnodeinfo_;
    clear_has_ClientResponseType();
  }
}
 const ::iop::locnet::GetNodeInfoResponse& ClientResponse::getnodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientResponse.getNodeInfo)
  return has_getnodeinfo()
      ? *ClientResponseType_.getnodeinfo_
      : ::iop::locnet::GetNodeInfoResponse::default_instance();
}
::iop::locnet::GetNodeInfoResponse* ClientResponse::mutable_getnodeinfo() {
  if (!has_getnodeinfo()) {
    clear_ClientResponseType();
    set_has_getnodeinfo();
    ClientResponseType_.getnodeinfo_ = new ::iop::locnet::GetNodeInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientResponse.getNodeInfo)
  return ClientResponseType_.getnodeinfo_;
}
::iop::locnet::GetNodeInfoResponse* ClientResponse::release_getnodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientResponse.getNodeInfo)
  if (has_getnodeinfo()) {
    clear_has_ClientResponseType();
    ::iop::locnet::GetNodeInfoResponse* temp = ClientResponseType_.getnodeinfo_;
    ClientResponseType_.getnodeinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientResponse::set_allocated_getnodeinfo(::iop::locnet::GetNodeInfoResponse* getnodeinfo) {
  clear_ClientResponseType();
  if (getnodeinfo) {
    set_has_getnodeinfo();
    ClientResponseType_.getnodeinfo_ = getnodeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.getNodeInfo)
}

// optional .iop.locnet.GetNeighbourNodesByDistanceResponse getNeighbourNodes = 2;
bool ClientResponse::has_getneighbournodes() const {
  return ClientResponseType_case() == kGetNeighbourNodes;
}
void ClientResponse::set_has_getneighbournodes() {
  _oneof_case_[0] = kGetNeighbourNodes;
}
void ClientResponse::clear_getneighbournodes() {
  if (has_getneighbournodes()) {
    delete ClientResponseType_.getneighbournodes_;
    clear_has_ClientResponseType();
  }
}
 const ::iop::locnet::GetNeighbourNodesByDistanceResponse& ClientResponse::getneighbournodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientResponse.getNeighbourNodes)
  return has_getneighbournodes()
      ? *ClientResponseType_.getneighbournodes_
      : ::iop::locnet::GetNeighbourNodesByDistanceResponse::default_instance();
}
::iop::locnet::GetNeighbourNodesByDistanceResponse* ClientResponse::mutable_getneighbournodes() {
  if (!has_getneighbournodes()) {
    clear_ClientResponseType();
    set_has_getneighbournodes();
    ClientResponseType_.getneighbournodes_ = new ::iop::locnet::GetNeighbourNodesByDistanceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientResponse.getNeighbourNodes)
  return ClientResponseType_.getneighbournodes_;
}
::iop::locnet::GetNeighbourNodesByDistanceResponse* ClientResponse::release_getneighbournodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientResponse.getNeighbourNodes)
  if (has_getneighbournodes()) {
    clear_has_ClientResponseType();
    ::iop::locnet::GetNeighbourNodesByDistanceResponse* temp = ClientResponseType_.getneighbournodes_;
    ClientResponseType_.getneighbournodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientResponse::set_allocated_getneighbournodes(::iop::locnet::GetNeighbourNodesByDistanceResponse* getneighbournodes) {
  clear_ClientResponseType();
  if (getneighbournodes) {
    set_has_getneighbournodes();
    ClientResponseType_.getneighbournodes_ = getneighbournodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.getNeighbourNodes)
}

// optional .iop.locnet.GetClosestNodesByDistanceResponse getClosestNodes = 3;
bool ClientResponse::has_getclosestnodes() const {
  return ClientResponseType_case() == kGetClosestNodes;
}
void ClientResponse::set_has_getclosestnodes() {
  _oneof_case_[0] = kGetClosestNodes;
}
void ClientResponse::clear_getclosestnodes() {
  if (has_getclosestnodes()) {
    delete ClientResponseType_.getclosestnodes_;
    clear_has_ClientResponseType();
  }
}
 const ::iop::locnet::GetClosestNodesByDistanceResponse& ClientResponse::getclosestnodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientResponse.getClosestNodes)
  return has_getclosestnodes()
      ? *ClientResponseType_.getclosestnodes_
      : ::iop::locnet::GetClosestNodesByDistanceResponse::default_instance();
}
::iop::locnet::GetClosestNodesByDistanceResponse* ClientResponse::mutable_getclosestnodes() {
  if (!has_getclosestnodes()) {
    clear_ClientResponseType();
    set_has_getclosestnodes();
    ClientResponseType_.getclosestnodes_ = new ::iop::locnet::GetClosestNodesByDistanceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientResponse.getClosestNodes)
  return ClientResponseType_.getclosestnodes_;
}
::iop::locnet::GetClosestNodesByDistanceResponse* ClientResponse::release_getclosestnodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientResponse.getClosestNodes)
  if (has_getclosestnodes()) {
    clear_has_ClientResponseType();
    ::iop::locnet::GetClosestNodesByDistanceResponse* temp = ClientResponseType_.getclosestnodes_;
    ClientResponseType_.getclosestnodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientResponse::set_allocated_getclosestnodes(::iop::locnet::GetClosestNodesByDistanceResponse* getclosestnodes) {
  clear_ClientResponseType();
  if (getclosestnodes) {
    set_has_getclosestnodes();
    ClientResponseType_.getclosestnodes_ = getclosestnodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.getClosestNodes)
}

// optional .iop.locnet.ExploreNetworkNodesByDistanceResponse exploreNodes = 4;
bool ClientResponse::has_explorenodes() const {
  return ClientResponseType_case() == kExploreNodes;
}
void ClientResponse::set_has_explorenodes() {
  _oneof_case_[0] = kExploreNodes;
}
void ClientResponse::clear_explorenodes() {
  if (has_explorenodes()) {
    delete ClientResponseType_.explorenodes_;
    clear_has_ClientResponseType();
  }
}
 const ::iop::locnet::ExploreNetworkNodesByDistanceResponse& ClientResponse::explorenodes() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ClientResponse.exploreNodes)
  return has_explorenodes()
      ? *ClientResponseType_.explorenodes_
      : ::iop::locnet::ExploreNetworkNodesByDistanceResponse::default_instance();
}
::iop::locnet::ExploreNetworkNodesByDistanceResponse* ClientResponse::mutable_explorenodes() {
  if (!has_explorenodes()) {
    clear_ClientResponseType();
    set_has_explorenodes();
    ClientResponseType_.explorenodes_ = new ::iop::locnet::ExploreNetworkNodesByDistanceResponse;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ClientResponse.exploreNodes)
  return ClientResponseType_.explorenodes_;
}
::iop::locnet::ExploreNetworkNodesByDistanceResponse* ClientResponse::release_explorenodes() {
  // @@protoc_insertion_point(field_release:iop.locnet.ClientResponse.exploreNodes)
  if (has_explorenodes()) {
    clear_has_ClientResponseType();
    ::iop::locnet::ExploreNetworkNodesByDistanceResponse* temp = ClientResponseType_.explorenodes_;
    ClientResponseType_.explorenodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientResponse::set_allocated_explorenodes(::iop::locnet::ExploreNetworkNodesByDistanceResponse* explorenodes) {
  clear_ClientResponseType();
  if (explorenodes) {
    set_has_explorenodes();
    ClientResponseType_.explorenodes_ = explorenodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.exploreNodes)
}

bool ClientResponse::has_ClientResponseType() const {
  return ClientResponseType_case() != CLIENTRESPONSETYPE_NOT_SET;
}
void ClientResponse::clear_has_ClientResponseType() {
  _oneof_case_[0] = CLIENTRESPONSETYPE_NOT_SET;
}
ClientResponse::ClientResponseTypeCase ClientResponse::ClientResponseType_case() const {
  return ClientResponse::ClientResponseTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoRequest::GetNodeInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeInfoRequest)
}

void GetNodeInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNodeInfoRequest::GetNodeInfoRequest(const GetNodeInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeInfoRequest)
}

void GetNodeInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetNodeInfoRequest::~GetNodeInfoRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeInfoRequest)
  SharedDtor();
}

void GetNodeInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeInfoRequest_descriptor_;
}

const GetNodeInfoRequest& GetNodeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNodeInfoRequest* GetNodeInfoRequest::default_instance_ = NULL;

GetNodeInfoRequest* GetNodeInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoRequest* n = new GetNodeInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeInfoRequest)
}

bool GetNodeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeInfoRequest)
  return false;
#undef DO_
}

void GetNodeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeInfoRequest)
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeInfoRequest)
}

::google::protobuf::uint8* GetNodeInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeInfoRequest)
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeInfoRequest)
  return target;
}

int GetNodeInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeInfoRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNodeInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeInfoRequest)
    MergeFrom(*source);
  }
}

void GetNodeInfoRequest::MergeFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetNodeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoRequest::CopyFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoRequest::IsInitialized() const {

  return true;
}

void GetNodeInfoRequest::Swap(GetNodeInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoRequest::InternalSwap(GetNodeInfoRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeInfoRequest_descriptor_;
  metadata.reflection = GetNodeInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInfoResponse::kNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoResponse::GetNodeInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeInfoResponse)
}

void GetNodeInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  nodeinfo_ = const_cast< ::iop::locnet::NodeInfo*>(&::iop::locnet::NodeInfo::default_instance());
}

GetNodeInfoResponse::GetNodeInfoResponse(const GetNodeInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeInfoResponse)
}

void GetNodeInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nodeinfo_ = NULL;
}

GetNodeInfoResponse::~GetNodeInfoResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeInfoResponse)
  SharedDtor();
}

void GetNodeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete nodeinfo_;
  }
}

void GetNodeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeInfoResponse_descriptor_;
}

const GetNodeInfoResponse& GetNodeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNodeInfoResponse* GetNodeInfoResponse::default_instance_ = NULL;

GetNodeInfoResponse* GetNodeInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoResponse* n = new GetNodeInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeInfoResponse)
  if (GetArenaNoVirtual() == NULL && nodeinfo_ != NULL) delete nodeinfo_;
  nodeinfo_ = NULL;
}

bool GetNodeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.NodeInfo nodeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeInfoResponse)
  return false;
#undef DO_
}

void GetNodeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeInfoResponse)
  // optional .iop.locnet.NodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nodeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeInfoResponse)
}

::google::protobuf::uint8* GetNodeInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeInfoResponse)
  // optional .iop.locnet.NodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nodeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeInfoResponse)
  return target;
}

int GetNodeInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeInfoResponse)
  int total_size = 0;

  // optional .iop.locnet.NodeInfo nodeInfo = 1;
  if (this->has_nodeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nodeinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNodeInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeInfoResponse)
    MergeFrom(*source);
  }
}

void GetNodeInfoResponse::MergeFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_nodeinfo()) {
    mutable_nodeinfo()->::iop::locnet::NodeInfo::MergeFrom(from.nodeinfo());
  }
}

void GetNodeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoResponse::CopyFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoResponse::IsInitialized() const {

  return true;
}

void GetNodeInfoResponse::Swap(GetNodeInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoResponse::InternalSwap(GetNodeInfoResponse* other) {
  std::swap(nodeinfo_, other->nodeinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeInfoResponse_descriptor_;
  metadata.reflection = GetNodeInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInfoResponse

// optional .iop.locnet.NodeInfo nodeInfo = 1;
bool GetNodeInfoResponse::has_nodeinfo() const {
  return !_is_default_instance_ && nodeinfo_ != NULL;
}
void GetNodeInfoResponse::clear_nodeinfo() {
  if (GetArenaNoVirtual() == NULL && nodeinfo_ != NULL) delete nodeinfo_;
  nodeinfo_ = NULL;
}
const ::iop::locnet::NodeInfo& GetNodeInfoResponse::nodeinfo() const {
  // @@protoc_insertion_point(field_get:iop.locnet.GetNodeInfoResponse.nodeInfo)
  return nodeinfo_ != NULL ? *nodeinfo_ : *default_instance_->nodeinfo_;
}
::iop::locnet::NodeInfo* GetNodeInfoResponse::mutable_nodeinfo() {
  
  if (nodeinfo_ == NULL) {
    nodeinfo_ = new ::iop::locnet::NodeInfo;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.GetNodeInfoResponse.nodeInfo)
  return nodeinfo_;
}
::iop::locnet::NodeInfo* GetNodeInfoResponse::release_nodeinfo() {
  // @@protoc_insertion_point(field_release:iop.locnet.GetNodeInfoResponse.nodeInfo)
  
  ::iop::locnet::NodeInfo* temp = nodeinfo_;
  nodeinfo_ = NULL;
  return temp;
}
void GetNodeInfoResponse::set_allocated_nodeinfo(::iop::locnet::NodeInfo* nodeinfo) {
  delete nodeinfo_;
  nodeinfo_ = nodeinfo;
  if (nodeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.GetNodeInfoResponse.nodeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceClientRequest::GetNeighbourNodesByDistanceClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

void GetNeighbourNodesByDistanceClientRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetNeighbourNodesByDistanceClientRequest::GetNeighbourNodesByDistanceClientRequest(const GetNeighbourNodesByDistanceClientRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

void GetNeighbourNodesByDistanceClientRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetNeighbourNodesByDistanceClientRequest::~GetNeighbourNodesByDistanceClientRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  SharedDtor();
}

void GetNeighbourNodesByDistanceClientRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNeighbourNodesByDistanceClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNeighbourNodesByDistanceClientRequest_descriptor_;
}

const GetNeighbourNodesByDistanceClientRequest& GetNeighbourNodesByDistanceClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

GetNeighbourNodesByDistanceClientRequest* GetNeighbourNodesByDistanceClientRequest::default_instance_ = NULL;

GetNeighbourNodesByDistanceClientRequest* GetNeighbourNodesByDistanceClientRequest::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceClientRequest* n = new GetNeighbourNodesByDistanceClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

bool GetNeighbourNodesByDistanceClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return target;
}

int GetNeighbourNodesByDistanceClientRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetNeighbourNodesByDistanceClientRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceClientRequest::MergeFrom(const GetNeighbourNodesByDistanceClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetNeighbourNodesByDistanceClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceClientRequest::CopyFrom(const GetNeighbourNodesByDistanceClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceClientRequest::IsInitialized() const {

  return true;
}

void GetNeighbourNodesByDistanceClientRequest::Swap(GetNeighbourNodesByDistanceClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceClientRequest::InternalSwap(GetNeighbourNodesByDistanceClientRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNeighbourNodesByDistanceClientRequest_descriptor_;
  metadata.reflection = GetNeighbourNodesByDistanceClientRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNeighbourNodesByDistanceClientRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExploreNetworkNodesByDistanceRequest::kLocationFieldNumber;
const int ExploreNetworkNodesByDistanceRequest::kTargetNodeCountFieldNumber;
const int ExploreNetworkNodesByDistanceRequest::kMaxNodeHopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExploreNetworkNodesByDistanceRequest::ExploreNetworkNodesByDistanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}

void ExploreNetworkNodesByDistanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_ = const_cast< ::iop::locnet::GpsLocation*>(&::iop::locnet::GpsLocation::default_instance());
}

ExploreNetworkNodesByDistanceRequest::ExploreNetworkNodesByDistanceRequest(const ExploreNetworkNodesByDistanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}

void ExploreNetworkNodesByDistanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  location_ = NULL;
  targetnodecount_ = 0u;
  maxnodehops_ = 0u;
}

ExploreNetworkNodesByDistanceRequest::~ExploreNetworkNodesByDistanceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  SharedDtor();
}

void ExploreNetworkNodesByDistanceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void ExploreNetworkNodesByDistanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploreNetworkNodesByDistanceRequest_descriptor_;
}

const ExploreNetworkNodesByDistanceRequest& ExploreNetworkNodesByDistanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

ExploreNetworkNodesByDistanceRequest* ExploreNetworkNodesByDistanceRequest::default_instance_ = NULL;

ExploreNetworkNodesByDistanceRequest* ExploreNetworkNodesByDistanceRequest::New(::google::protobuf::Arena* arena) const {
  ExploreNetworkNodesByDistanceRequest* n = new ExploreNetworkNodesByDistanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExploreNetworkNodesByDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExploreNetworkNodesByDistanceRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExploreNetworkNodesByDistanceRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(targetnodecount_, maxnodehops_);
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ExploreNetworkNodesByDistanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetNodeCount;
        break;
      }

      // optional uint32 targetNodeCount = 2;
      case 2: {
        if (tag == 16) {
         parse_targetNodeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetnodecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxNodeHops;
        break;
      }

      // optional uint32 maxNodeHops = 3;
      case 3: {
        if (tag == 24) {
         parse_maxNodeHops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnodehops_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return false;
#undef DO_
}

void ExploreNetworkNodesByDistanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional uint32 targetNodeCount = 2;
  if (this->targetnodecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetnodecount(), output);
  }

  // optional uint32 maxNodeHops = 3;
  if (this->maxnodehops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxnodehops(), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}

::google::protobuf::uint8* ExploreNetworkNodesByDistanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional uint32 targetNodeCount = 2;
  if (this->targetnodecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetnodecount(), target);
  }

  // optional uint32 maxNodeHops = 3;
  if (this->maxnodehops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxnodehops(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return target;
}

int ExploreNetworkNodesByDistanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  int total_size = 0;

  // optional .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional uint32 targetNodeCount = 2;
  if (this->targetnodecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetnodecount());
  }

  // optional uint32 maxNodeHops = 3;
  if (this->maxnodehops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnodehops());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreNetworkNodesByDistanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExploreNetworkNodesByDistanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExploreNetworkNodesByDistanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ExploreNetworkNodesByDistanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ExploreNetworkNodesByDistanceRequest)
    MergeFrom(*source);
  }
}

void ExploreNetworkNodesByDistanceRequest::MergeFrom(const ExploreNetworkNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
  if (from.targetnodecount() != 0) {
    set_targetnodecount(from.targetnodecount());
  }
  if (from.maxnodehops() != 0) {
    set_maxnodehops(from.maxnodehops());
  }
}

void ExploreNetworkNodesByDistanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploreNetworkNodesByDistanceRequest::CopyFrom(const ExploreNetworkNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreNetworkNodesByDistanceRequest::IsInitialized() const {

  return true;
}

void ExploreNetworkNodesByDistanceRequest::Swap(ExploreNetworkNodesByDistanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExploreNetworkNodesByDistanceRequest::InternalSwap(ExploreNetworkNodesByDistanceRequest* other) {
  std::swap(location_, other->location_);
  std::swap(targetnodecount_, other->targetnodecount_);
  std::swap(maxnodehops_, other->maxnodehops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExploreNetworkNodesByDistanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploreNetworkNodesByDistanceRequest_descriptor_;
  metadata.reflection = ExploreNetworkNodesByDistanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExploreNetworkNodesByDistanceRequest

// optional .iop.locnet.GpsLocation location = 1;
bool ExploreNetworkNodesByDistanceRequest::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void ExploreNetworkNodesByDistanceRequest::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::iop::locnet::GpsLocation& ExploreNetworkNodesByDistanceRequest::location() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ExploreNetworkNodesByDistanceRequest.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::iop::locnet::GpsLocation* ExploreNetworkNodesByDistanceRequest::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::iop::locnet::GpsLocation;
  }
  // @@protoc_insertion_point(field_mutable:iop.locnet.ExploreNetworkNodesByDistanceRequest.location)
  return location_;
}
::iop::locnet::GpsLocation* ExploreNetworkNodesByDistanceRequest::release_location() {
  // @@protoc_insertion_point(field_release:iop.locnet.ExploreNetworkNodesByDistanceRequest.location)
  
  ::iop::locnet::GpsLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void ExploreNetworkNodesByDistanceRequest::set_allocated_location(::iop::locnet::GpsLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ExploreNetworkNodesByDistanceRequest.location)
}

// optional uint32 targetNodeCount = 2;
void ExploreNetworkNodesByDistanceRequest::clear_targetnodecount() {
  targetnodecount_ = 0u;
}
 ::google::protobuf::uint32 ExploreNetworkNodesByDistanceRequest::targetnodecount() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ExploreNetworkNodesByDistanceRequest.targetNodeCount)
  return targetnodecount_;
}
 void ExploreNetworkNodesByDistanceRequest::set_targetnodecount(::google::protobuf::uint32 value) {
  
  targetnodecount_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.ExploreNetworkNodesByDistanceRequest.targetNodeCount)
}

// optional uint32 maxNodeHops = 3;
void ExploreNetworkNodesByDistanceRequest::clear_maxnodehops() {
  maxnodehops_ = 0u;
}
 ::google::protobuf::uint32 ExploreNetworkNodesByDistanceRequest::maxnodehops() const {
  // @@protoc_insertion_point(field_get:iop.locnet.ExploreNetworkNodesByDistanceRequest.maxNodeHops)
  return maxnodehops_;
}
 void ExploreNetworkNodesByDistanceRequest::set_maxnodehops(::google::protobuf::uint32 value) {
  
  maxnodehops_ = value;
  // @@protoc_insertion_point(field_set:iop.locnet.ExploreNetworkNodesByDistanceRequest.maxNodeHops)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExploreNetworkNodesByDistanceResponse::kClosestNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExploreNetworkNodesByDistanceResponse::ExploreNetworkNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}

void ExploreNetworkNodesByDistanceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExploreNetworkNodesByDistanceResponse::ExploreNetworkNodesByDistanceResponse(const ExploreNetworkNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}

void ExploreNetworkNodesByDistanceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExploreNetworkNodesByDistanceResponse::~ExploreNetworkNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  SharedDtor();
}

void ExploreNetworkNodesByDistanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExploreNetworkNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploreNetworkNodesByDistanceResponse_descriptor_;
}

const ExploreNetworkNodesByDistanceResponse& ExploreNetworkNodesByDistanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IopLocNet_2eproto();
  return *default_instance_;
}

ExploreNetworkNodesByDistanceResponse* ExploreNetworkNodesByDistanceResponse::default_instance_ = NULL;

ExploreNetworkNodesByDistanceResponse* ExploreNetworkNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  ExploreNetworkNodesByDistanceResponse* n = new ExploreNetworkNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExploreNetworkNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  closestnodes_.Clear();
}

bool ExploreNetworkNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo closestNodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_closestNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_closestnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_closestNodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return false;
#undef DO_
}

void ExploreNetworkNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo closestNodes = 1;
  for (unsigned int i = 0, n = this->closestnodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->closestnodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}

::google::protobuf::uint8* ExploreNetworkNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  // repeated .iop.locnet.NodeInfo closestNodes = 1;
  for (unsigned int i = 0, n = this->closestnodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->closestnodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return target;
}

int ExploreNetworkNodesByDistanceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  int total_size = 0;

  // repeated .iop.locnet.NodeInfo closestNodes = 1;
  total_size += 1 * this->closestnodes_size();
  for (int i = 0; i < this->closestnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closestnodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreNetworkNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExploreNetworkNodesByDistanceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExploreNetworkNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ExploreNetworkNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ExploreNetworkNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void ExploreNetworkNodesByDistanceResponse::MergeFrom(const ExploreNetworkNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  closestnodes_.MergeFrom(from.closestnodes_);
}

void ExploreNetworkNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploreNetworkNodesByDistanceResponse::CopyFrom(const ExploreNetworkNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreNetworkNodesByDistanceResponse::IsInitialized() const {

  return true;
}

void ExploreNetworkNodesByDistanceResponse::Swap(ExploreNetworkNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExploreNetworkNodesByDistanceResponse::InternalSwap(ExploreNetworkNodesByDistanceResponse* other) {
  closestnodes_.UnsafeArenaSwap(&other->closestnodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExploreNetworkNodesByDistanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploreNetworkNodesByDistanceResponse_descriptor_;
  metadata.reflection = ExploreNetworkNodesByDistanceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExploreNetworkNodesByDistanceResponse

// repeated .iop.locnet.NodeInfo closestNodes = 1;
int ExploreNetworkNodesByDistanceResponse::closestnodes_size() const {
  return closestnodes_.size();
}
void ExploreNetworkNodesByDistanceResponse::clear_closestnodes() {
  closestnodes_.Clear();
}
const ::iop::locnet::NodeInfo& ExploreNetworkNodesByDistanceResponse::closestnodes(int index) const {
  // @@protoc_insertion_point(field_get:iop.locnet.ExploreNetworkNodesByDistanceResponse.closestNodes)
  return closestnodes_.Get(index);
}
::iop::locnet::NodeInfo* ExploreNetworkNodesByDistanceResponse::mutable_closestnodes(int index) {
  // @@protoc_insertion_point(field_mutable:iop.locnet.ExploreNetworkNodesByDistanceResponse.closestNodes)
  return closestnodes_.Mutable(index);
}
::iop::locnet::NodeInfo* ExploreNetworkNodesByDistanceResponse::add_closestnodes() {
  // @@protoc_insertion_point(field_add:iop.locnet.ExploreNetworkNodesByDistanceResponse.closestNodes)
  return closestnodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >*
ExploreNetworkNodesByDistanceResponse::mutable_closestnodes() {
  // @@protoc_insertion_point(field_mutable_list:iop.locnet.ExploreNetworkNodesByDistanceResponse.closestNodes)
  return &closestnodes_;
}
const ::google::protobuf::RepeatedPtrField< ::iop::locnet::NodeInfo >&
ExploreNetworkNodesByDistanceResponse::closestnodes() const {
  // @@protoc_insertion_point(field_list:iop.locnet.ExploreNetworkNodesByDistanceResponse.closestNodes)
  return closestnodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace locnet
}  // namespace iop

// @@protoc_insertion_point(global_scope)
