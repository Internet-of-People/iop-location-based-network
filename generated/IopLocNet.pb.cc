// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopLocNet.proto

#include "IopLocNet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace iop {
namespace locnet {
class ServiceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceInfo>
      _instance;
} _ServiceInfo_default_instance_;
class GpsLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpsLocation>
      _instance;
} _GpsLocation_default_instance_;
class NodeContactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeContact>
      _instance;
} _NodeContact_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo>
      _instance;
} _NodeInfo_default_instance_;
class MessageWithHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageWithHeader>
      _instance;
} _MessageWithHeader_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::iop::locnet::Request* request_;
  const ::iop::locnet::Response* response_;
} _Message_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
  const ::iop::locnet::LocalServiceRequest* local_service_;
  const ::iop::locnet::RemoteNodeRequest* remote_node_;
  const ::iop::locnet::ClientRequest* client_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
  const ::iop::locnet::LocalServiceResponse* local_service_;
  const ::iop::locnet::RemoteNodeResponse* remote_node_;
  const ::iop::locnet::ClientResponse* client_;
} _Response_default_instance_;
class LocalServiceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalServiceRequest>
      _instance;
  const ::iop::locnet::RegisterServiceRequest* register_service_;
  const ::iop::locnet::DeregisterServiceRequest* deregister_service_;
  const ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* get_neighbour_nodes_;
  const ::iop::locnet::NeighbourhoodChangedNotificationRequest* neighbourhood_changed_;
  const ::iop::locnet::GetNodeInfoRequest* get_node_info_;
} _LocalServiceRequest_default_instance_;
class LocalServiceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalServiceResponse>
      _instance;
  const ::iop::locnet::RegisterServiceResponse* register_service_;
  const ::iop::locnet::DeregisterServiceResponse* deregister_service_;
  const ::iop::locnet::GetNeighbourNodesByDistanceResponse* get_neighbour_nodes_;
  const ::iop::locnet::NeighbourhoodChangedNotificationResponse* neighbourhood_updated_;
  const ::iop::locnet::GetNodeInfoResponse* get_node_info_;
} _LocalServiceResponse_default_instance_;
class RegisterServiceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterServiceRequest>
      _instance;
} _RegisterServiceRequest_default_instance_;
class RegisterServiceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterServiceResponse>
      _instance;
} _RegisterServiceResponse_default_instance_;
class DeregisterServiceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeregisterServiceRequest>
      _instance;
} _DeregisterServiceRequest_default_instance_;
class DeregisterServiceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeregisterServiceResponse>
      _instance;
} _DeregisterServiceResponse_default_instance_;
class GetNeighbourNodesByDistanceLocalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNeighbourNodesByDistanceLocalRequest>
      _instance;
} _GetNeighbourNodesByDistanceLocalRequest_default_instance_;
class GetNeighbourNodesByDistanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNeighbourNodesByDistanceResponse>
      _instance;
} _GetNeighbourNodesByDistanceResponse_default_instance_;
class NeighbourhoodChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighbourhoodChange>
      _instance;
  const ::iop::locnet::NodeInfo* added_node_info_;
  const ::iop::locnet::NodeInfo* updated_node_info_;
  ::google::protobuf::internal::ArenaStringPtr removed_node_id_;
} _NeighbourhoodChange_default_instance_;
class NeighbourhoodChangedNotificationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighbourhoodChangedNotificationRequest>
      _instance;
} _NeighbourhoodChangedNotificationRequest_default_instance_;
class NeighbourhoodChangedNotificationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighbourhoodChangedNotificationResponse>
      _instance;
} _NeighbourhoodChangedNotificationResponse_default_instance_;
class RemoteNodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteNodeRequest>
      _instance;
  const ::iop::locnet::BuildNetworkRequest* accept_colleague_;
  const ::iop::locnet::BuildNetworkRequest* renew_colleague_;
  const ::iop::locnet::BuildNetworkRequest* accept_neighbour_;
  const ::iop::locnet::BuildNetworkRequest* renew_neighbour_;
  const ::iop::locnet::GetNodeCountRequest* get_node_count_;
  const ::iop::locnet::GetRandomNodesRequest* get_random_nodes_;
  const ::iop::locnet::GetClosestNodesByDistanceRequest* get_closest_nodes_;
  const ::iop::locnet::GetNodeInfoRequest* get_node_info_;
} _RemoteNodeRequest_default_instance_;
class RemoteNodeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteNodeResponse>
      _instance;
  const ::iop::locnet::BuildNetworkResponse* accept_colleague_;
  const ::iop::locnet::BuildNetworkResponse* renew_colleague_;
  const ::iop::locnet::BuildNetworkResponse* accept_neighbour_;
  const ::iop::locnet::BuildNetworkResponse* renew_neighbour_;
  const ::iop::locnet::GetNodeCountResponse* get_node_count_;
  const ::iop::locnet::GetRandomNodesResponse* get_random_nodes_;
  const ::iop::locnet::GetClosestNodesByDistanceResponse* get_closest_nodes_;
  const ::iop::locnet::GetNodeInfoResponse* get_node_info_;
} _RemoteNodeResponse_default_instance_;
class BuildNetworkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuildNetworkRequest>
      _instance;
} _BuildNetworkRequest_default_instance_;
class BuildNetworkResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuildNetworkResponse>
      _instance;
} _BuildNetworkResponse_default_instance_;
class GetNodeCountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeCountRequest>
      _instance;
} _GetNodeCountRequest_default_instance_;
class GetNodeCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeCountResponse>
      _instance;
} _GetNodeCountResponse_default_instance_;
class GetRandomNodesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRandomNodesRequest>
      _instance;
} _GetRandomNodesRequest_default_instance_;
class GetRandomNodesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRandomNodesResponse>
      _instance;
} _GetRandomNodesResponse_default_instance_;
class GetClosestNodesByDistanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetClosestNodesByDistanceRequest>
      _instance;
} _GetClosestNodesByDistanceRequest_default_instance_;
class GetClosestNodesByDistanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetClosestNodesByDistanceResponse>
      _instance;
} _GetClosestNodesByDistanceResponse_default_instance_;
class ClientRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientRequest>
      _instance;
  const ::iop::locnet::GetNodeInfoRequest* get_node_info_;
  const ::iop::locnet::GetNeighbourNodesByDistanceClientRequest* get_neighbour_nodes_;
  const ::iop::locnet::GetClosestNodesByDistanceRequest* get_closest_nodes_;
  const ::iop::locnet::ExploreNetworkNodesByDistanceRequest* explore_nodes_;
  const ::iop::locnet::GetRandomNodesRequest* get_random_nodes_;
} _ClientRequest_default_instance_;
class ClientResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientResponse>
      _instance;
  const ::iop::locnet::GetNodeInfoResponse* get_node_info_;
  const ::iop::locnet::GetNeighbourNodesByDistanceResponse* get_neighbour_nodes_;
  const ::iop::locnet::GetClosestNodesByDistanceResponse* get_closest_nodes_;
  const ::iop::locnet::ExploreNetworkNodesByDistanceResponse* explore_nodes_;
  const ::iop::locnet::GetRandomNodesResponse* get_random_nodes_;
} _ClientResponse_default_instance_;
class GetNodeInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInfoRequest>
      _instance;
} _GetNodeInfoRequest_default_instance_;
class GetNodeInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInfoResponse>
      _instance;
} _GetNodeInfoResponse_default_instance_;
class GetNeighbourNodesByDistanceClientRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNeighbourNodesByDistanceClientRequest>
      _instance;
} _GetNeighbourNodesByDistanceClientRequest_default_instance_;
class ExploreNetworkNodesByDistanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExploreNetworkNodesByDistanceRequest>
      _instance;
} _ExploreNetworkNodesByDistanceRequest_default_instance_;
class ExploreNetworkNodesByDistanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExploreNetworkNodesByDistanceResponse>
      _instance;
} _ExploreNetworkNodesByDistanceResponse_default_instance_;
}  // namespace locnet
}  // namespace iop
namespace protobuf_IopLocNet_2eproto {
void InitDefaultsServiceInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_ServiceInfo_default_instance_;
    new (ptr) ::iop::locnet::ServiceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::ServiceInfo::InitAsDefaultInstance();
}

void InitDefaultsServiceInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceInfoImpl);
}

void InitDefaultsGpsLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GpsLocation_default_instance_;
    new (ptr) ::iop::locnet::GpsLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GpsLocation::InitAsDefaultInstance();
}

void InitDefaultsGpsLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGpsLocationImpl);
}

void InitDefaultsNodeContactImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_NodeContact_default_instance_;
    new (ptr) ::iop::locnet::NodeContact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::NodeContact::InitAsDefaultInstance();
}

void InitDefaultsNodeContact() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeContactImpl);
}

void InitDefaultsNodeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeContact();
  protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  protobuf_IopLocNet_2eproto::InitDefaultsServiceInfo();
  {
    void* ptr = &::iop::locnet::_NodeInfo_default_instance_;
    new (ptr) ::iop::locnet::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::NodeInfo::InitAsDefaultInstance();
}

void InitDefaultsNodeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeInfoImpl);
}

void InitDefaultsMessageWithHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsMessage();
  {
    void* ptr = &::iop::locnet::_MessageWithHeader_default_instance_;
    new (ptr) ::iop::locnet::MessageWithHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::MessageWithHeader::InitAsDefaultInstance();
}

void InitDefaultsMessageWithHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageWithHeaderImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsResponse();
  {
    void* ptr = &::iop::locnet::_Message_default_instance_;
    new (ptr) ::iop::locnet::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

void InitDefaultsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsClientRequest();
  {
    void* ptr = &::iop::locnet::_Request_default_instance_;
    new (ptr) ::iop::locnet::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::Request::InitAsDefaultInstance();
}

void InitDefaultsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestImpl);
}

void InitDefaultsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsClientResponse();
  {
    void* ptr = &::iop::locnet::_Response_default_instance_;
    new (ptr) ::iop::locnet::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::Response::InitAsDefaultInstance();
}

void InitDefaultsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseImpl);
}

void InitDefaultsLocalServiceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceLocalRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoRequest();
  {
    void* ptr = &::iop::locnet::_LocalServiceRequest_default_instance_;
    new (ptr) ::iop::locnet::LocalServiceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::LocalServiceRequest::InitAsDefaultInstance();
}

void InitDefaultsLocalServiceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalServiceRequestImpl);
}

void InitDefaultsLocalServiceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoResponse();
  {
    void* ptr = &::iop::locnet::_LocalServiceResponse_default_instance_;
    new (ptr) ::iop::locnet::LocalServiceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::LocalServiceResponse::InitAsDefaultInstance();
}

void InitDefaultsLocalServiceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalServiceResponseImpl);
}

void InitDefaultsRegisterServiceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsServiceInfo();
  {
    void* ptr = &::iop::locnet::_RegisterServiceRequest_default_instance_;
    new (ptr) ::iop::locnet::RegisterServiceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::RegisterServiceRequest::InitAsDefaultInstance();
}

void InitDefaultsRegisterServiceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegisterServiceRequestImpl);
}

void InitDefaultsRegisterServiceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  {
    void* ptr = &::iop::locnet::_RegisterServiceResponse_default_instance_;
    new (ptr) ::iop::locnet::RegisterServiceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::RegisterServiceResponse::InitAsDefaultInstance();
}

void InitDefaultsRegisterServiceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegisterServiceResponseImpl);
}

void InitDefaultsDeregisterServiceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_DeregisterServiceRequest_default_instance_;
    new (ptr) ::iop::locnet::DeregisterServiceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::DeregisterServiceRequest::InitAsDefaultInstance();
}

void InitDefaultsDeregisterServiceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeregisterServiceRequestImpl);
}

void InitDefaultsDeregisterServiceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_DeregisterServiceResponse_default_instance_;
    new (ptr) ::iop::locnet::DeregisterServiceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::DeregisterServiceResponse::InitAsDefaultInstance();
}

void InitDefaultsDeregisterServiceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeregisterServiceResponseImpl);
}

void InitDefaultsGetNeighbourNodesByDistanceLocalRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetNeighbourNodesByDistanceLocalRequest_default_instance_;
    new (ptr) ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::InitAsDefaultInstance();
}

void InitDefaultsGetNeighbourNodesByDistanceLocalRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNeighbourNodesByDistanceLocalRequestImpl);
}

void InitDefaultsGetNeighbourNodesByDistanceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_GetNeighbourNodesByDistanceResponse_default_instance_;
    new (ptr) ::iop::locnet::GetNeighbourNodesByDistanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNeighbourNodesByDistanceResponse::InitAsDefaultInstance();
}

void InitDefaultsGetNeighbourNodesByDistanceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNeighbourNodesByDistanceResponseImpl);
}

void InitDefaultsNeighbourhoodChangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_NeighbourhoodChange_default_instance_;
    new (ptr) ::iop::locnet::NeighbourhoodChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::NeighbourhoodChange::InitAsDefaultInstance();
}

void InitDefaultsNeighbourhoodChange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeighbourhoodChangeImpl);
}

void InitDefaultsNeighbourhoodChangedNotificationRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChange();
  {
    void* ptr = &::iop::locnet::_NeighbourhoodChangedNotificationRequest_default_instance_;
    new (ptr) ::iop::locnet::NeighbourhoodChangedNotificationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::NeighbourhoodChangedNotificationRequest::InitAsDefaultInstance();
}

void InitDefaultsNeighbourhoodChangedNotificationRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeighbourhoodChangedNotificationRequestImpl);
}

void InitDefaultsNeighbourhoodChangedNotificationResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_NeighbourhoodChangedNotificationResponse_default_instance_;
    new (ptr) ::iop::locnet::NeighbourhoodChangedNotificationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::NeighbourhoodChangedNotificationResponse::InitAsDefaultInstance();
}

void InitDefaultsNeighbourhoodChangedNotificationResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNeighbourhoodChangedNotificationResponseImpl);
}

void InitDefaultsRemoteNodeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoRequest();
  {
    void* ptr = &::iop::locnet::_RemoteNodeRequest_default_instance_;
    new (ptr) ::iop::locnet::RemoteNodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::RemoteNodeRequest::InitAsDefaultInstance();
}

void InitDefaultsRemoteNodeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRemoteNodeRequestImpl);
}

void InitDefaultsRemoteNodeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoResponse();
  {
    void* ptr = &::iop::locnet::_RemoteNodeResponse_default_instance_;
    new (ptr) ::iop::locnet::RemoteNodeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::RemoteNodeResponse::InitAsDefaultInstance();
}

void InitDefaultsRemoteNodeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRemoteNodeResponseImpl);
}

void InitDefaultsBuildNetworkRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_BuildNetworkRequest_default_instance_;
    new (ptr) ::iop::locnet::BuildNetworkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::BuildNetworkRequest::InitAsDefaultInstance();
}

void InitDefaultsBuildNetworkRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBuildNetworkRequestImpl);
}

void InitDefaultsBuildNetworkResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_BuildNetworkResponse_default_instance_;
    new (ptr) ::iop::locnet::BuildNetworkResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::BuildNetworkResponse::InitAsDefaultInstance();
}

void InitDefaultsBuildNetworkResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBuildNetworkResponseImpl);
}

void InitDefaultsGetNodeCountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetNodeCountRequest_default_instance_;
    new (ptr) ::iop::locnet::GetNodeCountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNodeCountRequest::InitAsDefaultInstance();
}

void InitDefaultsGetNodeCountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNodeCountRequestImpl);
}

void InitDefaultsGetNodeCountResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetNodeCountResponse_default_instance_;
    new (ptr) ::iop::locnet::GetNodeCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNodeCountResponse::InitAsDefaultInstance();
}

void InitDefaultsGetNodeCountResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNodeCountResponseImpl);
}

void InitDefaultsGetRandomNodesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetRandomNodesRequest_default_instance_;
    new (ptr) ::iop::locnet::GetRandomNodesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetRandomNodesRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRandomNodesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRandomNodesRequestImpl);
}

void InitDefaultsGetRandomNodesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_GetRandomNodesResponse_default_instance_;
    new (ptr) ::iop::locnet::GetRandomNodesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetRandomNodesResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRandomNodesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRandomNodesResponseImpl);
}

void InitDefaultsGetClosestNodesByDistanceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  {
    void* ptr = &::iop::locnet::_GetClosestNodesByDistanceRequest_default_instance_;
    new (ptr) ::iop::locnet::GetClosestNodesByDistanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetClosestNodesByDistanceRequest::InitAsDefaultInstance();
}

void InitDefaultsGetClosestNodesByDistanceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetClosestNodesByDistanceRequestImpl);
}

void InitDefaultsGetClosestNodesByDistanceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_GetClosestNodesByDistanceResponse_default_instance_;
    new (ptr) ::iop::locnet::GetClosestNodesByDistanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetClosestNodesByDistanceResponse::InitAsDefaultInstance();
}

void InitDefaultsGetClosestNodesByDistanceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetClosestNodesByDistanceResponseImpl);
}

void InitDefaultsClientRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceClientRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceRequest();
  protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesRequest();
  {
    void* ptr = &::iop::locnet::_ClientRequest_default_instance_;
    new (ptr) ::iop::locnet::ClientRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::ClientRequest::InitAsDefaultInstance();
}

void InitDefaultsClientRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientRequestImpl);
}

void InitDefaultsClientResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceResponse();
  protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesResponse();
  {
    void* ptr = &::iop::locnet::_ClientResponse_default_instance_;
    new (ptr) ::iop::locnet::ClientResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::ClientResponse::InitAsDefaultInstance();
}

void InitDefaultsClientResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientResponseImpl);
}

void InitDefaultsGetNodeInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetNodeInfoRequest_default_instance_;
    new (ptr) ::iop::locnet::GetNodeInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNodeInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsGetNodeInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNodeInfoRequestImpl);
}

void InitDefaultsGetNodeInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_GetNodeInfoResponse_default_instance_;
    new (ptr) ::iop::locnet::GetNodeInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNodeInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsGetNodeInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNodeInfoResponseImpl);
}

void InitDefaultsGetNeighbourNodesByDistanceClientRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iop::locnet::_GetNeighbourNodesByDistanceClientRequest_default_instance_;
    new (ptr) ::iop::locnet::GetNeighbourNodesByDistanceClientRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::GetNeighbourNodesByDistanceClientRequest::InitAsDefaultInstance();
}

void InitDefaultsGetNeighbourNodesByDistanceClientRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetNeighbourNodesByDistanceClientRequestImpl);
}

void InitDefaultsExploreNetworkNodesByDistanceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  {
    void* ptr = &::iop::locnet::_ExploreNetworkNodesByDistanceRequest_default_instance_;
    new (ptr) ::iop::locnet::ExploreNetworkNodesByDistanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::ExploreNetworkNodesByDistanceRequest::InitAsDefaultInstance();
}

void InitDefaultsExploreNetworkNodesByDistanceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExploreNetworkNodesByDistanceRequestImpl);
}

void InitDefaultsExploreNetworkNodesByDistanceResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::iop::locnet::_ExploreNetworkNodesByDistanceResponse_default_instance_;
    new (ptr) ::iop::locnet::ExploreNetworkNodesByDistanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iop::locnet::ExploreNetworkNodesByDistanceResponse::InitAsDefaultInstance();
}

void InitDefaultsExploreNetworkNodesByDistanceResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExploreNetworkNodesByDistanceResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[36];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ServiceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ServiceInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ServiceInfo, service_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GpsLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GpsLocation, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GpsLocation, longitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeContact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeContact, ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeContact, node_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeContact, client_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeInfo, contact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NodeInfo, services_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::MessageWithHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::MessageWithHeader, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::MessageWithHeader, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Message, id_),
  offsetof(::iop::locnet::MessageDefaultTypeInternal, request_),
  offsetof(::iop::locnet::MessageDefaultTypeInternal, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Message, MessageType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Request, version_),
  offsetof(::iop::locnet::RequestDefaultTypeInternal, local_service_),
  offsetof(::iop::locnet::RequestDefaultTypeInternal, remote_node_),
  offsetof(::iop::locnet::RequestDefaultTypeInternal, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Request, RequestType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, details_),
  offsetof(::iop::locnet::ResponseDefaultTypeInternal, local_service_),
  offsetof(::iop::locnet::ResponseDefaultTypeInternal, remote_node_),
  offsetof(::iop::locnet::ResponseDefaultTypeInternal, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::Response, ResponseType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::LocalServiceRequestDefaultTypeInternal, register_service_),
  offsetof(::iop::locnet::LocalServiceRequestDefaultTypeInternal, deregister_service_),
  offsetof(::iop::locnet::LocalServiceRequestDefaultTypeInternal, get_neighbour_nodes_),
  offsetof(::iop::locnet::LocalServiceRequestDefaultTypeInternal, neighbourhood_changed_),
  offsetof(::iop::locnet::LocalServiceRequestDefaultTypeInternal, get_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceRequest, LocalServiceRequestType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::LocalServiceResponseDefaultTypeInternal, register_service_),
  offsetof(::iop::locnet::LocalServiceResponseDefaultTypeInternal, deregister_service_),
  offsetof(::iop::locnet::LocalServiceResponseDefaultTypeInternal, get_neighbour_nodes_),
  offsetof(::iop::locnet::LocalServiceResponseDefaultTypeInternal, neighbourhood_updated_),
  offsetof(::iop::locnet::LocalServiceResponseDefaultTypeInternal, get_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::LocalServiceResponse, LocalServiceResponseType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RegisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RegisterServiceRequest, service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RegisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RegisterServiceResponse, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::DeregisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::DeregisterServiceRequest, service_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::DeregisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNeighbourNodesByDistanceLocalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNeighbourNodesByDistanceLocalRequest, keep_alive_and_send_updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNeighbourNodesByDistanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNeighbourNodesByDistanceResponse, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChange, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::NeighbourhoodChangeDefaultTypeInternal, added_node_info_),
  offsetof(::iop::locnet::NeighbourhoodChangeDefaultTypeInternal, updated_node_info_),
  offsetof(::iop::locnet::NeighbourhoodChangeDefaultTypeInternal, removed_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChange, ChangeType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChangedNotificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChangedNotificationRequest, changes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::NeighbourhoodChangedNotificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, accept_colleague_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, renew_colleague_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, accept_neighbour_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, renew_neighbour_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, get_node_count_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, get_random_nodes_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, get_closest_nodes_),
  offsetof(::iop::locnet::RemoteNodeRequestDefaultTypeInternal, get_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeRequest, RemoteNodeRequestType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, accept_colleague_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, renew_colleague_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, accept_neighbour_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, renew_neighbour_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, get_node_count_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, get_random_nodes_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, get_closest_nodes_),
  offsetof(::iop::locnet::RemoteNodeResponseDefaultTypeInternal, get_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::RemoteNodeResponse, RemoteNodeResponseType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkRequest, requestor_node_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkResponse, accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkResponse, acceptor_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::BuildNetworkResponse, remote_ip_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeCountResponse, node_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetRandomNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetRandomNodesRequest, max_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetRandomNodesRequest, include_neighbours_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetRandomNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetRandomNodesResponse, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceRequest, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceRequest, max_radius_km_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceRequest, max_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceRequest, include_neighbours_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetClosestNodesByDistanceResponse, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::ClientRequestDefaultTypeInternal, get_node_info_),
  offsetof(::iop::locnet::ClientRequestDefaultTypeInternal, get_neighbour_nodes_),
  offsetof(::iop::locnet::ClientRequestDefaultTypeInternal, get_closest_nodes_),
  offsetof(::iop::locnet::ClientRequestDefaultTypeInternal, explore_nodes_),
  offsetof(::iop::locnet::ClientRequestDefaultTypeInternal, get_random_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientRequest, ClientRequestType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::iop::locnet::ClientResponseDefaultTypeInternal, get_node_info_),
  offsetof(::iop::locnet::ClientResponseDefaultTypeInternal, get_neighbour_nodes_),
  offsetof(::iop::locnet::ClientResponseDefaultTypeInternal, get_closest_nodes_),
  offsetof(::iop::locnet::ClientResponseDefaultTypeInternal, explore_nodes_),
  offsetof(::iop::locnet::ClientResponseDefaultTypeInternal, get_random_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ClientResponse, ClientResponseType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNodeInfoResponse, node_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::GetNeighbourNodesByDistanceClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceRequest, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceRequest, target_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceRequest, max_node_hops_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iop::locnet::ExploreNetworkNodesByDistanceResponse, closest_nodes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iop::locnet::ServiceInfo)},
  { 8, -1, sizeof(::iop::locnet::GpsLocation)},
  { 15, -1, sizeof(::iop::locnet::NodeContact)},
  { 23, -1, sizeof(::iop::locnet::NodeInfo)},
  { 32, -1, sizeof(::iop::locnet::MessageWithHeader)},
  { 39, -1, sizeof(::iop::locnet::Message)},
  { 48, -1, sizeof(::iop::locnet::Request)},
  { 58, -1, sizeof(::iop::locnet::Response)},
  { 70, -1, sizeof(::iop::locnet::LocalServiceRequest)},
  { 81, -1, sizeof(::iop::locnet::LocalServiceResponse)},
  { 92, -1, sizeof(::iop::locnet::RegisterServiceRequest)},
  { 98, -1, sizeof(::iop::locnet::RegisterServiceResponse)},
  { 104, -1, sizeof(::iop::locnet::DeregisterServiceRequest)},
  { 110, -1, sizeof(::iop::locnet::DeregisterServiceResponse)},
  { 115, -1, sizeof(::iop::locnet::GetNeighbourNodesByDistanceLocalRequest)},
  { 121, -1, sizeof(::iop::locnet::GetNeighbourNodesByDistanceResponse)},
  { 127, -1, sizeof(::iop::locnet::NeighbourhoodChange)},
  { 136, -1, sizeof(::iop::locnet::NeighbourhoodChangedNotificationRequest)},
  { 142, -1, sizeof(::iop::locnet::NeighbourhoodChangedNotificationResponse)},
  { 147, -1, sizeof(::iop::locnet::RemoteNodeRequest)},
  { 161, -1, sizeof(::iop::locnet::RemoteNodeResponse)},
  { 175, -1, sizeof(::iop::locnet::BuildNetworkRequest)},
  { 181, -1, sizeof(::iop::locnet::BuildNetworkResponse)},
  { 189, -1, sizeof(::iop::locnet::GetNodeCountRequest)},
  { 194, -1, sizeof(::iop::locnet::GetNodeCountResponse)},
  { 200, -1, sizeof(::iop::locnet::GetRandomNodesRequest)},
  { 207, -1, sizeof(::iop::locnet::GetRandomNodesResponse)},
  { 213, -1, sizeof(::iop::locnet::GetClosestNodesByDistanceRequest)},
  { 222, -1, sizeof(::iop::locnet::GetClosestNodesByDistanceResponse)},
  { 228, -1, sizeof(::iop::locnet::ClientRequest)},
  { 239, -1, sizeof(::iop::locnet::ClientResponse)},
  { 250, -1, sizeof(::iop::locnet::GetNodeInfoRequest)},
  { 255, -1, sizeof(::iop::locnet::GetNodeInfoResponse)},
  { 261, -1, sizeof(::iop::locnet::GetNeighbourNodesByDistanceClientRequest)},
  { 266, -1, sizeof(::iop::locnet::ExploreNetworkNodesByDistanceRequest)},
  { 274, -1, sizeof(::iop::locnet::ExploreNetworkNodesByDistanceResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_ServiceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GpsLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_NodeContact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_MessageWithHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_LocalServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_LocalServiceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_RegisterServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_RegisterServiceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_DeregisterServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_DeregisterServiceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNeighbourNodesByDistanceLocalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNeighbourNodesByDistanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_NeighbourhoodChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_NeighbourhoodChangedNotificationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_NeighbourhoodChangedNotificationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_RemoteNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_RemoteNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_BuildNetworkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_BuildNetworkResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNodeCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNodeCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetRandomNodesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetRandomNodesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetClosestNodesByDistanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetClosestNodesByDistanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_ClientRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_ClientResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNodeInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNodeInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_GetNeighbourNodesByDistanceClientRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_ExploreNetworkNodesByDistanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iop::locnet::_ExploreNetworkNodesByDistanceResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "IopLocNet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017IopLocNet.proto\022\niop.locnet\"\?\n\013Service"
      "Info\022\014\n\004type\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\024\n\014serv"
      "ice_data\030\003 \001(\014\"2\n\013GpsLocation\022\020\n\010latitud"
      "e\030\001 \001(\017\022\021\n\tlongitude\030\002 \001(\017\"I\n\013NodeContac"
      "t\022\022\n\nip_address\030\001 \001(\014\022\021\n\tnode_port\030\002 \001(\r"
      "\022\023\n\013client_port\030\003 \001(\r\"\233\001\n\010NodeInfo\022\017\n\007no"
      "de_id\030\001 \001(\014\022(\n\007contact\030\002 \001(\0132\027.iop.locne"
      "t.NodeContact\022)\n\010location\030\003 \001(\0132\027.iop.lo"
      "cnet.GpsLocation\022)\n\010services\030  \003(\0132\027.iop"
      ".locnet.ServiceInfo\"F\n\021MessageWithHeader"
      "\022\016\n\006header\030\001 \001(\007\022!\n\004body\030\002 \001(\0132\023.iop.loc"
      "net.Message\"v\n\007Message\022\n\n\002id\030\001 \001(\r\022&\n\007re"
      "quest\030\002 \001(\0132\023.iop.locnet.RequestH\000\022(\n\010re"
      "sponse\030\003 \001(\0132\024.iop.locnet.ResponseH\000B\r\n\013"
      "MessageType\"\306\001\n\007Request\022\017\n\007version\030\001 \001(\014"
      "\0228\n\rlocal_service\030\002 \001(\0132\037.iop.locnet.Loc"
      "alServiceRequestH\000\0224\n\013remote_node\030\003 \001(\0132"
      "\035.iop.locnet.RemoteNodeRequestH\000\022+\n\006clie"
      "nt\030\004 \001(\0132\031.iop.locnet.ClientRequestH\000B\r\n"
      "\013RequestType\"\202\002\n\010Response\022\"\n\006status\030\001 \001("
      "\0162\022.iop.locnet.Status\022\021\n\ttimestamp\030\002 \001(\022"
      "\022\017\n\007details\030\003 \001(\t\0229\n\rlocal_service\030\004 \001(\013"
      "2 .iop.locnet.LocalServiceResponseH\000\0225\n\013"
      "remote_node\030\005 \001(\0132\036.iop.locnet.RemoteNod"
      "eResponseH\000\022,\n\006client\030\006 \001(\0132\032.iop.locnet"
      ".ClientResponseH\000B\016\n\014ResponseType\"\227\003\n\023Lo"
      "calServiceRequest\022>\n\020register_service\030\001 "
      "\001(\0132\".iop.locnet.RegisterServiceRequestH"
      "\000\022B\n\022deregister_service\030\002 \001(\0132$.iop.locn"
      "et.DeregisterServiceRequestH\000\022R\n\023get_nei"
      "ghbour_nodes\030\003 \001(\01323.iop.locnet.GetNeigh"
      "bourNodesByDistanceLocalRequestH\000\022T\n\025nei"
      "ghbourhood_changed\030\004 \001(\01323.iop.locnet.Ne"
      "ighbourhoodChangedNotificationRequestH\000\022"
      "7\n\rget_node_info\030\005 \001(\0132\036.iop.locnet.GetN"
      "odeInfoRequestH\000B\031\n\027LocalServiceRequestT"
      "ype\"\231\003\n\024LocalServiceResponse\022\?\n\020register"
      "_service\030\001 \001(\0132#.iop.locnet.RegisterServ"
      "iceResponseH\000\022C\n\022deregister_service\030\002 \001("
      "\0132%.iop.locnet.DeregisterServiceResponse"
      "H\000\022N\n\023get_neighbour_nodes\030\003 \001(\0132/.iop.lo"
      "cnet.GetNeighbourNodesByDistanceResponse"
      "H\000\022U\n\025neighbourhood_updated\030\004 \001(\01324.iop."
      "locnet.NeighbourhoodChangedNotificationR"
      "esponseH\000\0228\n\rget_node_info\030\005 \001(\0132\037.iop.l"
      "ocnet.GetNodeInfoResponseH\000B\032\n\030LocalServ"
      "iceResponseType\"B\n\026RegisterServiceReques"
      "t\022(\n\007service\030\001 \001(\0132\027.iop.locnet.ServiceI"
      "nfo\"D\n\027RegisterServiceResponse\022)\n\010locati"
      "on\030\001 \001(\0132\027.iop.locnet.GpsLocation\"0\n\030Der"
      "egisterServiceRequest\022\024\n\014service_type\030\001 "
      "\001(\t\"\033\n\031DeregisterServiceResponse\"N\n\'GetN"
      "eighbourNodesByDistanceLocalRequest\022#\n\033k"
      "eep_alive_and_send_updates\030\001 \001(\010\"J\n#GetN"
      "eighbourNodesByDistanceResponse\022#\n\005nodes"
      "\030\001 \003(\0132\024.iop.locnet.NodeInfo\"\242\001\n\023Neighbo"
      "urhoodChange\022/\n\017added_node_info\030\001 \001(\0132\024."
      "iop.locnet.NodeInfoH\000\0221\n\021updated_node_in"
      "fo\030\002 \001(\0132\024.iop.locnet.NodeInfoH\000\022\031\n\017remo"
      "ved_node_id\030\003 \001(\014H\000B\014\n\nChangeType\"[\n\'Nei"
      "ghbourhoodChangedNotificationRequest\0220\n\007"
      "changes\030\001 \003(\0132\037.iop.locnet.Neighbourhood"
      "Change\"*\n(NeighbourhoodChangedNotificati"
      "onResponse\"\234\004\n\021RemoteNodeRequest\022;\n\020acce"
      "pt_colleague\030\001 \001(\0132\037.iop.locnet.BuildNet"
      "workRequestH\000\022:\n\017renew_colleague\030\002 \001(\0132\037"
      ".iop.locnet.BuildNetworkRequestH\000\022;\n\020acc"
      "ept_neighbour\030\003 \001(\0132\037.iop.locnet.BuildNe"
      "tworkRequestH\000\022:\n\017renew_neighbour\030\004 \001(\0132"
      "\037.iop.locnet.BuildNetworkRequestH\000\0229\n\016ge"
      "t_node_count\030\005 \001(\0132\037.iop.locnet.GetNodeC"
      "ountRequestH\000\022=\n\020get_random_nodes\030\006 \001(\0132"
      "!.iop.locnet.GetRandomNodesRequestH\000\022I\n\021"
      "get_closest_nodes\030\007 \001(\0132,.iop.locnet.Get"
      "ClosestNodesByDistanceRequestH\000\0227\n\rget_n"
      "ode_info\030\010 \001(\0132\036.iop.locnet.GetNodeInfoR"
      "equestH\000B\027\n\025RemoteNodeRequestType\"\246\004\n\022Re"
      "moteNodeResponse\022<\n\020accept_colleague\030\001 \001"
      "(\0132 .iop.locnet.BuildNetworkResponseH\000\022;"
      "\n\017renew_colleague\030\002 \001(\0132 .iop.locnet.Bui"
      "ldNetworkResponseH\000\022<\n\020accept_neighbour\030"
      "\003 \001(\0132 .iop.locnet.BuildNetworkResponseH"
      "\000\022;\n\017renew_neighbour\030\004 \001(\0132 .iop.locnet."
      "BuildNetworkResponseH\000\022:\n\016get_node_count"
      "\030\005 \001(\0132 .iop.locnet.GetNodeCountResponse"
      "H\000\022>\n\020get_random_nodes\030\006 \001(\0132\".iop.locne"
      "t.GetRandomNodesResponseH\000\022J\n\021get_closes"
      "t_nodes\030\007 \001(\0132-.iop.locnet.GetClosestNod"
      "esByDistanceResponseH\000\0228\n\rget_node_info\030"
      "\010 \001(\0132\037.iop.locnet.GetNodeInfoResponseH\000"
      "B\030\n\026RemoteNodeResponseType\"H\n\023BuildNetwo"
      "rkRequest\0221\n\023requestor_node_info\030\001 \001(\0132\024"
      ".iop.locnet.NodeInfo\"u\n\024BuildNetworkResp"
      "onse\022\020\n\010accepted\030\001 \001(\010\0220\n\022acceptor_node_"
      "info\030\002 \001(\0132\024.iop.locnet.NodeInfo\022\031\n\021remo"
      "te_ip_address\030\003 \001(\014\"\025\n\023GetNodeCountReque"
      "st\"*\n\024GetNodeCountResponse\022\022\n\nnode_count"
      "\030\001 \001(\r\"K\n\025GetRandomNodesRequest\022\026\n\016max_n"
      "ode_count\030\001 \001(\r\022\032\n\022include_neighbours\030\002 "
      "\001(\010\"=\n\026GetRandomNodesResponse\022#\n\005nodes\030\001"
      " \003(\0132\024.iop.locnet.NodeInfo\"\230\001\n GetCloses"
      "tNodesByDistanceRequest\022)\n\010location\030\001 \001("
      "\0132\027.iop.locnet.GpsLocation\022\025\n\rmax_radius"
      "_km\030\002 \001(\002\022\026\n\016max_node_count\030\003 \001(\r\022\032\n\022inc"
      "lude_neighbours\030\004 \001(\010\"H\n!GetClosestNodes"
      "ByDistanceResponse\022#\n\005nodes\030\001 \003(\0132\024.iop."
      "locnet.NodeInfo\"\207\003\n\rClientRequest\0227\n\rget"
      "_node_info\030\001 \001(\0132\036.iop.locnet.GetNodeInf"
      "oRequestH\000\022S\n\023get_neighbour_nodes\030\002 \001(\0132"
      "4.iop.locnet.GetNeighbourNodesByDistance"
      "ClientRequestH\000\022I\n\021get_closest_nodes\030\003 \001"
      "(\0132,.iop.locnet.GetClosestNodesByDistanc"
      "eRequestH\000\022I\n\rexplore_nodes\030\004 \001(\01320.iop."
      "locnet.ExploreNetworkNodesByDistanceRequ"
      "estH\000\022=\n\020get_random_nodes\030\005 \001(\0132!.iop.lo"
      "cnet.GetRandomNodesRequestH\000B\023\n\021ClientRe"
      "questType\"\210\003\n\016ClientResponse\0228\n\rget_node"
      "_info\030\001 \001(\0132\037.iop.locnet.GetNodeInfoResp"
      "onseH\000\022N\n\023get_neighbour_nodes\030\002 \001(\0132/.io"
      "p.locnet.GetNeighbourNodesByDistanceResp"
      "onseH\000\022J\n\021get_closest_nodes\030\003 \001(\0132-.iop."
      "locnet.GetClosestNodesByDistanceResponse"
      "H\000\022J\n\rexplore_nodes\030\004 \001(\01321.iop.locnet.E"
      "xploreNetworkNodesByDistanceResponseH\000\022>"
      "\n\020get_random_nodes\030\005 \001(\0132\".iop.locnet.Ge"
      "tRandomNodesResponseH\000B\024\n\022ClientResponse"
      "Type\"\024\n\022GetNodeInfoRequest\">\n\023GetNodeInf"
      "oResponse\022\'\n\tnode_info\030\001 \001(\0132\024.iop.locne"
      "t.NodeInfo\"*\n(GetNeighbourNodesByDistanc"
      "eClientRequest\"\203\001\n$ExploreNetworkNodesBy"
      "DistanceRequest\022)\n\010location\030\001 \001(\0132\027.iop."
      "locnet.GpsLocation\022\031\n\021target_node_count\030"
      "\002 \001(\r\022\025\n\rmax_node_hops\030\003 \001(\r\"T\n%ExploreN"
      "etworkNodesByDistanceResponse\022+\n\rclosest"
      "_nodes\030\001 \003(\0132\024.iop.locnet.NodeInfo*y\n\006St"
      "atus\022\r\n\tSTATUS_OK\020\000\022\034\n\030ERROR_PROTOCOL_VI"
      "OLATION\020\001\022\025\n\021ERROR_UNSUPPORTED\020\002\022\022\n\016ERRO"
      "R_INTERNAL\020\010\022\027\n\023ERROR_INVALID_VALUE\0206b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IopLocNet.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_IopLocNet_2eproto
namespace iop {
namespace locnet {
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IopLocNet_2eproto::file_level_enum_descriptors[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 8:
    case 54:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServiceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceInfo::kTypeFieldNumber;
const int ServiceInfo::kPortFieldNumber;
const int ServiceInfo::kServiceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsServiceInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  service_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_data().size() > 0) {
    service_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_data_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:iop.locnet.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceInfo& ServiceInfo::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsServiceInfo();
  return *internal_default_instance();
}

ServiceInfo* ServiceInfo::New(::google::protobuf::Arena* arena) const {
  ServiceInfo* n = new ServiceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iop.locnet.ServiceInfo.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes service_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ServiceInfo)
  return false;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.ServiceInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // bytes service_data = 3;
  if (this->service_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->service_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.ServiceInfo)
}

::google::protobuf::uint8* ServiceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ServiceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.ServiceInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // bytes service_data = 3;
  if (this->service_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->service_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ServiceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes service_data = 3;
  if (this->service_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->service_data());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ServiceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.service_data().size() > 0) {

    service_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_data_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  type_.Swap(&other->type_);
  service_data_.Swap(&other->service_data_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpsLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpsLocation::kLatitudeFieldNumber;
const int GpsLocation::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpsLocation::GpsLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GpsLocation)
}
GpsLocation::GpsLocation(const GpsLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GpsLocation)
}

void GpsLocation::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _cached_size_ = 0;
}

GpsLocation::~GpsLocation() {
  // @@protoc_insertion_point(destructor:iop.locnet.GpsLocation)
  SharedDtor();
}

void GpsLocation::SharedDtor() {
}

void GpsLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsLocation::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpsLocation& GpsLocation::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGpsLocation();
  return *internal_default_instance();
}

GpsLocation* GpsLocation::New(::google::protobuf::Arena* arena) const {
  GpsLocation* n = new GpsLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GpsLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GpsLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

bool GpsLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GpsLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GpsLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GpsLocation)
  return false;
#undef DO_
}

void GpsLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GpsLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->latitude(), output);
  }

  // sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->longitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GpsLocation)
}

::google::protobuf::uint8* GpsLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GpsLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->latitude(), target);
  }

  // sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->longitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GpsLocation)
  return target;
}

size_t GpsLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GpsLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GpsLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpsLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GpsLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GpsLocation)
    MergeFrom(*source);
  }
}

void GpsLocation::MergeFrom(const GpsLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GpsLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void GpsLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GpsLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsLocation::CopyFrom(const GpsLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GpsLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsLocation::IsInitialized() const {
  return true;
}

void GpsLocation::Swap(GpsLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpsLocation::InternalSwap(GpsLocation* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GpsLocation::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeContact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeContact::kIpAddressFieldNumber;
const int NodeContact::kNodePortFieldNumber;
const int NodeContact::kClientPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeContact::NodeContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsNodeContact();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NodeContact)
}
NodeContact::NodeContact(const NodeContact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_address().size() > 0) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  ::memcpy(&node_port_, &from.node_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_port_) -
    reinterpret_cast<char*>(&node_port_)) + sizeof(client_port_));
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NodeContact)
}

void NodeContact::SharedCtor() {
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_port_) -
      reinterpret_cast<char*>(&node_port_)) + sizeof(client_port_));
  _cached_size_ = 0;
}

NodeContact::~NodeContact() {
  // @@protoc_insertion_point(destructor:iop.locnet.NodeContact)
  SharedDtor();
}

void NodeContact::SharedDtor() {
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeContact::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeContact& NodeContact::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsNodeContact();
  return *internal_default_instance();
}

NodeContact* NodeContact::New(::google::protobuf::Arena* arena) const {
  NodeContact* n = new NodeContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeContact::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NodeContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_port_) -
      reinterpret_cast<char*>(&node_port_)) + sizeof(client_port_));
  _internal_metadata_.Clear();
}

bool NodeContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NodeContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 node_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 client_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NodeContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NodeContact)
  return false;
#undef DO_
}

void NodeContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NodeContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip_address(), output);
  }

  // uint32 node_port = 2;
  if (this->node_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_port(), output);
  }

  // uint32 client_port = 3;
  if (this->client_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.NodeContact)
}

::google::protobuf::uint8* NodeContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NodeContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip_address(), target);
  }

  // uint32 node_port = 2;
  if (this->node_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_port(), target);
  }

  // uint32 client_port = 3;
  if (this->client_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NodeContact)
  return target;
}

size_t NodeContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NodeContact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip_address());
  }

  // uint32 node_port = 2;
  if (this->node_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_port());
  }

  // uint32 client_port = 3;
  if (this->client_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NodeContact)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeContact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NodeContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NodeContact)
    MergeFrom(*source);
  }
}

void NodeContact::MergeFrom(const NodeContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NodeContact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.node_port() != 0) {
    set_node_port(from.node_port());
  }
  if (from.client_port() != 0) {
    set_client_port(from.client_port());
  }
}

void NodeContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NodeContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeContact::CopyFrom(const NodeContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NodeContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeContact::IsInitialized() const {
  return true;
}

void NodeContact::Swap(NodeContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeContact::InternalSwap(NodeContact* other) {
  using std::swap;
  ip_address_.Swap(&other->ip_address_);
  swap(node_port_, other->node_port_);
  swap(client_port_, other->client_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeContact::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
  ::iop::locnet::_NodeInfo_default_instance_._instance.get_mutable()->contact_ = const_cast< ::iop::locnet::NodeContact*>(
      ::iop::locnet::NodeContact::internal_default_instance());
  ::iop::locnet::_NodeInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::iop::locnet::GpsLocation*>(
      ::iop::locnet::GpsLocation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kNodeIdFieldNumber;
const int NodeInfo::kContactFieldNumber;
const int NodeInfo::kLocationFieldNumber;
const int NodeInfo::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.has_contact()) {
    contact_ = new ::iop::locnet::NodeContact(*from.contact_);
  } else {
    contact_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::iop::locnet::GpsLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NodeInfo)
}

void NodeInfo::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&contact_)) + sizeof(location_));
  _cached_size_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:iop.locnet.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contact_;
  if (this != internal_default_instance()) delete location_;
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsNodeInfo();
  return *internal_default_instance();
}

NodeInfo* NodeInfo::New(::google::protobuf::Arena* arena) const {
  NodeInfo* n = new NodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.NodeContact contact = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GpsLocation location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .iop.locnet.ServiceInfo services = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  // .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->contact_, output);
  }

  // .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // repeated .iop.locnet.ServiceInfo services = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->services(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (this->node_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  // .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->contact_, deterministic, target);
  }

  // .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->location_, deterministic, target);
  }

  // repeated .iop.locnet.ServiceInfo services = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->services(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NodeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.ServiceInfo services = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  // bytes node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->node_id());
  }

  // .iop.locnet.NodeContact contact = 2;
  if (this->has_contact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->contact_);
  }

  // .iop.locnet.GpsLocation location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.has_contact()) {
    mutable_contact()->::iop::locnet::NodeContact::MergeFrom(from.contact());
  }
  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  services_.InternalSwap(&other->services_);
  node_id_.Swap(&other->node_id_);
  swap(contact_, other->contact_);
  swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageWithHeader::InitAsDefaultInstance() {
  ::iop::locnet::_MessageWithHeader_default_instance_._instance.get_mutable()->body_ = const_cast< ::iop::locnet::Message*>(
      ::iop::locnet::Message::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageWithHeader::kHeaderFieldNumber;
const int MessageWithHeader::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageWithHeader::MessageWithHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsMessageWithHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.MessageWithHeader)
}
MessageWithHeader::MessageWithHeader(const MessageWithHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_body()) {
    body_ = new ::iop::locnet::Message(*from.body_);
  } else {
    body_ = NULL;
  }
  header_ = from.header_;
  // @@protoc_insertion_point(copy_constructor:iop.locnet.MessageWithHeader)
}

void MessageWithHeader::SharedCtor() {
  ::memset(&body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&header_) -
      reinterpret_cast<char*>(&body_)) + sizeof(header_));
  _cached_size_ = 0;
}

MessageWithHeader::~MessageWithHeader() {
  // @@protoc_insertion_point(destructor:iop.locnet.MessageWithHeader)
  SharedDtor();
}

void MessageWithHeader::SharedDtor() {
  if (this != internal_default_instance()) delete body_;
}

void MessageWithHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWithHeader::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageWithHeader& MessageWithHeader::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsMessageWithHeader();
  return *internal_default_instance();
}

MessageWithHeader* MessageWithHeader::New(::google::protobuf::Arena* arena) const {
  MessageWithHeader* n = new MessageWithHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageWithHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.MessageWithHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  header_ = 0u;
  _internal_metadata_.Clear();
}

bool MessageWithHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.MessageWithHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &header_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.Message body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.MessageWithHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.MessageWithHeader)
  return false;
#undef DO_
}

void MessageWithHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.MessageWithHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 header = 1;
  if (this->header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->header(), output);
  }

  // .iop.locnet.Message body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.MessageWithHeader)
}

::google::protobuf::uint8* MessageWithHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.MessageWithHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 header = 1;
  if (this->header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->header(), target);
  }

  // .iop.locnet.Message body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->body_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.MessageWithHeader)
  return target;
}

size_t MessageWithHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.MessageWithHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.Message body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->body_);
  }

  // fixed32 header = 1;
  if (this->header() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWithHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.MessageWithHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageWithHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageWithHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.MessageWithHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.MessageWithHeader)
    MergeFrom(*source);
  }
}

void MessageWithHeader::MergeFrom(const MessageWithHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.MessageWithHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_body()) {
    mutable_body()->::iop::locnet::Message::MergeFrom(from.body());
  }
  if (from.header() != 0) {
    set_header(from.header());
  }
}

void MessageWithHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.MessageWithHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWithHeader::CopyFrom(const MessageWithHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.MessageWithHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWithHeader::IsInitialized() const {
  return true;
}

void MessageWithHeader::Swap(MessageWithHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageWithHeader::InternalSwap(MessageWithHeader* other) {
  using std::swap;
  swap(body_, other->body_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageWithHeader::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::iop::locnet::_Message_default_instance_.request_ = const_cast< ::iop::locnet::Request*>(
      ::iop::locnet::Request::internal_default_instance());
  ::iop::locnet::_Message_default_instance_.response_ = const_cast< ::iop::locnet::Response*>(
      ::iop::locnet::Response::internal_default_instance());
}
void Message::set_allocated_request(::iop::locnet::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MessageType();
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
    MessageType_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Message.request)
}
void Message::set_allocated_response(::iop::locnet::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MessageType();
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    MessageType_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Message.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kIdFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_MessageType();
  switch (from.MessageType_case()) {
    case kRequest: {
      mutable_request()->::iop::locnet::Request::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::iop::locnet::Response::MergeFrom(from.response());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Message)
}

void Message::SharedCtor() {
  id_ = 0u;
  clear_has_MessageType();
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:iop.locnet.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_MessageType()) {
    clear_MessageType();
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_MessageType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Message)
  switch (MessageType_case()) {
    case kRequest: {
      delete MessageType_.request_;
      break;
    }
    case kResponse: {
      delete MessageType_.response_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  clear_MessageType();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.Request request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.Response response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .iop.locnet.Request request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *MessageType_.request_, output);
  }

  // .iop.locnet.Response response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *MessageType_.response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .iop.locnet.Request request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *MessageType_.request_, deterministic, target);
  }

  // .iop.locnet.Response response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *MessageType_.response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  switch (MessageType_case()) {
    // .iop.locnet.Request request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MessageType_.request_);
      break;
    }
    // .iop.locnet.Response response = 3;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MessageType_.response_);
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.MessageType_case()) {
    case kRequest: {
      mutable_request()->::iop::locnet::Request::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::iop::locnet::Response::MergeFrom(from.response());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(MessageType_, other->MessageType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::iop::locnet::_Request_default_instance_.local_service_ = const_cast< ::iop::locnet::LocalServiceRequest*>(
      ::iop::locnet::LocalServiceRequest::internal_default_instance());
  ::iop::locnet::_Request_default_instance_.remote_node_ = const_cast< ::iop::locnet::RemoteNodeRequest*>(
      ::iop::locnet::RemoteNodeRequest::internal_default_instance());
  ::iop::locnet::_Request_default_instance_.client_ = const_cast< ::iop::locnet::ClientRequest*>(
      ::iop::locnet::ClientRequest::internal_default_instance());
}
void Request::set_allocated_local_service(::iop::locnet::LocalServiceRequest* local_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestType();
  if (local_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_service, submessage_arena);
    }
    set_has_local_service();
    RequestType_.local_service_ = local_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.local_service)
}
void Request::set_allocated_remote_node(::iop::locnet::RemoteNodeRequest* remote_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestType();
  if (remote_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remote_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remote_node, submessage_arena);
    }
    set_has_remote_node();
    RequestType_.remote_node_ = remote_node;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.remote_node)
}
void Request::set_allocated_client(::iop::locnet::ClientRequest* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestType();
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    set_has_client();
    RequestType_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Request.client)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kVersionFieldNumber;
const int Request::kLocalServiceFieldNumber;
const int Request::kRemoteNodeFieldNumber;
const int Request::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  clear_has_RequestType();
  switch (from.RequestType_case()) {
    case kLocalService: {
      mutable_local_service()->::iop::locnet::LocalServiceRequest::MergeFrom(from.local_service());
      break;
    }
    case kRemoteNode: {
      mutable_remote_node()->::iop::locnet::RemoteNodeRequest::MergeFrom(from.remote_node());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientRequest::MergeFrom(from.client());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Request)
}

void Request::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_RequestType();
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:iop.locnet.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_RequestType()) {
    clear_RequestType();
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsRequest();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_RequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Request)
  switch (RequestType_case()) {
    case kLocalService: {
      delete RequestType_.local_service_;
      break;
    }
    case kRemoteNode: {
      delete RequestType_.remote_node_;
      break;
    }
    case kClient: {
      delete RequestType_.client_;
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTTYPE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_RequestType();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.LocalServiceRequest local_service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.RemoteNodeRequest remote_node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.ClientRequest client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // .iop.locnet.LocalServiceRequest local_service = 2;
  if (has_local_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RequestType_.local_service_, output);
  }

  // .iop.locnet.RemoteNodeRequest remote_node = 3;
  if (has_remote_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RequestType_.remote_node_, output);
  }

  // .iop.locnet.ClientRequest client = 4;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RequestType_.client_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // .iop.locnet.LocalServiceRequest local_service = 2;
  if (has_local_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *RequestType_.local_service_, deterministic, target);
  }

  // .iop.locnet.RemoteNodeRequest remote_node = 3;
  if (has_remote_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *RequestType_.remote_node_, deterministic, target);
  }

  // .iop.locnet.ClientRequest client = 4;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *RequestType_.client_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  switch (RequestType_case()) {
    // .iop.locnet.LocalServiceRequest local_service = 2;
    case kLocalService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestType_.local_service_);
      break;
    }
    // .iop.locnet.RemoteNodeRequest remote_node = 3;
    case kRemoteNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestType_.remote_node_);
      break;
    }
    // .iop.locnet.ClientRequest client = 4;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestType_.client_);
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  switch (from.RequestType_case()) {
    case kLocalService: {
      mutable_local_service()->::iop::locnet::LocalServiceRequest::MergeFrom(from.local_service());
      break;
    }
    case kRemoteNode: {
      mutable_remote_node()->::iop::locnet::RemoteNodeRequest::MergeFrom(from.remote_node());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientRequest::MergeFrom(from.client());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  version_.Swap(&other->version_);
  swap(RequestType_, other->RequestType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::iop::locnet::_Response_default_instance_.local_service_ = const_cast< ::iop::locnet::LocalServiceResponse*>(
      ::iop::locnet::LocalServiceResponse::internal_default_instance());
  ::iop::locnet::_Response_default_instance_.remote_node_ = const_cast< ::iop::locnet::RemoteNodeResponse*>(
      ::iop::locnet::RemoteNodeResponse::internal_default_instance());
  ::iop::locnet::_Response_default_instance_.client_ = const_cast< ::iop::locnet::ClientResponse*>(
      ::iop::locnet::ClientResponse::internal_default_instance());
}
void Response::set_allocated_local_service(::iop::locnet::LocalServiceResponse* local_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseType();
  if (local_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_service, submessage_arena);
    }
    set_has_local_service();
    ResponseType_.local_service_ = local_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.local_service)
}
void Response::set_allocated_remote_node(::iop::locnet::RemoteNodeResponse* remote_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseType();
  if (remote_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remote_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remote_node, submessage_arena);
    }
    set_has_remote_node();
    ResponseType_.remote_node_ = remote_node;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.remote_node)
}
void Response::set_allocated_client(::iop::locnet::ClientResponse* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseType();
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    set_has_client();
    ResponseType_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.Response.client)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kTimestampFieldNumber;
const int Response::kDetailsFieldNumber;
const int Response::kLocalServiceFieldNumber;
const int Response::kRemoteNodeFieldNumber;
const int Response::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.details().size() > 0) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  clear_has_ResponseType();
  switch (from.ResponseType_case()) {
    case kLocalService: {
      mutable_local_service()->::iop::locnet::LocalServiceResponse::MergeFrom(from.local_service());
      break;
    }
    case kRemoteNode: {
      mutable_remote_node()->::iop::locnet::RemoteNodeResponse::MergeFrom(from.remote_node());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientResponse::MergeFrom(from.client());
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.Response)
}

void Response::SharedCtor() {
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  clear_has_ResponseType();
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:iop.locnet.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_ResponseType()) {
    clear_ResponseType();
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsResponse();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_ResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.Response)
  switch (ResponseType_case()) {
    case kLocalService: {
      delete ResponseType_.local_service_;
      break;
    }
    case kRemoteNode: {
      delete ResponseType_.remote_node_;
      break;
    }
    case kClient: {
      delete ResponseType_.client_;
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSETYPE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  clear_ResponseType();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::iop::locnet::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->details().data(), static_cast<int>(this->details().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iop.locnet.Response.details"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.LocalServiceResponse local_service = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.RemoteNodeResponse remote_node = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.ClientResponse client = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->timestamp(), output);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.Response.details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->details(), output);
  }

  // .iop.locnet.LocalServiceResponse local_service = 4;
  if (has_local_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ResponseType_.local_service_, output);
  }

  // .iop.locnet.RemoteNodeResponse remote_node = 5;
  if (has_remote_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *ResponseType_.remote_node_, output);
  }

  // .iop.locnet.ClientResponse client = 6;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *ResponseType_.client_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->timestamp(), target);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.Response.details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->details(), target);
  }

  // .iop.locnet.LocalServiceResponse local_service = 4;
  if (has_local_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *ResponseType_.local_service_, deterministic, target);
  }

  // .iop.locnet.RemoteNodeResponse remote_node = 5;
  if (has_remote_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *ResponseType_.remote_node_, deterministic, target);
  }

  // .iop.locnet.ClientResponse client = 6;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *ResponseType_.client_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.Response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string details = 3;
  if (this->details().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->details());
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->timestamp());
  }

  // .iop.locnet.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  switch (ResponseType_case()) {
    // .iop.locnet.LocalServiceResponse local_service = 4;
    case kLocalService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseType_.local_service_);
      break;
    }
    // .iop.locnet.RemoteNodeResponse remote_node = 5;
    case kRemoteNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseType_.remote_node_);
      break;
    }
    // .iop.locnet.ClientResponse client = 6;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseType_.client_);
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.details().size() > 0) {

    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  switch (from.ResponseType_case()) {
    case kLocalService: {
      mutable_local_service()->::iop::locnet::LocalServiceResponse::MergeFrom(from.local_service());
      break;
    }
    case kRemoteNode: {
      mutable_remote_node()->::iop::locnet::RemoteNodeResponse::MergeFrom(from.remote_node());
      break;
    }
    case kClient: {
      mutable_client()->::iop::locnet::ClientResponse::MergeFrom(from.client());
      break;
    }
    case RESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  details_.Swap(&other->details_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
  swap(ResponseType_, other->ResponseType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalServiceRequest::InitAsDefaultInstance() {
  ::iop::locnet::_LocalServiceRequest_default_instance_.register_service_ = const_cast< ::iop::locnet::RegisterServiceRequest*>(
      ::iop::locnet::RegisterServiceRequest::internal_default_instance());
  ::iop::locnet::_LocalServiceRequest_default_instance_.deregister_service_ = const_cast< ::iop::locnet::DeregisterServiceRequest*>(
      ::iop::locnet::DeregisterServiceRequest::internal_default_instance());
  ::iop::locnet::_LocalServiceRequest_default_instance_.get_neighbour_nodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest*>(
      ::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::internal_default_instance());
  ::iop::locnet::_LocalServiceRequest_default_instance_.neighbourhood_changed_ = const_cast< ::iop::locnet::NeighbourhoodChangedNotificationRequest*>(
      ::iop::locnet::NeighbourhoodChangedNotificationRequest::internal_default_instance());
  ::iop::locnet::_LocalServiceRequest_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoRequest*>(
      ::iop::locnet::GetNodeInfoRequest::internal_default_instance());
}
void LocalServiceRequest::set_allocated_register_service(::iop::locnet::RegisterServiceRequest* register_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceRequestType();
  if (register_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_service, submessage_arena);
    }
    set_has_register_service();
    LocalServiceRequestType_.register_service_ = register_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.register_service)
}
void LocalServiceRequest::set_allocated_deregister_service(::iop::locnet::DeregisterServiceRequest* deregister_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceRequestType();
  if (deregister_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deregister_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deregister_service, submessage_arena);
    }
    set_has_deregister_service();
    LocalServiceRequestType_.deregister_service_ = deregister_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.deregister_service)
}
void LocalServiceRequest::set_allocated_get_neighbour_nodes(::iop::locnet::GetNeighbourNodesByDistanceLocalRequest* get_neighbour_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceRequestType();
  if (get_neighbour_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_neighbour_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_neighbour_nodes, submessage_arena);
    }
    set_has_get_neighbour_nodes();
    LocalServiceRequestType_.get_neighbour_nodes_ = get_neighbour_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.get_neighbour_nodes)
}
void LocalServiceRequest::set_allocated_neighbourhood_changed(::iop::locnet::NeighbourhoodChangedNotificationRequest* neighbourhood_changed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceRequestType();
  if (neighbourhood_changed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbourhood_changed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbourhood_changed, submessage_arena);
    }
    set_has_neighbourhood_changed();
    LocalServiceRequestType_.neighbourhood_changed_ = neighbourhood_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.neighbourhood_changed)
}
void LocalServiceRequest::set_allocated_get_node_info(::iop::locnet::GetNodeInfoRequest* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceRequestType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    LocalServiceRequestType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceRequest.get_node_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalServiceRequest::kRegisterServiceFieldNumber;
const int LocalServiceRequest::kDeregisterServiceFieldNumber;
const int LocalServiceRequest::kGetNeighbourNodesFieldNumber;
const int LocalServiceRequest::kNeighbourhoodChangedFieldNumber;
const int LocalServiceRequest::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalServiceRequest::LocalServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.LocalServiceRequest)
}
LocalServiceRequest::LocalServiceRequest(const LocalServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_LocalServiceRequestType();
  switch (from.LocalServiceRequestType_case()) {
    case kRegisterService: {
      mutable_register_service()->::iop::locnet::RegisterServiceRequest::MergeFrom(from.register_service());
      break;
    }
    case kDeregisterService: {
      mutable_deregister_service()->::iop::locnet::DeregisterServiceRequest::MergeFrom(from.deregister_service());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kNeighbourhoodChanged: {
      mutable_neighbourhood_changed()->::iop::locnet::NeighbourhoodChangedNotificationRequest::MergeFrom(from.neighbourhood_changed());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.LocalServiceRequest)
}

void LocalServiceRequest::SharedCtor() {
  clear_has_LocalServiceRequestType();
  _cached_size_ = 0;
}

LocalServiceRequest::~LocalServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.LocalServiceRequest)
  SharedDtor();
}

void LocalServiceRequest::SharedDtor() {
  if (has_LocalServiceRequestType()) {
    clear_LocalServiceRequestType();
  }
}

void LocalServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalServiceRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalServiceRequest& LocalServiceRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceRequest();
  return *internal_default_instance();
}

LocalServiceRequest* LocalServiceRequest::New(::google::protobuf::Arena* arena) const {
  LocalServiceRequest* n = new LocalServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalServiceRequest::clear_LocalServiceRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.LocalServiceRequest)
  switch (LocalServiceRequestType_case()) {
    case kRegisterService: {
      delete LocalServiceRequestType_.register_service_;
      break;
    }
    case kDeregisterService: {
      delete LocalServiceRequestType_.deregister_service_;
      break;
    }
    case kGetNeighbourNodes: {
      delete LocalServiceRequestType_.get_neighbour_nodes_;
      break;
    }
    case kNeighbourhoodChanged: {
      delete LocalServiceRequestType_.neighbourhood_changed_;
      break;
    }
    case kGetNodeInfo: {
      delete LocalServiceRequestType_.get_node_info_;
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALSERVICEREQUESTTYPE_NOT_SET;
}


void LocalServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.LocalServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_LocalServiceRequestType();
  _internal_metadata_.Clear();
}

bool LocalServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.LocalServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.RegisterServiceRequest register_service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.DeregisterServiceRequest deregister_service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deregister_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_neighbour_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbourhood_changed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeInfoRequest get_node_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.LocalServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.LocalServiceRequest)
  return false;
#undef DO_
}

void LocalServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.LocalServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.RegisterServiceRequest register_service = 1;
  if (has_register_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *LocalServiceRequestType_.register_service_, output);
  }

  // .iop.locnet.DeregisterServiceRequest deregister_service = 2;
  if (has_deregister_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *LocalServiceRequestType_.deregister_service_, output);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;
  if (has_get_neighbour_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *LocalServiceRequestType_.get_neighbour_nodes_, output);
  }

  // .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;
  if (has_neighbourhood_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *LocalServiceRequestType_.neighbourhood_changed_, output);
  }

  // .iop.locnet.GetNodeInfoRequest get_node_info = 5;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *LocalServiceRequestType_.get_node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.LocalServiceRequest)
}

::google::protobuf::uint8* LocalServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.LocalServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.RegisterServiceRequest register_service = 1;
  if (has_register_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *LocalServiceRequestType_.register_service_, deterministic, target);
  }

  // .iop.locnet.DeregisterServiceRequest deregister_service = 2;
  if (has_deregister_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *LocalServiceRequestType_.deregister_service_, deterministic, target);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;
  if (has_get_neighbour_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *LocalServiceRequestType_.get_neighbour_nodes_, deterministic, target);
  }

  // .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;
  if (has_neighbourhood_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *LocalServiceRequestType_.neighbourhood_changed_, deterministic, target);
  }

  // .iop.locnet.GetNodeInfoRequest get_node_info = 5;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *LocalServiceRequestType_.get_node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.LocalServiceRequest)
  return target;
}

size_t LocalServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.LocalServiceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (LocalServiceRequestType_case()) {
    // .iop.locnet.RegisterServiceRequest register_service = 1;
    case kRegisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceRequestType_.register_service_);
      break;
    }
    // .iop.locnet.DeregisterServiceRequest deregister_service = 2;
    case kDeregisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceRequestType_.deregister_service_);
      break;
    }
    // .iop.locnet.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceRequestType_.get_neighbour_nodes_);
      break;
    }
    // .iop.locnet.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;
    case kNeighbourhoodChanged: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceRequestType_.neighbourhood_changed_);
      break;
    }
    // .iop.locnet.GetNodeInfoRequest get_node_info = 5;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceRequestType_.get_node_info_);
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.LocalServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.LocalServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.LocalServiceRequest)
    MergeFrom(*source);
  }
}

void LocalServiceRequest::MergeFrom(const LocalServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.LocalServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.LocalServiceRequestType_case()) {
    case kRegisterService: {
      mutable_register_service()->::iop::locnet::RegisterServiceRequest::MergeFrom(from.register_service());
      break;
    }
    case kDeregisterService: {
      mutable_deregister_service()->::iop::locnet::DeregisterServiceRequest::MergeFrom(from.deregister_service());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceLocalRequest::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kNeighbourhoodChanged: {
      mutable_neighbourhood_changed()->::iop::locnet::NeighbourhoodChangedNotificationRequest::MergeFrom(from.neighbourhood_changed());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void LocalServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.LocalServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalServiceRequest::CopyFrom(const LocalServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.LocalServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalServiceRequest::IsInitialized() const {
  return true;
}

void LocalServiceRequest::Swap(LocalServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalServiceRequest::InternalSwap(LocalServiceRequest* other) {
  using std::swap;
  swap(LocalServiceRequestType_, other->LocalServiceRequestType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalServiceRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalServiceResponse::InitAsDefaultInstance() {
  ::iop::locnet::_LocalServiceResponse_default_instance_.register_service_ = const_cast< ::iop::locnet::RegisterServiceResponse*>(
      ::iop::locnet::RegisterServiceResponse::internal_default_instance());
  ::iop::locnet::_LocalServiceResponse_default_instance_.deregister_service_ = const_cast< ::iop::locnet::DeregisterServiceResponse*>(
      ::iop::locnet::DeregisterServiceResponse::internal_default_instance());
  ::iop::locnet::_LocalServiceResponse_default_instance_.get_neighbour_nodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceResponse*>(
      ::iop::locnet::GetNeighbourNodesByDistanceResponse::internal_default_instance());
  ::iop::locnet::_LocalServiceResponse_default_instance_.neighbourhood_updated_ = const_cast< ::iop::locnet::NeighbourhoodChangedNotificationResponse*>(
      ::iop::locnet::NeighbourhoodChangedNotificationResponse::internal_default_instance());
  ::iop::locnet::_LocalServiceResponse_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoResponse*>(
      ::iop::locnet::GetNodeInfoResponse::internal_default_instance());
}
void LocalServiceResponse::set_allocated_register_service(::iop::locnet::RegisterServiceResponse* register_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceResponseType();
  if (register_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      register_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_service, submessage_arena);
    }
    set_has_register_service();
    LocalServiceResponseType_.register_service_ = register_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.register_service)
}
void LocalServiceResponse::set_allocated_deregister_service(::iop::locnet::DeregisterServiceResponse* deregister_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceResponseType();
  if (deregister_service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deregister_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deregister_service, submessage_arena);
    }
    set_has_deregister_service();
    LocalServiceResponseType_.deregister_service_ = deregister_service;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.deregister_service)
}
void LocalServiceResponse::set_allocated_get_neighbour_nodes(::iop::locnet::GetNeighbourNodesByDistanceResponse* get_neighbour_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceResponseType();
  if (get_neighbour_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_neighbour_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_neighbour_nodes, submessage_arena);
    }
    set_has_get_neighbour_nodes();
    LocalServiceResponseType_.get_neighbour_nodes_ = get_neighbour_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.get_neighbour_nodes)
}
void LocalServiceResponse::set_allocated_neighbourhood_updated(::iop::locnet::NeighbourhoodChangedNotificationResponse* neighbourhood_updated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceResponseType();
  if (neighbourhood_updated) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbourhood_updated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbourhood_updated, submessage_arena);
    }
    set_has_neighbourhood_updated();
    LocalServiceResponseType_.neighbourhood_updated_ = neighbourhood_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.neighbourhood_updated)
}
void LocalServiceResponse::set_allocated_get_node_info(::iop::locnet::GetNodeInfoResponse* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_LocalServiceResponseType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    LocalServiceResponseType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.LocalServiceResponse.get_node_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalServiceResponse::kRegisterServiceFieldNumber;
const int LocalServiceResponse::kDeregisterServiceFieldNumber;
const int LocalServiceResponse::kGetNeighbourNodesFieldNumber;
const int LocalServiceResponse::kNeighbourhoodUpdatedFieldNumber;
const int LocalServiceResponse::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalServiceResponse::LocalServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.LocalServiceResponse)
}
LocalServiceResponse::LocalServiceResponse(const LocalServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_LocalServiceResponseType();
  switch (from.LocalServiceResponseType_case()) {
    case kRegisterService: {
      mutable_register_service()->::iop::locnet::RegisterServiceResponse::MergeFrom(from.register_service());
      break;
    }
    case kDeregisterService: {
      mutable_deregister_service()->::iop::locnet::DeregisterServiceResponse::MergeFrom(from.deregister_service());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kNeighbourhoodUpdated: {
      mutable_neighbourhood_updated()->::iop::locnet::NeighbourhoodChangedNotificationResponse::MergeFrom(from.neighbourhood_updated());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.LocalServiceResponse)
}

void LocalServiceResponse::SharedCtor() {
  clear_has_LocalServiceResponseType();
  _cached_size_ = 0;
}

LocalServiceResponse::~LocalServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.LocalServiceResponse)
  SharedDtor();
}

void LocalServiceResponse::SharedDtor() {
  if (has_LocalServiceResponseType()) {
    clear_LocalServiceResponseType();
  }
}

void LocalServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalServiceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalServiceResponse& LocalServiceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsLocalServiceResponse();
  return *internal_default_instance();
}

LocalServiceResponse* LocalServiceResponse::New(::google::protobuf::Arena* arena) const {
  LocalServiceResponse* n = new LocalServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalServiceResponse::clear_LocalServiceResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.LocalServiceResponse)
  switch (LocalServiceResponseType_case()) {
    case kRegisterService: {
      delete LocalServiceResponseType_.register_service_;
      break;
    }
    case kDeregisterService: {
      delete LocalServiceResponseType_.deregister_service_;
      break;
    }
    case kGetNeighbourNodes: {
      delete LocalServiceResponseType_.get_neighbour_nodes_;
      break;
    }
    case kNeighbourhoodUpdated: {
      delete LocalServiceResponseType_.neighbourhood_updated_;
      break;
    }
    case kGetNodeInfo: {
      delete LocalServiceResponseType_.get_node_info_;
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALSERVICERESPONSETYPE_NOT_SET;
}


void LocalServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.LocalServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_LocalServiceResponseType();
  _internal_metadata_.Clear();
}

bool LocalServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.LocalServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.RegisterServiceResponse register_service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.DeregisterServiceResponse deregister_service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deregister_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_neighbour_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbourhood_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeInfoResponse get_node_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.LocalServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.LocalServiceResponse)
  return false;
#undef DO_
}

void LocalServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.LocalServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.RegisterServiceResponse register_service = 1;
  if (has_register_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *LocalServiceResponseType_.register_service_, output);
  }

  // .iop.locnet.DeregisterServiceResponse deregister_service = 2;
  if (has_deregister_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *LocalServiceResponseType_.deregister_service_, output);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;
  if (has_get_neighbour_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *LocalServiceResponseType_.get_neighbour_nodes_, output);
  }

  // .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;
  if (has_neighbourhood_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *LocalServiceResponseType_.neighbourhood_updated_, output);
  }

  // .iop.locnet.GetNodeInfoResponse get_node_info = 5;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *LocalServiceResponseType_.get_node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.LocalServiceResponse)
}

::google::protobuf::uint8* LocalServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.LocalServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.RegisterServiceResponse register_service = 1;
  if (has_register_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *LocalServiceResponseType_.register_service_, deterministic, target);
  }

  // .iop.locnet.DeregisterServiceResponse deregister_service = 2;
  if (has_deregister_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *LocalServiceResponseType_.deregister_service_, deterministic, target);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;
  if (has_get_neighbour_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *LocalServiceResponseType_.get_neighbour_nodes_, deterministic, target);
  }

  // .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;
  if (has_neighbourhood_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *LocalServiceResponseType_.neighbourhood_updated_, deterministic, target);
  }

  // .iop.locnet.GetNodeInfoResponse get_node_info = 5;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *LocalServiceResponseType_.get_node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.LocalServiceResponse)
  return target;
}

size_t LocalServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.LocalServiceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (LocalServiceResponseType_case()) {
    // .iop.locnet.RegisterServiceResponse register_service = 1;
    case kRegisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceResponseType_.register_service_);
      break;
    }
    // .iop.locnet.DeregisterServiceResponse deregister_service = 2;
    case kDeregisterService: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceResponseType_.deregister_service_);
      break;
    }
    // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceResponseType_.get_neighbour_nodes_);
      break;
    }
    // .iop.locnet.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;
    case kNeighbourhoodUpdated: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceResponseType_.neighbourhood_updated_);
      break;
    }
    // .iop.locnet.GetNodeInfoResponse get_node_info = 5;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *LocalServiceResponseType_.get_node_info_);
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.LocalServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.LocalServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.LocalServiceResponse)
    MergeFrom(*source);
  }
}

void LocalServiceResponse::MergeFrom(const LocalServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.LocalServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.LocalServiceResponseType_case()) {
    case kRegisterService: {
      mutable_register_service()->::iop::locnet::RegisterServiceResponse::MergeFrom(from.register_service());
      break;
    }
    case kDeregisterService: {
      mutable_deregister_service()->::iop::locnet::DeregisterServiceResponse::MergeFrom(from.deregister_service());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kNeighbourhoodUpdated: {
      mutable_neighbourhood_updated()->::iop::locnet::NeighbourhoodChangedNotificationResponse::MergeFrom(from.neighbourhood_updated());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case LOCALSERVICERESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void LocalServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.LocalServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalServiceResponse::CopyFrom(const LocalServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.LocalServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalServiceResponse::IsInitialized() const {
  return true;
}

void LocalServiceResponse::Swap(LocalServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalServiceResponse::InternalSwap(LocalServiceResponse* other) {
  using std::swap;
  swap(LocalServiceResponseType_, other->LocalServiceResponseType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalServiceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterServiceRequest::InitAsDefaultInstance() {
  ::iop::locnet::_RegisterServiceRequest_default_instance_._instance.get_mutable()->service_ = const_cast< ::iop::locnet::ServiceInfo*>(
      ::iop::locnet::ServiceInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterServiceRequest::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterServiceRequest::RegisterServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RegisterServiceRequest)
}
RegisterServiceRequest::RegisterServiceRequest(const RegisterServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::iop::locnet::ServiceInfo(*from.service_);
  } else {
    service_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RegisterServiceRequest)
}

void RegisterServiceRequest::SharedCtor() {
  service_ = NULL;
  _cached_size_ = 0;
}

RegisterServiceRequest::~RegisterServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.RegisterServiceRequest)
  SharedDtor();
}

void RegisterServiceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete service_;
}

void RegisterServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServiceRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterServiceRequest& RegisterServiceRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceRequest();
  return *internal_default_instance();
}

RegisterServiceRequest* RegisterServiceRequest::New(::google::protobuf::Arena* arena) const {
  RegisterServiceRequest* n = new RegisterServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RegisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && service_ != NULL) {
    delete service_;
  }
  service_ = NULL;
  _internal_metadata_.Clear();
}

bool RegisterServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RegisterServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.ServiceInfo service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RegisterServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RegisterServiceRequest)
  return false;
#undef DO_
}

void RegisterServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RegisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.RegisterServiceRequest)
}

::google::protobuf::uint8* RegisterServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RegisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->service_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RegisterServiceRequest)
  return target;
}

size_t RegisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RegisterServiceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.ServiceInfo service = 1;
  if (this->has_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->service_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RegisterServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RegisterServiceRequest)
    MergeFrom(*source);
  }
}

void RegisterServiceRequest::MergeFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_service()) {
    mutable_service()->::iop::locnet::ServiceInfo::MergeFrom(from.service());
  }
}

void RegisterServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceRequest::CopyFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceRequest::IsInitialized() const {
  return true;
}

void RegisterServiceRequest::Swap(RegisterServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterServiceRequest::InternalSwap(RegisterServiceRequest* other) {
  using std::swap;
  swap(service_, other->service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterServiceRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterServiceResponse::InitAsDefaultInstance() {
  ::iop::locnet::_RegisterServiceResponse_default_instance_._instance.get_mutable()->location_ = const_cast< ::iop::locnet::GpsLocation*>(
      ::iop::locnet::GpsLocation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterServiceResponse::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterServiceResponse::RegisterServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RegisterServiceResponse)
}
RegisterServiceResponse::RegisterServiceResponse(const RegisterServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::iop::locnet::GpsLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RegisterServiceResponse)
}

void RegisterServiceResponse::SharedCtor() {
  location_ = NULL;
  _cached_size_ = 0;
}

RegisterServiceResponse::~RegisterServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.RegisterServiceResponse)
  SharedDtor();
}

void RegisterServiceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void RegisterServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServiceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterServiceResponse& RegisterServiceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsRegisterServiceResponse();
  return *internal_default_instance();
}

RegisterServiceResponse* RegisterServiceResponse::New(::google::protobuf::Arena* arena) const {
  RegisterServiceResponse* n = new RegisterServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RegisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  _internal_metadata_.Clear();
}

bool RegisterServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RegisterServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RegisterServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RegisterServiceResponse)
  return false;
#undef DO_
}

void RegisterServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RegisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.RegisterServiceResponse)
}

::google::protobuf::uint8* RegisterServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RegisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RegisterServiceResponse)
  return target;
}

size_t RegisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RegisterServiceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RegisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RegisterServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RegisterServiceResponse)
    MergeFrom(*source);
  }
}

void RegisterServiceResponse::MergeFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RegisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
}

void RegisterServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceResponse::CopyFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceResponse::IsInitialized() const {
  return true;
}

void RegisterServiceResponse::Swap(RegisterServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterServiceResponse::InternalSwap(RegisterServiceResponse* other) {
  using std::swap;
  swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterServiceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeregisterServiceRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterServiceRequest::kServiceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterServiceRequest::DeregisterServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.DeregisterServiceRequest)
}
DeregisterServiceRequest::DeregisterServiceRequest(const DeregisterServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_type().size() > 0) {
    service_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.DeregisterServiceRequest)
}

void DeregisterServiceRequest::SharedCtor() {
  service_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeregisterServiceRequest::~DeregisterServiceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.DeregisterServiceRequest)
  SharedDtor();
}

void DeregisterServiceRequest::SharedDtor() {
  service_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeregisterServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterServiceRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeregisterServiceRequest& DeregisterServiceRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceRequest();
  return *internal_default_instance();
}

DeregisterServiceRequest* DeregisterServiceRequest::New(::google::protobuf::Arena* arena) const {
  DeregisterServiceRequest* n = new DeregisterServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeregisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.DeregisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeregisterServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.DeregisterServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_type().data(), static_cast<int>(this->service_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iop.locnet.DeregisterServiceRequest.service_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.DeregisterServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.DeregisterServiceRequest)
  return false;
#undef DO_
}

void DeregisterServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.DeregisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_type = 1;
  if (this->service_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.DeregisterServiceRequest.service_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.DeregisterServiceRequest)
}

::google::protobuf::uint8* DeregisterServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.DeregisterServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_type = 1;
  if (this->service_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iop.locnet.DeregisterServiceRequest.service_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.DeregisterServiceRequest)
  return target;
}

size_t DeregisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.DeregisterServiceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string service_type = 1;
  if (this->service_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.DeregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.DeregisterServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.DeregisterServiceRequest)
    MergeFrom(*source);
  }
}

void DeregisterServiceRequest::MergeFrom(const DeregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.DeregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_type().size() > 0) {

    service_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
}

void DeregisterServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.DeregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterServiceRequest::CopyFrom(const DeregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.DeregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterServiceRequest::IsInitialized() const {
  return true;
}

void DeregisterServiceRequest::Swap(DeregisterServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterServiceRequest::InternalSwap(DeregisterServiceRequest* other) {
  using std::swap;
  service_type_.Swap(&other->service_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterServiceRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeregisterServiceResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterServiceResponse::DeregisterServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.DeregisterServiceResponse)
}
DeregisterServiceResponse::DeregisterServiceResponse(const DeregisterServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.DeregisterServiceResponse)
}

void DeregisterServiceResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeregisterServiceResponse::~DeregisterServiceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.DeregisterServiceResponse)
  SharedDtor();
}

void DeregisterServiceResponse::SharedDtor() {
}

void DeregisterServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterServiceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeregisterServiceResponse& DeregisterServiceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsDeregisterServiceResponse();
  return *internal_default_instance();
}

DeregisterServiceResponse* DeregisterServiceResponse::New(::google::protobuf::Arena* arena) const {
  DeregisterServiceResponse* n = new DeregisterServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeregisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.DeregisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeregisterServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.DeregisterServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.DeregisterServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.DeregisterServiceResponse)
  return false;
#undef DO_
}

void DeregisterServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.DeregisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.DeregisterServiceResponse)
}

::google::protobuf::uint8* DeregisterServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.DeregisterServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.DeregisterServiceResponse)
  return target;
}

size_t DeregisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.DeregisterServiceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.DeregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.DeregisterServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.DeregisterServiceResponse)
    MergeFrom(*source);
  }
}

void DeregisterServiceResponse::MergeFrom(const DeregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.DeregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeregisterServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.DeregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterServiceResponse::CopyFrom(const DeregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.DeregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterServiceResponse::IsInitialized() const {
  return true;
}

void DeregisterServiceResponse::Swap(DeregisterServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterServiceResponse::InternalSwap(DeregisterServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterServiceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNeighbourNodesByDistanceLocalRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighbourNodesByDistanceLocalRequest::kKeepAliveAndSendUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceLocalRequest::GetNeighbourNodesByDistanceLocalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceLocalRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}
GetNeighbourNodesByDistanceLocalRequest::GetNeighbourNodesByDistanceLocalRequest(const GetNeighbourNodesByDistanceLocalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keep_alive_and_send_updates_ = from.keep_alive_and_send_updates_;
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}

void GetNeighbourNodesByDistanceLocalRequest::SharedCtor() {
  keep_alive_and_send_updates_ = false;
  _cached_size_ = 0;
}

GetNeighbourNodesByDistanceLocalRequest::~GetNeighbourNodesByDistanceLocalRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  SharedDtor();
}

void GetNeighbourNodesByDistanceLocalRequest::SharedDtor() {
}

void GetNeighbourNodesByDistanceLocalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceLocalRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNeighbourNodesByDistanceLocalRequest& GetNeighbourNodesByDistanceLocalRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceLocalRequest();
  return *internal_default_instance();
}

GetNeighbourNodesByDistanceLocalRequest* GetNeighbourNodesByDistanceLocalRequest::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceLocalRequest* n = new GetNeighbourNodesByDistanceLocalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceLocalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keep_alive_and_send_updates_ = false;
  _internal_metadata_.Clear();
}

bool GetNeighbourNodesByDistanceLocalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool keep_alive_and_send_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_alive_and_send_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceLocalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_alive_and_send_updates = 1;
  if (this->keep_alive_and_send_updates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keep_alive_and_send_updates(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceLocalRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_alive_and_send_updates = 1;
  if (this->keep_alive_and_send_updates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keep_alive_and_send_updates(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  return target;
}

size_t GetNeighbourNodesByDistanceLocalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool keep_alive_and_send_updates = 1;
  if (this->keep_alive_and_send_updates() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceLocalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNeighbourNodesByDistanceLocalRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceLocalRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceLocalRequest::MergeFrom(const GetNeighbourNodesByDistanceLocalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keep_alive_and_send_updates() != 0) {
    set_keep_alive_and_send_updates(from.keep_alive_and_send_updates());
  }
}

void GetNeighbourNodesByDistanceLocalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceLocalRequest::CopyFrom(const GetNeighbourNodesByDistanceLocalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceLocalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceLocalRequest::IsInitialized() const {
  return true;
}

void GetNeighbourNodesByDistanceLocalRequest::Swap(GetNeighbourNodesByDistanceLocalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceLocalRequest::InternalSwap(GetNeighbourNodesByDistanceLocalRequest* other) {
  using std::swap;
  swap(keep_alive_and_send_updates_, other->keep_alive_and_send_updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceLocalRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNeighbourNodesByDistanceResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNeighbourNodesByDistanceResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceResponse::GetNeighbourNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
}
GetNeighbourNodesByDistanceResponse::GetNeighbourNodesByDistanceResponse(const GetNeighbourNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
}

void GetNeighbourNodesByDistanceResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetNeighbourNodesByDistanceResponse::~GetNeighbourNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceResponse)
  SharedDtor();
}

void GetNeighbourNodesByDistanceResponse::SharedDtor() {
}

void GetNeighbourNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNeighbourNodesByDistanceResponse& GetNeighbourNodesByDistanceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceResponse();
  return *internal_default_instance();
}

GetNeighbourNodesByDistanceResponse* GetNeighbourNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceResponse* n = new GetNeighbourNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool GetNeighbourNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceResponse)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceResponse)
  return target;
}

size_t GetNeighbourNodesByDistanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNeighbourNodesByDistanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceResponse::MergeFrom(const GetNeighbourNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetNeighbourNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceResponse::CopyFrom(const GetNeighbourNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceResponse::IsInitialized() const {
  return true;
}

void GetNeighbourNodesByDistanceResponse::Swap(GetNeighbourNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceResponse::InternalSwap(GetNeighbourNodesByDistanceResponse* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeighbourhoodChange::InitAsDefaultInstance() {
  ::iop::locnet::_NeighbourhoodChange_default_instance_.added_node_info_ = const_cast< ::iop::locnet::NodeInfo*>(
      ::iop::locnet::NodeInfo::internal_default_instance());
  ::iop::locnet::_NeighbourhoodChange_default_instance_.updated_node_info_ = const_cast< ::iop::locnet::NodeInfo*>(
      ::iop::locnet::NodeInfo::internal_default_instance());
  ::iop::locnet::_NeighbourhoodChange_default_instance_.removed_node_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NeighbourhoodChange::set_allocated_added_node_info(::iop::locnet::NodeInfo* added_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ChangeType();
  if (added_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      added_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, added_node_info, submessage_arena);
    }
    set_has_added_node_info();
    ChangeType_.added_node_info_ = added_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NeighbourhoodChange.added_node_info)
}
void NeighbourhoodChange::set_allocated_updated_node_info(::iop::locnet::NodeInfo* updated_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ChangeType();
  if (updated_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_node_info, submessage_arena);
    }
    set_has_updated_node_info();
    ChangeType_.updated_node_info_ = updated_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.NeighbourhoodChange.updated_node_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighbourhoodChange::kAddedNodeInfoFieldNumber;
const int NeighbourhoodChange::kUpdatedNodeInfoFieldNumber;
const int NeighbourhoodChange::kRemovedNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChange::NeighbourhoodChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChange)
}
NeighbourhoodChange::NeighbourhoodChange(const NeighbourhoodChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ChangeType();
  switch (from.ChangeType_case()) {
    case kAddedNodeInfo: {
      mutable_added_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.added_node_info());
      break;
    }
    case kUpdatedNodeInfo: {
      mutable_updated_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.updated_node_info());
      break;
    }
    case kRemovedNodeId: {
      set_removed_node_id(from.removed_node_id());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChange)
}

void NeighbourhoodChange::SharedCtor() {
  clear_has_ChangeType();
  _cached_size_ = 0;
}

NeighbourhoodChange::~NeighbourhoodChange() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChange)
  SharedDtor();
}

void NeighbourhoodChange::SharedDtor() {
  if (has_ChangeType()) {
    clear_ChangeType();
  }
}

void NeighbourhoodChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChange::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeighbourhoodChange& NeighbourhoodChange::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChange();
  return *internal_default_instance();
}

NeighbourhoodChange* NeighbourhoodChange::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChange* n = new NeighbourhoodChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChange::clear_ChangeType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.NeighbourhoodChange)
  switch (ChangeType_case()) {
    case kAddedNodeInfo: {
      delete ChangeType_.added_node_info_;
      break;
    }
    case kUpdatedNodeInfo: {
      delete ChangeType_.updated_node_info_;
      break;
    }
    case kRemovedNodeId: {
      ChangeType_.removed_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGETYPE_NOT_SET;
}


void NeighbourhoodChange::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ChangeType();
  _internal_metadata_.Clear();
}

bool NeighbourhoodChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.NodeInfo added_node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_added_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.NodeInfo updated_node_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes removed_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_removed_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChange)
  return false;
#undef DO_
}

void NeighbourhoodChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo added_node_info = 1;
  if (has_added_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ChangeType_.added_node_info_, output);
  }

  // .iop.locnet.NodeInfo updated_node_info = 2;
  if (has_updated_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ChangeType_.updated_node_info_, output);
  }

  // bytes removed_node_id = 3;
  if (has_removed_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->removed_node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChange)
}

::google::protobuf::uint8* NeighbourhoodChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo added_node_info = 1;
  if (has_added_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *ChangeType_.added_node_info_, deterministic, target);
  }

  // .iop.locnet.NodeInfo updated_node_info = 2;
  if (has_updated_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *ChangeType_.updated_node_info_, deterministic, target);
  }

  // bytes removed_node_id = 3;
  if (has_removed_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->removed_node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChange)
  return target;
}

size_t NeighbourhoodChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ChangeType_case()) {
    // .iop.locnet.NodeInfo added_node_info = 1;
    case kAddedNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ChangeType_.added_node_info_);
      break;
    }
    // .iop.locnet.NodeInfo updated_node_info = 2;
    case kUpdatedNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ChangeType_.updated_node_info_);
      break;
    }
    // bytes removed_node_id = 3;
    case kRemovedNodeId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->removed_node_id());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChange)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighbourhoodChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChange)
    MergeFrom(*source);
  }
}

void NeighbourhoodChange::MergeFrom(const NeighbourhoodChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ChangeType_case()) {
    case kAddedNodeInfo: {
      mutable_added_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.added_node_info());
      break;
    }
    case kUpdatedNodeInfo: {
      mutable_updated_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.updated_node_info());
      break;
    }
    case kRemovedNodeId: {
      set_removed_node_id(from.removed_node_id());
      break;
    }
    case CHANGETYPE_NOT_SET: {
      break;
    }
  }
}

void NeighbourhoodChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChange::CopyFrom(const NeighbourhoodChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChange::IsInitialized() const {
  return true;
}

void NeighbourhoodChange::Swap(NeighbourhoodChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChange::InternalSwap(NeighbourhoodChange* other) {
  using std::swap;
  swap(ChangeType_, other->ChangeType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChange::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeighbourhoodChangedNotificationRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighbourhoodChangedNotificationRequest::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChangedNotificationRequest::NeighbourhoodChangedNotificationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
}
NeighbourhoodChangedNotificationRequest::NeighbourhoodChangedNotificationRequest(const NeighbourhoodChangedNotificationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      changes_(from.changes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
}

void NeighbourhoodChangedNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
}

NeighbourhoodChangedNotificationRequest::~NeighbourhoodChangedNotificationRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChangedNotificationRequest)
  SharedDtor();
}

void NeighbourhoodChangedNotificationRequest::SharedDtor() {
}

void NeighbourhoodChangedNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeighbourhoodChangedNotificationRequest& NeighbourhoodChangedNotificationRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationRequest();
  return *internal_default_instance();
}

NeighbourhoodChangedNotificationRequest* NeighbourhoodChangedNotificationRequest::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChangedNotificationRequest* n = new NeighbourhoodChangedNotificationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChangedNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  _internal_metadata_.Clear();
}

bool NeighbourhoodChangedNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NeighbourhoodChange changes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return false;
#undef DO_
}

void NeighbourhoodChangedNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChangedNotificationRequest)
}

::google::protobuf::uint8* NeighbourhoodChangedNotificationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->changes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->changes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChangedNotificationRequest)
  return target;
}

size_t NeighbourhoodChangedNotificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.NeighbourhoodChange changes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->changes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChangedNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighbourhoodChangedNotificationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChangedNotificationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChangedNotificationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChangedNotificationRequest)
    MergeFrom(*source);
  }
}

void NeighbourhoodChangedNotificationRequest::MergeFrom(const NeighbourhoodChangedNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
}

void NeighbourhoodChangedNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChangedNotificationRequest::CopyFrom(const NeighbourhoodChangedNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChangedNotificationRequest::IsInitialized() const {
  return true;
}

void NeighbourhoodChangedNotificationRequest::Swap(NeighbourhoodChangedNotificationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChangedNotificationRequest::InternalSwap(NeighbourhoodChangedNotificationRequest* other) {
  using std::swap;
  changes_.InternalSwap(&other->changes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChangedNotificationRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeighbourhoodChangedNotificationResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighbourhoodChangedNotificationResponse::NeighbourhoodChangedNotificationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
}
NeighbourhoodChangedNotificationResponse::NeighbourhoodChangedNotificationResponse(const NeighbourhoodChangedNotificationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

void NeighbourhoodChangedNotificationResponse::SharedCtor() {
  _cached_size_ = 0;
}

NeighbourhoodChangedNotificationResponse::~NeighbourhoodChangedNotificationResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.NeighbourhoodChangedNotificationResponse)
  SharedDtor();
}

void NeighbourhoodChangedNotificationResponse::SharedDtor() {
}

void NeighbourhoodChangedNotificationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighbourhoodChangedNotificationResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeighbourhoodChangedNotificationResponse& NeighbourhoodChangedNotificationResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsNeighbourhoodChangedNotificationResponse();
  return *internal_default_instance();
}

NeighbourhoodChangedNotificationResponse* NeighbourhoodChangedNotificationResponse::New(::google::protobuf::Arena* arena) const {
  NeighbourhoodChangedNotificationResponse* n = new NeighbourhoodChangedNotificationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighbourhoodChangedNotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NeighbourhoodChangedNotificationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return false;
#undef DO_
}

void NeighbourhoodChangedNotificationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.NeighbourhoodChangedNotificationResponse)
}

::google::protobuf::uint8* NeighbourhoodChangedNotificationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.NeighbourhoodChangedNotificationResponse)
  return target;
}

size_t NeighbourhoodChangedNotificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighbourhoodChangedNotificationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighbourhoodChangedNotificationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighbourhoodChangedNotificationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.NeighbourhoodChangedNotificationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.NeighbourhoodChangedNotificationResponse)
    MergeFrom(*source);
  }
}

void NeighbourhoodChangedNotificationResponse::MergeFrom(const NeighbourhoodChangedNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NeighbourhoodChangedNotificationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighbourhoodChangedNotificationResponse::CopyFrom(const NeighbourhoodChangedNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.NeighbourhoodChangedNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighbourhoodChangedNotificationResponse::IsInitialized() const {
  return true;
}

void NeighbourhoodChangedNotificationResponse::Swap(NeighbourhoodChangedNotificationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighbourhoodChangedNotificationResponse::InternalSwap(NeighbourhoodChangedNotificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighbourhoodChangedNotificationResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteNodeRequest::InitAsDefaultInstance() {
  ::iop::locnet::_RemoteNodeRequest_default_instance_.accept_colleague_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(
      ::iop::locnet::BuildNetworkRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.renew_colleague_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(
      ::iop::locnet::BuildNetworkRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.accept_neighbour_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(
      ::iop::locnet::BuildNetworkRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.renew_neighbour_ = const_cast< ::iop::locnet::BuildNetworkRequest*>(
      ::iop::locnet::BuildNetworkRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.get_node_count_ = const_cast< ::iop::locnet::GetNodeCountRequest*>(
      ::iop::locnet::GetNodeCountRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.get_random_nodes_ = const_cast< ::iop::locnet::GetRandomNodesRequest*>(
      ::iop::locnet::GetRandomNodesRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.get_closest_nodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceRequest*>(
      ::iop::locnet::GetClosestNodesByDistanceRequest::internal_default_instance());
  ::iop::locnet::_RemoteNodeRequest_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoRequest*>(
      ::iop::locnet::GetNodeInfoRequest::internal_default_instance());
}
void RemoteNodeRequest::set_allocated_accept_colleague(::iop::locnet::BuildNetworkRequest* accept_colleague) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (accept_colleague) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_colleague = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_colleague, submessage_arena);
    }
    set_has_accept_colleague();
    RemoteNodeRequestType_.accept_colleague_ = accept_colleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.accept_colleague)
}
void RemoteNodeRequest::set_allocated_renew_colleague(::iop::locnet::BuildNetworkRequest* renew_colleague) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (renew_colleague) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      renew_colleague = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, renew_colleague, submessage_arena);
    }
    set_has_renew_colleague();
    RemoteNodeRequestType_.renew_colleague_ = renew_colleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.renew_colleague)
}
void RemoteNodeRequest::set_allocated_accept_neighbour(::iop::locnet::BuildNetworkRequest* accept_neighbour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (accept_neighbour) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_neighbour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_neighbour, submessage_arena);
    }
    set_has_accept_neighbour();
    RemoteNodeRequestType_.accept_neighbour_ = accept_neighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.accept_neighbour)
}
void RemoteNodeRequest::set_allocated_renew_neighbour(::iop::locnet::BuildNetworkRequest* renew_neighbour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (renew_neighbour) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      renew_neighbour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, renew_neighbour, submessage_arena);
    }
    set_has_renew_neighbour();
    RemoteNodeRequestType_.renew_neighbour_ = renew_neighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.renew_neighbour)
}
void RemoteNodeRequest::set_allocated_get_node_count(::iop::locnet::GetNodeCountRequest* get_node_count) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (get_node_count) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_count = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_count, submessage_arena);
    }
    set_has_get_node_count();
    RemoteNodeRequestType_.get_node_count_ = get_node_count;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.get_node_count)
}
void RemoteNodeRequest::set_allocated_get_random_nodes(::iop::locnet::GetRandomNodesRequest* get_random_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (get_random_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_random_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_random_nodes, submessage_arena);
    }
    set_has_get_random_nodes();
    RemoteNodeRequestType_.get_random_nodes_ = get_random_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.get_random_nodes)
}
void RemoteNodeRequest::set_allocated_get_closest_nodes(::iop::locnet::GetClosestNodesByDistanceRequest* get_closest_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (get_closest_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_closest_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_closest_nodes, submessage_arena);
    }
    set_has_get_closest_nodes();
    RemoteNodeRequestType_.get_closest_nodes_ = get_closest_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.get_closest_nodes)
}
void RemoteNodeRequest::set_allocated_get_node_info(::iop::locnet::GetNodeInfoRequest* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeRequestType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    RemoteNodeRequestType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeRequest.get_node_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteNodeRequest::kAcceptColleagueFieldNumber;
const int RemoteNodeRequest::kRenewColleagueFieldNumber;
const int RemoteNodeRequest::kAcceptNeighbourFieldNumber;
const int RemoteNodeRequest::kRenewNeighbourFieldNumber;
const int RemoteNodeRequest::kGetNodeCountFieldNumber;
const int RemoteNodeRequest::kGetRandomNodesFieldNumber;
const int RemoteNodeRequest::kGetClosestNodesFieldNumber;
const int RemoteNodeRequest::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteNodeRequest::RemoteNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RemoteNodeRequest)
}
RemoteNodeRequest::RemoteNodeRequest(const RemoteNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_RemoteNodeRequestType();
  switch (from.RemoteNodeRequestType_case()) {
    case kAcceptColleague: {
      mutable_accept_colleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.accept_colleague());
      break;
    }
    case kRenewColleague: {
      mutable_renew_colleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renew_colleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_accept_neighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.accept_neighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renew_neighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renew_neighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_get_node_count()->::iop::locnet::GetNodeCountRequest::MergeFrom(from.get_node_count());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesRequest::MergeFrom(from.get_random_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RemoteNodeRequest)
}

void RemoteNodeRequest::SharedCtor() {
  clear_has_RemoteNodeRequestType();
  _cached_size_ = 0;
}

RemoteNodeRequest::~RemoteNodeRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.RemoteNodeRequest)
  SharedDtor();
}

void RemoteNodeRequest::SharedDtor() {
  if (has_RemoteNodeRequestType()) {
    clear_RemoteNodeRequestType();
  }
}

void RemoteNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteNodeRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteNodeRequest& RemoteNodeRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeRequest();
  return *internal_default_instance();
}

RemoteNodeRequest* RemoteNodeRequest::New(::google::protobuf::Arena* arena) const {
  RemoteNodeRequest* n = new RemoteNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteNodeRequest::clear_RemoteNodeRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.RemoteNodeRequest)
  switch (RemoteNodeRequestType_case()) {
    case kAcceptColleague: {
      delete RemoteNodeRequestType_.accept_colleague_;
      break;
    }
    case kRenewColleague: {
      delete RemoteNodeRequestType_.renew_colleague_;
      break;
    }
    case kAcceptNeighbour: {
      delete RemoteNodeRequestType_.accept_neighbour_;
      break;
    }
    case kRenewNeighbour: {
      delete RemoteNodeRequestType_.renew_neighbour_;
      break;
    }
    case kGetNodeCount: {
      delete RemoteNodeRequestType_.get_node_count_;
      break;
    }
    case kGetRandomNodes: {
      delete RemoteNodeRequestType_.get_random_nodes_;
      break;
    }
    case kGetClosestNodes: {
      delete RemoteNodeRequestType_.get_closest_nodes_;
      break;
    }
    case kGetNodeInfo: {
      delete RemoteNodeRequestType_.get_node_info_;
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOTENODEREQUESTTYPE_NOT_SET;
}


void RemoteNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RemoteNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_RemoteNodeRequestType();
  _internal_metadata_.Clear();
}

bool RemoteNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RemoteNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.BuildNetworkRequest accept_colleague = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_colleague()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkRequest renew_colleague = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_renew_colleague()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkRequest accept_neighbour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_neighbour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkRequest renew_neighbour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_renew_neighbour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeCountRequest get_node_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetRandomNodesRequest get_random_nodes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_random_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_closest_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeInfoRequest get_node_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RemoteNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RemoteNodeRequest)
  return false;
#undef DO_
}

void RemoteNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RemoteNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.BuildNetworkRequest accept_colleague = 1;
  if (has_accept_colleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *RemoteNodeRequestType_.accept_colleague_, output);
  }

  // .iop.locnet.BuildNetworkRequest renew_colleague = 2;
  if (has_renew_colleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RemoteNodeRequestType_.renew_colleague_, output);
  }

  // .iop.locnet.BuildNetworkRequest accept_neighbour = 3;
  if (has_accept_neighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RemoteNodeRequestType_.accept_neighbour_, output);
  }

  // .iop.locnet.BuildNetworkRequest renew_neighbour = 4;
  if (has_renew_neighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RemoteNodeRequestType_.renew_neighbour_, output);
  }

  // .iop.locnet.GetNodeCountRequest get_node_count = 5;
  if (has_get_node_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *RemoteNodeRequestType_.get_node_count_, output);
  }

  // .iop.locnet.GetRandomNodesRequest get_random_nodes = 6;
  if (has_get_random_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *RemoteNodeRequestType_.get_random_nodes_, output);
  }

  // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 7;
  if (has_get_closest_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *RemoteNodeRequestType_.get_closest_nodes_, output);
  }

  // .iop.locnet.GetNodeInfoRequest get_node_info = 8;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *RemoteNodeRequestType_.get_node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.RemoteNodeRequest)
}

::google::protobuf::uint8* RemoteNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RemoteNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.BuildNetworkRequest accept_colleague = 1;
  if (has_accept_colleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *RemoteNodeRequestType_.accept_colleague_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkRequest renew_colleague = 2;
  if (has_renew_colleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *RemoteNodeRequestType_.renew_colleague_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkRequest accept_neighbour = 3;
  if (has_accept_neighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *RemoteNodeRequestType_.accept_neighbour_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkRequest renew_neighbour = 4;
  if (has_renew_neighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *RemoteNodeRequestType_.renew_neighbour_, deterministic, target);
  }

  // .iop.locnet.GetNodeCountRequest get_node_count = 5;
  if (has_get_node_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *RemoteNodeRequestType_.get_node_count_, deterministic, target);
  }

  // .iop.locnet.GetRandomNodesRequest get_random_nodes = 6;
  if (has_get_random_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *RemoteNodeRequestType_.get_random_nodes_, deterministic, target);
  }

  // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 7;
  if (has_get_closest_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *RemoteNodeRequestType_.get_closest_nodes_, deterministic, target);
  }

  // .iop.locnet.GetNodeInfoRequest get_node_info = 8;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *RemoteNodeRequestType_.get_node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RemoteNodeRequest)
  return target;
}

size_t RemoteNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RemoteNodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (RemoteNodeRequestType_case()) {
    // .iop.locnet.BuildNetworkRequest accept_colleague = 1;
    case kAcceptColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.accept_colleague_);
      break;
    }
    // .iop.locnet.BuildNetworkRequest renew_colleague = 2;
    case kRenewColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.renew_colleague_);
      break;
    }
    // .iop.locnet.BuildNetworkRequest accept_neighbour = 3;
    case kAcceptNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.accept_neighbour_);
      break;
    }
    // .iop.locnet.BuildNetworkRequest renew_neighbour = 4;
    case kRenewNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.renew_neighbour_);
      break;
    }
    // .iop.locnet.GetNodeCountRequest get_node_count = 5;
    case kGetNodeCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.get_node_count_);
      break;
    }
    // .iop.locnet.GetRandomNodesRequest get_random_nodes = 6;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.get_random_nodes_);
      break;
    }
    // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 7;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.get_closest_nodes_);
      break;
    }
    // .iop.locnet.GetNodeInfoRequest get_node_info = 8;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeRequestType_.get_node_info_);
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RemoteNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RemoteNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RemoteNodeRequest)
    MergeFrom(*source);
  }
}

void RemoteNodeRequest::MergeFrom(const RemoteNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RemoteNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.RemoteNodeRequestType_case()) {
    case kAcceptColleague: {
      mutable_accept_colleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.accept_colleague());
      break;
    }
    case kRenewColleague: {
      mutable_renew_colleague()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renew_colleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_accept_neighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.accept_neighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renew_neighbour()->::iop::locnet::BuildNetworkRequest::MergeFrom(from.renew_neighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_get_node_count()->::iop::locnet::GetNodeCountRequest::MergeFrom(from.get_node_count());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesRequest::MergeFrom(from.get_random_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case REMOTENODEREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RemoteNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteNodeRequest::CopyFrom(const RemoteNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RemoteNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteNodeRequest::IsInitialized() const {
  return true;
}

void RemoteNodeRequest::Swap(RemoteNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteNodeRequest::InternalSwap(RemoteNodeRequest* other) {
  using std::swap;
  swap(RemoteNodeRequestType_, other->RemoteNodeRequestType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteNodeRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteNodeResponse::InitAsDefaultInstance() {
  ::iop::locnet::_RemoteNodeResponse_default_instance_.accept_colleague_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(
      ::iop::locnet::BuildNetworkResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.renew_colleague_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(
      ::iop::locnet::BuildNetworkResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.accept_neighbour_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(
      ::iop::locnet::BuildNetworkResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.renew_neighbour_ = const_cast< ::iop::locnet::BuildNetworkResponse*>(
      ::iop::locnet::BuildNetworkResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.get_node_count_ = const_cast< ::iop::locnet::GetNodeCountResponse*>(
      ::iop::locnet::GetNodeCountResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.get_random_nodes_ = const_cast< ::iop::locnet::GetRandomNodesResponse*>(
      ::iop::locnet::GetRandomNodesResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.get_closest_nodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceResponse*>(
      ::iop::locnet::GetClosestNodesByDistanceResponse::internal_default_instance());
  ::iop::locnet::_RemoteNodeResponse_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoResponse*>(
      ::iop::locnet::GetNodeInfoResponse::internal_default_instance());
}
void RemoteNodeResponse::set_allocated_accept_colleague(::iop::locnet::BuildNetworkResponse* accept_colleague) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (accept_colleague) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_colleague = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_colleague, submessage_arena);
    }
    set_has_accept_colleague();
    RemoteNodeResponseType_.accept_colleague_ = accept_colleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.accept_colleague)
}
void RemoteNodeResponse::set_allocated_renew_colleague(::iop::locnet::BuildNetworkResponse* renew_colleague) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (renew_colleague) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      renew_colleague = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, renew_colleague, submessage_arena);
    }
    set_has_renew_colleague();
    RemoteNodeResponseType_.renew_colleague_ = renew_colleague;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.renew_colleague)
}
void RemoteNodeResponse::set_allocated_accept_neighbour(::iop::locnet::BuildNetworkResponse* accept_neighbour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (accept_neighbour) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_neighbour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_neighbour, submessage_arena);
    }
    set_has_accept_neighbour();
    RemoteNodeResponseType_.accept_neighbour_ = accept_neighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.accept_neighbour)
}
void RemoteNodeResponse::set_allocated_renew_neighbour(::iop::locnet::BuildNetworkResponse* renew_neighbour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (renew_neighbour) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      renew_neighbour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, renew_neighbour, submessage_arena);
    }
    set_has_renew_neighbour();
    RemoteNodeResponseType_.renew_neighbour_ = renew_neighbour;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.renew_neighbour)
}
void RemoteNodeResponse::set_allocated_get_node_count(::iop::locnet::GetNodeCountResponse* get_node_count) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (get_node_count) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_count = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_count, submessage_arena);
    }
    set_has_get_node_count();
    RemoteNodeResponseType_.get_node_count_ = get_node_count;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.get_node_count)
}
void RemoteNodeResponse::set_allocated_get_random_nodes(::iop::locnet::GetRandomNodesResponse* get_random_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (get_random_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_random_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_random_nodes, submessage_arena);
    }
    set_has_get_random_nodes();
    RemoteNodeResponseType_.get_random_nodes_ = get_random_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.get_random_nodes)
}
void RemoteNodeResponse::set_allocated_get_closest_nodes(::iop::locnet::GetClosestNodesByDistanceResponse* get_closest_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (get_closest_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_closest_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_closest_nodes, submessage_arena);
    }
    set_has_get_closest_nodes();
    RemoteNodeResponseType_.get_closest_nodes_ = get_closest_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.get_closest_nodes)
}
void RemoteNodeResponse::set_allocated_get_node_info(::iop::locnet::GetNodeInfoResponse* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RemoteNodeResponseType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    RemoteNodeResponseType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.RemoteNodeResponse.get_node_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteNodeResponse::kAcceptColleagueFieldNumber;
const int RemoteNodeResponse::kRenewColleagueFieldNumber;
const int RemoteNodeResponse::kAcceptNeighbourFieldNumber;
const int RemoteNodeResponse::kRenewNeighbourFieldNumber;
const int RemoteNodeResponse::kGetNodeCountFieldNumber;
const int RemoteNodeResponse::kGetRandomNodesFieldNumber;
const int RemoteNodeResponse::kGetClosestNodesFieldNumber;
const int RemoteNodeResponse::kGetNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteNodeResponse::RemoteNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.RemoteNodeResponse)
}
RemoteNodeResponse::RemoteNodeResponse(const RemoteNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_RemoteNodeResponseType();
  switch (from.RemoteNodeResponseType_case()) {
    case kAcceptColleague: {
      mutable_accept_colleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.accept_colleague());
      break;
    }
    case kRenewColleague: {
      mutable_renew_colleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renew_colleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_accept_neighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.accept_neighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renew_neighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renew_neighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_get_node_count()->::iop::locnet::GetNodeCountResponse::MergeFrom(from.get_node_count());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesResponse::MergeFrom(from.get_random_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.RemoteNodeResponse)
}

void RemoteNodeResponse::SharedCtor() {
  clear_has_RemoteNodeResponseType();
  _cached_size_ = 0;
}

RemoteNodeResponse::~RemoteNodeResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.RemoteNodeResponse)
  SharedDtor();
}

void RemoteNodeResponse::SharedDtor() {
  if (has_RemoteNodeResponseType()) {
    clear_RemoteNodeResponseType();
  }
}

void RemoteNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteNodeResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteNodeResponse& RemoteNodeResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsRemoteNodeResponse();
  return *internal_default_instance();
}

RemoteNodeResponse* RemoteNodeResponse::New(::google::protobuf::Arena* arena) const {
  RemoteNodeResponse* n = new RemoteNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteNodeResponse::clear_RemoteNodeResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.RemoteNodeResponse)
  switch (RemoteNodeResponseType_case()) {
    case kAcceptColleague: {
      delete RemoteNodeResponseType_.accept_colleague_;
      break;
    }
    case kRenewColleague: {
      delete RemoteNodeResponseType_.renew_colleague_;
      break;
    }
    case kAcceptNeighbour: {
      delete RemoteNodeResponseType_.accept_neighbour_;
      break;
    }
    case kRenewNeighbour: {
      delete RemoteNodeResponseType_.renew_neighbour_;
      break;
    }
    case kGetNodeCount: {
      delete RemoteNodeResponseType_.get_node_count_;
      break;
    }
    case kGetRandomNodes: {
      delete RemoteNodeResponseType_.get_random_nodes_;
      break;
    }
    case kGetClosestNodes: {
      delete RemoteNodeResponseType_.get_closest_nodes_;
      break;
    }
    case kGetNodeInfo: {
      delete RemoteNodeResponseType_.get_node_info_;
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REMOTENODERESPONSETYPE_NOT_SET;
}


void RemoteNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.RemoteNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_RemoteNodeResponseType();
  _internal_metadata_.Clear();
}

bool RemoteNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.RemoteNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.BuildNetworkResponse accept_colleague = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_colleague()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkResponse renew_colleague = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_renew_colleague()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkResponse accept_neighbour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_neighbour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.BuildNetworkResponse renew_neighbour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_renew_neighbour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeCountResponse get_node_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetRandomNodesResponse get_random_nodes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_random_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_closest_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNodeInfoResponse get_node_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.RemoteNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.RemoteNodeResponse)
  return false;
#undef DO_
}

void RemoteNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.RemoteNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.BuildNetworkResponse accept_colleague = 1;
  if (has_accept_colleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *RemoteNodeResponseType_.accept_colleague_, output);
  }

  // .iop.locnet.BuildNetworkResponse renew_colleague = 2;
  if (has_renew_colleague()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RemoteNodeResponseType_.renew_colleague_, output);
  }

  // .iop.locnet.BuildNetworkResponse accept_neighbour = 3;
  if (has_accept_neighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RemoteNodeResponseType_.accept_neighbour_, output);
  }

  // .iop.locnet.BuildNetworkResponse renew_neighbour = 4;
  if (has_renew_neighbour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RemoteNodeResponseType_.renew_neighbour_, output);
  }

  // .iop.locnet.GetNodeCountResponse get_node_count = 5;
  if (has_get_node_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *RemoteNodeResponseType_.get_node_count_, output);
  }

  // .iop.locnet.GetRandomNodesResponse get_random_nodes = 6;
  if (has_get_random_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *RemoteNodeResponseType_.get_random_nodes_, output);
  }

  // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 7;
  if (has_get_closest_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *RemoteNodeResponseType_.get_closest_nodes_, output);
  }

  // .iop.locnet.GetNodeInfoResponse get_node_info = 8;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *RemoteNodeResponseType_.get_node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.RemoteNodeResponse)
}

::google::protobuf::uint8* RemoteNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.RemoteNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.BuildNetworkResponse accept_colleague = 1;
  if (has_accept_colleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *RemoteNodeResponseType_.accept_colleague_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkResponse renew_colleague = 2;
  if (has_renew_colleague()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *RemoteNodeResponseType_.renew_colleague_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkResponse accept_neighbour = 3;
  if (has_accept_neighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *RemoteNodeResponseType_.accept_neighbour_, deterministic, target);
  }

  // .iop.locnet.BuildNetworkResponse renew_neighbour = 4;
  if (has_renew_neighbour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *RemoteNodeResponseType_.renew_neighbour_, deterministic, target);
  }

  // .iop.locnet.GetNodeCountResponse get_node_count = 5;
  if (has_get_node_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *RemoteNodeResponseType_.get_node_count_, deterministic, target);
  }

  // .iop.locnet.GetRandomNodesResponse get_random_nodes = 6;
  if (has_get_random_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *RemoteNodeResponseType_.get_random_nodes_, deterministic, target);
  }

  // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 7;
  if (has_get_closest_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *RemoteNodeResponseType_.get_closest_nodes_, deterministic, target);
  }

  // .iop.locnet.GetNodeInfoResponse get_node_info = 8;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *RemoteNodeResponseType_.get_node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.RemoteNodeResponse)
  return target;
}

size_t RemoteNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.RemoteNodeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (RemoteNodeResponseType_case()) {
    // .iop.locnet.BuildNetworkResponse accept_colleague = 1;
    case kAcceptColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.accept_colleague_);
      break;
    }
    // .iop.locnet.BuildNetworkResponse renew_colleague = 2;
    case kRenewColleague: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.renew_colleague_);
      break;
    }
    // .iop.locnet.BuildNetworkResponse accept_neighbour = 3;
    case kAcceptNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.accept_neighbour_);
      break;
    }
    // .iop.locnet.BuildNetworkResponse renew_neighbour = 4;
    case kRenewNeighbour: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.renew_neighbour_);
      break;
    }
    // .iop.locnet.GetNodeCountResponse get_node_count = 5;
    case kGetNodeCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.get_node_count_);
      break;
    }
    // .iop.locnet.GetRandomNodesResponse get_random_nodes = 6;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.get_random_nodes_);
      break;
    }
    // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 7;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.get_closest_nodes_);
      break;
    }
    // .iop.locnet.GetNodeInfoResponse get_node_info = 8;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RemoteNodeResponseType_.get_node_info_);
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.RemoteNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.RemoteNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.RemoteNodeResponse)
    MergeFrom(*source);
  }
}

void RemoteNodeResponse::MergeFrom(const RemoteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.RemoteNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.RemoteNodeResponseType_case()) {
    case kAcceptColleague: {
      mutable_accept_colleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.accept_colleague());
      break;
    }
    case kRenewColleague: {
      mutable_renew_colleague()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renew_colleague());
      break;
    }
    case kAcceptNeighbour: {
      mutable_accept_neighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.accept_neighbour());
      break;
    }
    case kRenewNeighbour: {
      mutable_renew_neighbour()->::iop::locnet::BuildNetworkResponse::MergeFrom(from.renew_neighbour());
      break;
    }
    case kGetNodeCount: {
      mutable_get_node_count()->::iop::locnet::GetNodeCountResponse::MergeFrom(from.get_node_count());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesResponse::MergeFrom(from.get_random_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case REMOTENODERESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.RemoteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteNodeResponse::CopyFrom(const RemoteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.RemoteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteNodeResponse::IsInitialized() const {
  return true;
}

void RemoteNodeResponse::Swap(RemoteNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteNodeResponse::InternalSwap(RemoteNodeResponse* other) {
  using std::swap;
  swap(RemoteNodeResponseType_, other->RemoteNodeResponseType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteNodeResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuildNetworkRequest::InitAsDefaultInstance() {
  ::iop::locnet::_BuildNetworkRequest_default_instance_._instance.get_mutable()->requestor_node_info_ = const_cast< ::iop::locnet::NodeInfo*>(
      ::iop::locnet::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildNetworkRequest::kRequestorNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildNetworkRequest::BuildNetworkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.BuildNetworkRequest)
}
BuildNetworkRequest::BuildNetworkRequest(const BuildNetworkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requestor_node_info()) {
    requestor_node_info_ = new ::iop::locnet::NodeInfo(*from.requestor_node_info_);
  } else {
    requestor_node_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.BuildNetworkRequest)
}

void BuildNetworkRequest::SharedCtor() {
  requestor_node_info_ = NULL;
  _cached_size_ = 0;
}

BuildNetworkRequest::~BuildNetworkRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.BuildNetworkRequest)
  SharedDtor();
}

void BuildNetworkRequest::SharedDtor() {
  if (this != internal_default_instance()) delete requestor_node_info_;
}

void BuildNetworkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildNetworkRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuildNetworkRequest& BuildNetworkRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkRequest();
  return *internal_default_instance();
}

BuildNetworkRequest* BuildNetworkRequest::New(::google::protobuf::Arena* arena) const {
  BuildNetworkRequest* n = new BuildNetworkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuildNetworkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.BuildNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && requestor_node_info_ != NULL) {
    delete requestor_node_info_;
  }
  requestor_node_info_ = NULL;
  _internal_metadata_.Clear();
}

bool BuildNetworkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.BuildNetworkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.NodeInfo requestor_node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requestor_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.BuildNetworkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.BuildNetworkRequest)
  return false;
#undef DO_
}

void BuildNetworkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.BuildNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo requestor_node_info = 1;
  if (this->has_requestor_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->requestor_node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.BuildNetworkRequest)
}

::google::protobuf::uint8* BuildNetworkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.BuildNetworkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo requestor_node_info = 1;
  if (this->has_requestor_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->requestor_node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.BuildNetworkRequest)
  return target;
}

size_t BuildNetworkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.BuildNetworkRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.NodeInfo requestor_node_info = 1;
  if (this->has_requestor_node_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->requestor_node_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildNetworkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.BuildNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildNetworkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildNetworkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.BuildNetworkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.BuildNetworkRequest)
    MergeFrom(*source);
  }
}

void BuildNetworkRequest::MergeFrom(const BuildNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.BuildNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestor_node_info()) {
    mutable_requestor_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.requestor_node_info());
  }
}

void BuildNetworkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.BuildNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildNetworkRequest::CopyFrom(const BuildNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.BuildNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildNetworkRequest::IsInitialized() const {
  return true;
}

void BuildNetworkRequest::Swap(BuildNetworkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildNetworkRequest::InternalSwap(BuildNetworkRequest* other) {
  using std::swap;
  swap(requestor_node_info_, other->requestor_node_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildNetworkRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuildNetworkResponse::InitAsDefaultInstance() {
  ::iop::locnet::_BuildNetworkResponse_default_instance_._instance.get_mutable()->acceptor_node_info_ = const_cast< ::iop::locnet::NodeInfo*>(
      ::iop::locnet::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildNetworkResponse::kAcceptedFieldNumber;
const int BuildNetworkResponse::kAcceptorNodeInfoFieldNumber;
const int BuildNetworkResponse::kRemoteIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildNetworkResponse::BuildNetworkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.BuildNetworkResponse)
}
BuildNetworkResponse::BuildNetworkResponse(const BuildNetworkResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_ip_address().size() > 0) {
    remote_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_ip_address_);
  }
  if (from.has_acceptor_node_info()) {
    acceptor_node_info_ = new ::iop::locnet::NodeInfo(*from.acceptor_node_info_);
  } else {
    acceptor_node_info_ = NULL;
  }
  accepted_ = from.accepted_;
  // @@protoc_insertion_point(copy_constructor:iop.locnet.BuildNetworkResponse)
}

void BuildNetworkResponse::SharedCtor() {
  remote_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&acceptor_node_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accepted_) -
      reinterpret_cast<char*>(&acceptor_node_info_)) + sizeof(accepted_));
  _cached_size_ = 0;
}

BuildNetworkResponse::~BuildNetworkResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.BuildNetworkResponse)
  SharedDtor();
}

void BuildNetworkResponse::SharedDtor() {
  remote_ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete acceptor_node_info_;
}

void BuildNetworkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildNetworkResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuildNetworkResponse& BuildNetworkResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsBuildNetworkResponse();
  return *internal_default_instance();
}

BuildNetworkResponse* BuildNetworkResponse::New(::google::protobuf::Arena* arena) const {
  BuildNetworkResponse* n = new BuildNetworkResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuildNetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.BuildNetworkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && acceptor_node_info_ != NULL) {
    delete acceptor_node_info_;
  }
  acceptor_node_info_ = NULL;
  accepted_ = false;
  _internal_metadata_.Clear();
}

bool BuildNetworkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.BuildNetworkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool accepted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.NodeInfo acceptor_node_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceptor_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes remote_ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remote_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.BuildNetworkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.BuildNetworkResponse)
  return false;
#undef DO_
}

void BuildNetworkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.BuildNetworkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accepted = 1;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  // .iop.locnet.NodeInfo acceptor_node_info = 2;
  if (this->has_acceptor_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->acceptor_node_info_, output);
  }

  // bytes remote_ip_address = 3;
  if (this->remote_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->remote_ip_address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.BuildNetworkResponse)
}

::google::protobuf::uint8* BuildNetworkResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.BuildNetworkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accepted = 1;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  // .iop.locnet.NodeInfo acceptor_node_info = 2;
  if (this->has_acceptor_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->acceptor_node_info_, deterministic, target);
  }

  // bytes remote_ip_address = 3;
  if (this->remote_ip_address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->remote_ip_address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.BuildNetworkResponse)
  return target;
}

size_t BuildNetworkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.BuildNetworkResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes remote_ip_address = 3;
  if (this->remote_ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->remote_ip_address());
  }

  // .iop.locnet.NodeInfo acceptor_node_info = 2;
  if (this->has_acceptor_node_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acceptor_node_info_);
  }

  // bool accepted = 1;
  if (this->accepted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildNetworkResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.BuildNetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildNetworkResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildNetworkResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.BuildNetworkResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.BuildNetworkResponse)
    MergeFrom(*source);
  }
}

void BuildNetworkResponse::MergeFrom(const BuildNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.BuildNetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_ip_address().size() > 0) {

    remote_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_ip_address_);
  }
  if (from.has_acceptor_node_info()) {
    mutable_acceptor_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.acceptor_node_info());
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
}

void BuildNetworkResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.BuildNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildNetworkResponse::CopyFrom(const BuildNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.BuildNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildNetworkResponse::IsInitialized() const {
  return true;
}

void BuildNetworkResponse::Swap(BuildNetworkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildNetworkResponse::InternalSwap(BuildNetworkResponse* other) {
  using std::swap;
  remote_ip_address_.Swap(&other->remote_ip_address_);
  swap(acceptor_node_info_, other->acceptor_node_info_);
  swap(accepted_, other->accepted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildNetworkResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNodeCountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeCountRequest::GetNodeCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeCountRequest)
}
GetNodeCountRequest::GetNodeCountRequest(const GetNodeCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeCountRequest)
}

void GetNodeCountRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetNodeCountRequest::~GetNodeCountRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeCountRequest)
  SharedDtor();
}

void GetNodeCountRequest::SharedDtor() {
}

void GetNodeCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeCountRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeCountRequest& GetNodeCountRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountRequest();
  return *internal_default_instance();
}

GetNodeCountRequest* GetNodeCountRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeCountRequest* n = new GetNodeCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetNodeCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeCountRequest)
  return false;
#undef DO_
}

void GetNodeCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeCountRequest)
}

::google::protobuf::uint8* GetNodeCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeCountRequest)
  return target;
}

size_t GetNodeCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeCountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeCountRequest)
    MergeFrom(*source);
  }
}

void GetNodeCountRequest::MergeFrom(const GetNodeCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNodeCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeCountRequest::CopyFrom(const GetNodeCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeCountRequest::IsInitialized() const {
  return true;
}

void GetNodeCountRequest::Swap(GetNodeCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeCountRequest::InternalSwap(GetNodeCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeCountRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNodeCountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeCountResponse::kNodeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeCountResponse::GetNodeCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeCountResponse)
}
GetNodeCountResponse::GetNodeCountResponse(const GetNodeCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_count_ = from.node_count_;
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeCountResponse)
}

void GetNodeCountResponse::SharedCtor() {
  node_count_ = 0u;
  _cached_size_ = 0;
}

GetNodeCountResponse::~GetNodeCountResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeCountResponse)
  SharedDtor();
}

void GetNodeCountResponse::SharedDtor() {
}

void GetNodeCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeCountResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeCountResponse& GetNodeCountResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeCountResponse();
  return *internal_default_instance();
}

GetNodeCountResponse* GetNodeCountResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeCountResponse* n = new GetNodeCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_count_ = 0u;
  _internal_metadata_.Clear();
}

bool GetNodeCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 node_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeCountResponse)
  return false;
#undef DO_
}

void GetNodeCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_count = 1;
  if (this->node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeCountResponse)
}

::google::protobuf::uint8* GetNodeCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_count = 1;
  if (this->node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeCountResponse)
  return target;
}

size_t GetNodeCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeCountResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 node_count = 1;
  if (this->node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeCountResponse)
    MergeFrom(*source);
  }
}

void GetNodeCountResponse::MergeFrom(const GetNodeCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_count() != 0) {
    set_node_count(from.node_count());
  }
}

void GetNodeCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeCountResponse::CopyFrom(const GetNodeCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeCountResponse::IsInitialized() const {
  return true;
}

void GetNodeCountResponse::Swap(GetNodeCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeCountResponse::InternalSwap(GetNodeCountResponse* other) {
  using std::swap;
  swap(node_count_, other->node_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeCountResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRandomNodesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRandomNodesRequest::kMaxNodeCountFieldNumber;
const int GetRandomNodesRequest::kIncludeNeighboursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRandomNodesRequest::GetRandomNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetRandomNodesRequest)
}
GetRandomNodesRequest::GetRandomNodesRequest(const GetRandomNodesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_node_count_, &from.max_node_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_neighbours_) -
    reinterpret_cast<char*>(&max_node_count_)) + sizeof(include_neighbours_));
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetRandomNodesRequest)
}

void GetRandomNodesRequest::SharedCtor() {
  ::memset(&max_node_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_neighbours_) -
      reinterpret_cast<char*>(&max_node_count_)) + sizeof(include_neighbours_));
  _cached_size_ = 0;
}

GetRandomNodesRequest::~GetRandomNodesRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetRandomNodesRequest)
  SharedDtor();
}

void GetRandomNodesRequest::SharedDtor() {
}

void GetRandomNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRandomNodesRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRandomNodesRequest& GetRandomNodesRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesRequest();
  return *internal_default_instance();
}

GetRandomNodesRequest* GetRandomNodesRequest::New(::google::protobuf::Arena* arena) const {
  GetRandomNodesRequest* n = new GetRandomNodesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRandomNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetRandomNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_node_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_neighbours_) -
      reinterpret_cast<char*>(&max_node_count_)) + sizeof(include_neighbours_));
  _internal_metadata_.Clear();
}

bool GetRandomNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetRandomNodesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_node_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_neighbours = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetRandomNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetRandomNodesRequest)
  return false;
#undef DO_
}

void GetRandomNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetRandomNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_node_count = 1;
  if (this->max_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_node_count(), output);
  }

  // bool include_neighbours = 2;
  if (this->include_neighbours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_neighbours(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetRandomNodesRequest)
}

::google::protobuf::uint8* GetRandomNodesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetRandomNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_node_count = 1;
  if (this->max_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_node_count(), target);
  }

  // bool include_neighbours = 2;
  if (this->include_neighbours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_neighbours(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetRandomNodesRequest)
  return target;
}

size_t GetRandomNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetRandomNodesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 max_node_count = 1;
  if (this->max_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_node_count());
  }

  // bool include_neighbours = 2;
  if (this->include_neighbours() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetRandomNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRandomNodesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRandomNodesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetRandomNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetRandomNodesRequest)
    MergeFrom(*source);
  }
}

void GetRandomNodesRequest::MergeFrom(const GetRandomNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetRandomNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_node_count() != 0) {
    set_max_node_count(from.max_node_count());
  }
  if (from.include_neighbours() != 0) {
    set_include_neighbours(from.include_neighbours());
  }
}

void GetRandomNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetRandomNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomNodesRequest::CopyFrom(const GetRandomNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetRandomNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomNodesRequest::IsInitialized() const {
  return true;
}

void GetRandomNodesRequest::Swap(GetRandomNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRandomNodesRequest::InternalSwap(GetRandomNodesRequest* other) {
  using std::swap;
  swap(max_node_count_, other->max_node_count_);
  swap(include_neighbours_, other->include_neighbours_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRandomNodesRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRandomNodesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRandomNodesResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRandomNodesResponse::GetRandomNodesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetRandomNodesResponse)
}
GetRandomNodesResponse::GetRandomNodesResponse(const GetRandomNodesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetRandomNodesResponse)
}

void GetRandomNodesResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetRandomNodesResponse::~GetRandomNodesResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetRandomNodesResponse)
  SharedDtor();
}

void GetRandomNodesResponse::SharedDtor() {
}

void GetRandomNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRandomNodesResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRandomNodesResponse& GetRandomNodesResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetRandomNodesResponse();
  return *internal_default_instance();
}

GetRandomNodesResponse* GetRandomNodesResponse::New(::google::protobuf::Arena* arena) const {
  GetRandomNodesResponse* n = new GetRandomNodesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRandomNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetRandomNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool GetRandomNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetRandomNodesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetRandomNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetRandomNodesResponse)
  return false;
#undef DO_
}

void GetRandomNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetRandomNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetRandomNodesResponse)
}

::google::protobuf::uint8* GetRandomNodesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetRandomNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetRandomNodesResponse)
  return target;
}

size_t GetRandomNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetRandomNodesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRandomNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetRandomNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRandomNodesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRandomNodesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetRandomNodesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetRandomNodesResponse)
    MergeFrom(*source);
  }
}

void GetRandomNodesResponse::MergeFrom(const GetRandomNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetRandomNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetRandomNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetRandomNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomNodesResponse::CopyFrom(const GetRandomNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetRandomNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomNodesResponse::IsInitialized() const {
  return true;
}

void GetRandomNodesResponse::Swap(GetRandomNodesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRandomNodesResponse::InternalSwap(GetRandomNodesResponse* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRandomNodesResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetClosestNodesByDistanceRequest::InitAsDefaultInstance() {
  ::iop::locnet::_GetClosestNodesByDistanceRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::iop::locnet::GpsLocation*>(
      ::iop::locnet::GpsLocation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClosestNodesByDistanceRequest::kLocationFieldNumber;
const int GetClosestNodesByDistanceRequest::kMaxRadiusKmFieldNumber;
const int GetClosestNodesByDistanceRequest::kMaxNodeCountFieldNumber;
const int GetClosestNodesByDistanceRequest::kIncludeNeighboursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClosestNodesByDistanceRequest::GetClosestNodesByDistanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetClosestNodesByDistanceRequest)
}
GetClosestNodesByDistanceRequest::GetClosestNodesByDistanceRequest(const GetClosestNodesByDistanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::iop::locnet::GpsLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&max_radius_km_, &from.max_radius_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_neighbours_) -
    reinterpret_cast<char*>(&max_radius_km_)) + sizeof(include_neighbours_));
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetClosestNodesByDistanceRequest)
}

void GetClosestNodesByDistanceRequest::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_neighbours_) -
      reinterpret_cast<char*>(&location_)) + sizeof(include_neighbours_));
  _cached_size_ = 0;
}

GetClosestNodesByDistanceRequest::~GetClosestNodesByDistanceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetClosestNodesByDistanceRequest)
  SharedDtor();
}

void GetClosestNodesByDistanceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void GetClosestNodesByDistanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetClosestNodesByDistanceRequest& GetClosestNodesByDistanceRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceRequest();
  return *internal_default_instance();
}

GetClosestNodesByDistanceRequest* GetClosestNodesByDistanceRequest::New(::google::protobuf::Arena* arena) const {
  GetClosestNodesByDistanceRequest* n = new GetClosestNodesByDistanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClosestNodesByDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetClosestNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&max_radius_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_neighbours_) -
      reinterpret_cast<char*>(&max_radius_km_)) + sizeof(include_neighbours_));
  _internal_metadata_.Clear();
}

bool GetClosestNodesByDistanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetClosestNodesByDistanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_radius_km = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radius_km_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_node_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_neighbours = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetClosestNodesByDistanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetClosestNodesByDistanceRequest)
  return false;
#undef DO_
}

void GetClosestNodesByDistanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetClosestNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // float max_radius_km = 2;
  if (this->max_radius_km() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_radius_km(), output);
  }

  // uint32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_node_count(), output);
  }

  // bool include_neighbours = 4;
  if (this->include_neighbours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_neighbours(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetClosestNodesByDistanceRequest)
}

::google::protobuf::uint8* GetClosestNodesByDistanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetClosestNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // float max_radius_km = 2;
  if (this->max_radius_km() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_radius_km(), target);
  }

  // uint32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_node_count(), target);
  }

  // bool include_neighbours = 4;
  if (this->include_neighbours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_neighbours(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetClosestNodesByDistanceRequest)
  return target;
}

size_t GetClosestNodesByDistanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetClosestNodesByDistanceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // float max_radius_km = 2;
  if (this->max_radius_km() != 0) {
    total_size += 1 + 4;
  }

  // uint32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_node_count());
  }

  // bool include_neighbours = 4;
  if (this->include_neighbours() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClosestNodesByDistanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClosestNodesByDistanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClosestNodesByDistanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetClosestNodesByDistanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetClosestNodesByDistanceRequest)
    MergeFrom(*source);
  }
}

void GetClosestNodesByDistanceRequest::MergeFrom(const GetClosestNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
  if (from.max_radius_km() != 0) {
    set_max_radius_km(from.max_radius_km());
  }
  if (from.max_node_count() != 0) {
    set_max_node_count(from.max_node_count());
  }
  if (from.include_neighbours() != 0) {
    set_include_neighbours(from.include_neighbours());
  }
}

void GetClosestNodesByDistanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClosestNodesByDistanceRequest::CopyFrom(const GetClosestNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetClosestNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNodesByDistanceRequest::IsInitialized() const {
  return true;
}

void GetClosestNodesByDistanceRequest::Swap(GetClosestNodesByDistanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClosestNodesByDistanceRequest::InternalSwap(GetClosestNodesByDistanceRequest* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(max_radius_km_, other->max_radius_km_);
  swap(max_node_count_, other->max_node_count_);
  swap(include_neighbours_, other->include_neighbours_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClosestNodesByDistanceRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetClosestNodesByDistanceResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClosestNodesByDistanceResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClosestNodesByDistanceResponse::GetClosestNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetClosestNodesByDistanceResponse)
}
GetClosestNodesByDistanceResponse::GetClosestNodesByDistanceResponse(const GetClosestNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetClosestNodesByDistanceResponse)
}

void GetClosestNodesByDistanceResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetClosestNodesByDistanceResponse::~GetClosestNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetClosestNodesByDistanceResponse)
  SharedDtor();
}

void GetClosestNodesByDistanceResponse::SharedDtor() {
}

void GetClosestNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClosestNodesByDistanceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetClosestNodesByDistanceResponse& GetClosestNodesByDistanceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetClosestNodesByDistanceResponse();
  return *internal_default_instance();
}

GetClosestNodesByDistanceResponse* GetClosestNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  GetClosestNodesByDistanceResponse* n = new GetClosestNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClosestNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetClosestNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool GetClosestNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetClosestNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetClosestNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetClosestNodesByDistanceResponse)
  return false;
#undef DO_
}

void GetClosestNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetClosestNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetClosestNodesByDistanceResponse)
}

::google::protobuf::uint8* GetClosestNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetClosestNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetClosestNodesByDistanceResponse)
  return target;
}

size_t GetClosestNodesByDistanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetClosestNodesByDistanceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClosestNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClosestNodesByDistanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClosestNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetClosestNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetClosestNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void GetClosestNodesByDistanceResponse::MergeFrom(const GetClosestNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetClosestNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClosestNodesByDistanceResponse::CopyFrom(const GetClosestNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetClosestNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNodesByDistanceResponse::IsInitialized() const {
  return true;
}

void GetClosestNodesByDistanceResponse::Swap(GetClosestNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClosestNodesByDistanceResponse::InternalSwap(GetClosestNodesByDistanceResponse* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClosestNodesByDistanceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientRequest::InitAsDefaultInstance() {
  ::iop::locnet::_ClientRequest_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoRequest*>(
      ::iop::locnet::GetNodeInfoRequest::internal_default_instance());
  ::iop::locnet::_ClientRequest_default_instance_.get_neighbour_nodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceClientRequest*>(
      ::iop::locnet::GetNeighbourNodesByDistanceClientRequest::internal_default_instance());
  ::iop::locnet::_ClientRequest_default_instance_.get_closest_nodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceRequest*>(
      ::iop::locnet::GetClosestNodesByDistanceRequest::internal_default_instance());
  ::iop::locnet::_ClientRequest_default_instance_.explore_nodes_ = const_cast< ::iop::locnet::ExploreNetworkNodesByDistanceRequest*>(
      ::iop::locnet::ExploreNetworkNodesByDistanceRequest::internal_default_instance());
  ::iop::locnet::_ClientRequest_default_instance_.get_random_nodes_ = const_cast< ::iop::locnet::GetRandomNodesRequest*>(
      ::iop::locnet::GetRandomNodesRequest::internal_default_instance());
}
void ClientRequest::set_allocated_get_node_info(::iop::locnet::GetNodeInfoRequest* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientRequestType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    ClientRequestType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.get_node_info)
}
void ClientRequest::set_allocated_get_neighbour_nodes(::iop::locnet::GetNeighbourNodesByDistanceClientRequest* get_neighbour_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientRequestType();
  if (get_neighbour_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_neighbour_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_neighbour_nodes, submessage_arena);
    }
    set_has_get_neighbour_nodes();
    ClientRequestType_.get_neighbour_nodes_ = get_neighbour_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.get_neighbour_nodes)
}
void ClientRequest::set_allocated_get_closest_nodes(::iop::locnet::GetClosestNodesByDistanceRequest* get_closest_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientRequestType();
  if (get_closest_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_closest_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_closest_nodes, submessage_arena);
    }
    set_has_get_closest_nodes();
    ClientRequestType_.get_closest_nodes_ = get_closest_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.get_closest_nodes)
}
void ClientRequest::set_allocated_explore_nodes(::iop::locnet::ExploreNetworkNodesByDistanceRequest* explore_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientRequestType();
  if (explore_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      explore_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, explore_nodes, submessage_arena);
    }
    set_has_explore_nodes();
    ClientRequestType_.explore_nodes_ = explore_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.explore_nodes)
}
void ClientRequest::set_allocated_get_random_nodes(::iop::locnet::GetRandomNodesRequest* get_random_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientRequestType();
  if (get_random_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_random_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_random_nodes, submessage_arena);
    }
    set_has_get_random_nodes();
    ClientRequestType_.get_random_nodes_ = get_random_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientRequest.get_random_nodes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRequest::kGetNodeInfoFieldNumber;
const int ClientRequest::kGetNeighbourNodesFieldNumber;
const int ClientRequest::kGetClosestNodesFieldNumber;
const int ClientRequest::kExploreNodesFieldNumber;
const int ClientRequest::kGetRandomNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRequest::ClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsClientRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ClientRequest)
}
ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ClientRequestType();
  switch (from.ClientRequestType_case()) {
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceClientRequest::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kExploreNodes: {
      mutable_explore_nodes()->::iop::locnet::ExploreNetworkNodesByDistanceRequest::MergeFrom(from.explore_nodes());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesRequest::MergeFrom(from.get_random_nodes());
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ClientRequest)
}

void ClientRequest::SharedCtor() {
  clear_has_ClientRequestType();
  _cached_size_ = 0;
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (has_ClientRequestType()) {
    clear_ClientRequestType();
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientRequest& ClientRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsClientRequest();
  return *internal_default_instance();
}

ClientRequest* ClientRequest::New(::google::protobuf::Arena* arena) const {
  ClientRequest* n = new ClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientRequest::clear_ClientRequestType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.ClientRequest)
  switch (ClientRequestType_case()) {
    case kGetNodeInfo: {
      delete ClientRequestType_.get_node_info_;
      break;
    }
    case kGetNeighbourNodes: {
      delete ClientRequestType_.get_neighbour_nodes_;
      break;
    }
    case kGetClosestNodes: {
      delete ClientRequestType_.get_closest_nodes_;
      break;
    }
    case kExploreNodes: {
      delete ClientRequestType_.explore_nodes_;
      break;
    }
    case kGetRandomNodes: {
      delete ClientRequestType_.get_random_nodes_;
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIENTREQUESTTYPE_NOT_SET;
}


void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ClientRequestType();
  _internal_metadata_.Clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.GetNodeInfoRequest get_node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_neighbour_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_closest_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explore_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetRandomNodesRequest get_random_nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_random_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GetNodeInfoRequest get_node_info = 1;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ClientRequestType_.get_node_info_, output);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;
  if (has_get_neighbour_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ClientRequestType_.get_neighbour_nodes_, output);
  }

  // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 3;
  if (has_get_closest_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *ClientRequestType_.get_closest_nodes_, output);
  }

  // .iop.locnet.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;
  if (has_explore_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ClientRequestType_.explore_nodes_, output);
  }

  // .iop.locnet.GetRandomNodesRequest get_random_nodes = 5;
  if (has_get_random_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *ClientRequestType_.get_random_nodes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.ClientRequest)
}

::google::protobuf::uint8* ClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GetNodeInfoRequest get_node_info = 1;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *ClientRequestType_.get_node_info_, deterministic, target);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;
  if (has_get_neighbour_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *ClientRequestType_.get_neighbour_nodes_, deterministic, target);
  }

  // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 3;
  if (has_get_closest_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *ClientRequestType_.get_closest_nodes_, deterministic, target);
  }

  // .iop.locnet.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;
  if (has_explore_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *ClientRequestType_.explore_nodes_, deterministic, target);
  }

  // .iop.locnet.GetRandomNodesRequest get_random_nodes = 5;
  if (has_get_random_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *ClientRequestType_.get_random_nodes_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ClientRequest)
  return target;
}

size_t ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ClientRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ClientRequestType_case()) {
    // .iop.locnet.GetNodeInfoRequest get_node_info = 1;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientRequestType_.get_node_info_);
      break;
    }
    // .iop.locnet.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientRequestType_.get_neighbour_nodes_);
      break;
    }
    // .iop.locnet.GetClosestNodesByDistanceRequest get_closest_nodes = 3;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientRequestType_.get_closest_nodes_);
      break;
    }
    // .iop.locnet.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;
    case kExploreNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientRequestType_.explore_nodes_);
      break;
    }
    // .iop.locnet.GetRandomNodesRequest get_random_nodes = 5;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientRequestType_.get_random_nodes_);
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ClientRequest)
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ClientRequestType_case()) {
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoRequest::MergeFrom(from.get_node_info());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceClientRequest::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceRequest::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kExploreNodes: {
      mutable_explore_nodes()->::iop::locnet::ExploreNetworkNodesByDistanceRequest::MergeFrom(from.explore_nodes());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesRequest::MergeFrom(from.get_random_nodes());
      break;
    }
    case CLIENTREQUESTTYPE_NOT_SET: {
      break;
    }
  }
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRequest::InternalSwap(ClientRequest* other) {
  using std::swap;
  swap(ClientRequestType_, other->ClientRequestType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientResponse::InitAsDefaultInstance() {
  ::iop::locnet::_ClientResponse_default_instance_.get_node_info_ = const_cast< ::iop::locnet::GetNodeInfoResponse*>(
      ::iop::locnet::GetNodeInfoResponse::internal_default_instance());
  ::iop::locnet::_ClientResponse_default_instance_.get_neighbour_nodes_ = const_cast< ::iop::locnet::GetNeighbourNodesByDistanceResponse*>(
      ::iop::locnet::GetNeighbourNodesByDistanceResponse::internal_default_instance());
  ::iop::locnet::_ClientResponse_default_instance_.get_closest_nodes_ = const_cast< ::iop::locnet::GetClosestNodesByDistanceResponse*>(
      ::iop::locnet::GetClosestNodesByDistanceResponse::internal_default_instance());
  ::iop::locnet::_ClientResponse_default_instance_.explore_nodes_ = const_cast< ::iop::locnet::ExploreNetworkNodesByDistanceResponse*>(
      ::iop::locnet::ExploreNetworkNodesByDistanceResponse::internal_default_instance());
  ::iop::locnet::_ClientResponse_default_instance_.get_random_nodes_ = const_cast< ::iop::locnet::GetRandomNodesResponse*>(
      ::iop::locnet::GetRandomNodesResponse::internal_default_instance());
}
void ClientResponse::set_allocated_get_node_info(::iop::locnet::GetNodeInfoResponse* get_node_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientResponseType();
  if (get_node_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_node_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_node_info, submessage_arena);
    }
    set_has_get_node_info();
    ClientResponseType_.get_node_info_ = get_node_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.get_node_info)
}
void ClientResponse::set_allocated_get_neighbour_nodes(::iop::locnet::GetNeighbourNodesByDistanceResponse* get_neighbour_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientResponseType();
  if (get_neighbour_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_neighbour_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_neighbour_nodes, submessage_arena);
    }
    set_has_get_neighbour_nodes();
    ClientResponseType_.get_neighbour_nodes_ = get_neighbour_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.get_neighbour_nodes)
}
void ClientResponse::set_allocated_get_closest_nodes(::iop::locnet::GetClosestNodesByDistanceResponse* get_closest_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientResponseType();
  if (get_closest_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_closest_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_closest_nodes, submessage_arena);
    }
    set_has_get_closest_nodes();
    ClientResponseType_.get_closest_nodes_ = get_closest_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.get_closest_nodes)
}
void ClientResponse::set_allocated_explore_nodes(::iop::locnet::ExploreNetworkNodesByDistanceResponse* explore_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientResponseType();
  if (explore_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      explore_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, explore_nodes, submessage_arena);
    }
    set_has_explore_nodes();
    ClientResponseType_.explore_nodes_ = explore_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.explore_nodes)
}
void ClientResponse::set_allocated_get_random_nodes(::iop::locnet::GetRandomNodesResponse* get_random_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ClientResponseType();
  if (get_random_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_random_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_random_nodes, submessage_arena);
    }
    set_has_get_random_nodes();
    ClientResponseType_.get_random_nodes_ = get_random_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:iop.locnet.ClientResponse.get_random_nodes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientResponse::kGetNodeInfoFieldNumber;
const int ClientResponse::kGetNeighbourNodesFieldNumber;
const int ClientResponse::kGetClosestNodesFieldNumber;
const int ClientResponse::kExploreNodesFieldNumber;
const int ClientResponse::kGetRandomNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientResponse::ClientResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsClientResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ClientResponse)
}
ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ClientResponseType();
  switch (from.ClientResponseType_case()) {
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kExploreNodes: {
      mutable_explore_nodes()->::iop::locnet::ExploreNetworkNodesByDistanceResponse::MergeFrom(from.explore_nodes());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesResponse::MergeFrom(from.get_random_nodes());
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ClientResponse)
}

void ClientResponse::SharedCtor() {
  clear_has_ClientResponseType();
  _cached_size_ = 0;
}

ClientResponse::~ClientResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.ClientResponse)
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  if (has_ClientResponseType()) {
    clear_ClientResponseType();
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientResponse& ClientResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsClientResponse();
  return *internal_default_instance();
}

ClientResponse* ClientResponse::New(::google::protobuf::Arena* arena) const {
  ClientResponse* n = new ClientResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientResponse::clear_ClientResponseType() {
// @@protoc_insertion_point(one_of_clear_start:iop.locnet.ClientResponse)
  switch (ClientResponseType_case()) {
    case kGetNodeInfo: {
      delete ClientResponseType_.get_node_info_;
      break;
    }
    case kGetNeighbourNodes: {
      delete ClientResponseType_.get_neighbour_nodes_;
      break;
    }
    case kGetClosestNodes: {
      delete ClientResponseType_.get_closest_nodes_;
      break;
    }
    case kExploreNodes: {
      delete ClientResponseType_.explore_nodes_;
      break;
    }
    case kGetRandomNodes: {
      delete ClientResponseType_.get_random_nodes_;
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLIENTRESPONSETYPE_NOT_SET;
}


void ClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ClientResponseType();
  _internal_metadata_.Clear();
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.GetNodeInfoResponse get_node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_neighbour_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_closest_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explore_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .iop.locnet.GetRandomNodesResponse get_random_nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_random_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ClientResponse)
  return false;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GetNodeInfoResponse get_node_info = 1;
  if (has_get_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ClientResponseType_.get_node_info_, output);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;
  if (has_get_neighbour_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ClientResponseType_.get_neighbour_nodes_, output);
  }

  // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 3;
  if (has_get_closest_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *ClientResponseType_.get_closest_nodes_, output);
  }

  // .iop.locnet.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;
  if (has_explore_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ClientResponseType_.explore_nodes_, output);
  }

  // .iop.locnet.GetRandomNodesResponse get_random_nodes = 5;
  if (has_get_random_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *ClientResponseType_.get_random_nodes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.ClientResponse)
}

::google::protobuf::uint8* ClientResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GetNodeInfoResponse get_node_info = 1;
  if (has_get_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *ClientResponseType_.get_node_info_, deterministic, target);
  }

  // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;
  if (has_get_neighbour_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *ClientResponseType_.get_neighbour_nodes_, deterministic, target);
  }

  // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 3;
  if (has_get_closest_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *ClientResponseType_.get_closest_nodes_, deterministic, target);
  }

  // .iop.locnet.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;
  if (has_explore_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *ClientResponseType_.explore_nodes_, deterministic, target);
  }

  // .iop.locnet.GetRandomNodesResponse get_random_nodes = 5;
  if (has_get_random_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *ClientResponseType_.get_random_nodes_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ClientResponse)
  return target;
}

size_t ClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ClientResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ClientResponseType_case()) {
    // .iop.locnet.GetNodeInfoResponse get_node_info = 1;
    case kGetNodeInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientResponseType_.get_node_info_);
      break;
    }
    // .iop.locnet.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;
    case kGetNeighbourNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientResponseType_.get_neighbour_nodes_);
      break;
    }
    // .iop.locnet.GetClosestNodesByDistanceResponse get_closest_nodes = 3;
    case kGetClosestNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientResponseType_.get_closest_nodes_);
      break;
    }
    // .iop.locnet.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;
    case kExploreNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientResponseType_.explore_nodes_);
      break;
    }
    // .iop.locnet.GetRandomNodesResponse get_random_nodes = 5;
    case kGetRandomNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ClientResponseType_.get_random_nodes_);
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ClientResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ClientResponse)
    MergeFrom(*source);
  }
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ClientResponseType_case()) {
    case kGetNodeInfo: {
      mutable_get_node_info()->::iop::locnet::GetNodeInfoResponse::MergeFrom(from.get_node_info());
      break;
    }
    case kGetNeighbourNodes: {
      mutable_get_neighbour_nodes()->::iop::locnet::GetNeighbourNodesByDistanceResponse::MergeFrom(from.get_neighbour_nodes());
      break;
    }
    case kGetClosestNodes: {
      mutable_get_closest_nodes()->::iop::locnet::GetClosestNodesByDistanceResponse::MergeFrom(from.get_closest_nodes());
      break;
    }
    case kExploreNodes: {
      mutable_explore_nodes()->::iop::locnet::ExploreNetworkNodesByDistanceResponse::MergeFrom(from.explore_nodes());
      break;
    }
    case kGetRandomNodes: {
      mutable_get_random_nodes()->::iop::locnet::GetRandomNodesResponse::MergeFrom(from.get_random_nodes());
      break;
    }
    case CLIENTRESPONSETYPE_NOT_SET: {
      break;
    }
  }
}

void ClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {
  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientResponse::InternalSwap(ClientResponse* other) {
  using std::swap;
  swap(ClientResponseType_, other->ClientResponseType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNodeInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoRequest::GetNodeInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeInfoRequest)
}
GetNodeInfoRequest::GetNodeInfoRequest(const GetNodeInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeInfoRequest)
}

void GetNodeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetNodeInfoRequest::~GetNodeInfoRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeInfoRequest)
  SharedDtor();
}

void GetNodeInfoRequest::SharedDtor() {
}

void GetNodeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeInfoRequest& GetNodeInfoRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoRequest();
  return *internal_default_instance();
}

GetNodeInfoRequest* GetNodeInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoRequest* n = new GetNodeInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetNodeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeInfoRequest)
  return false;
#undef DO_
}

void GetNodeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeInfoRequest)
}

::google::protobuf::uint8* GetNodeInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeInfoRequest)
  return target;
}

size_t GetNodeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeInfoRequest)
    MergeFrom(*source);
  }
}

void GetNodeInfoRequest::MergeFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNodeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoRequest::CopyFrom(const GetNodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoRequest::IsInitialized() const {
  return true;
}

void GetNodeInfoRequest::Swap(GetNodeInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoRequest::InternalSwap(GetNodeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNodeInfoResponse::InitAsDefaultInstance() {
  ::iop::locnet::_GetNodeInfoResponse_default_instance_._instance.get_mutable()->node_info_ = const_cast< ::iop::locnet::NodeInfo*>(
      ::iop::locnet::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInfoResponse::kNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInfoResponse::GetNodeInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNodeInfoResponse)
}
GetNodeInfoResponse::GetNodeInfoResponse(const GetNodeInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_info()) {
    node_info_ = new ::iop::locnet::NodeInfo(*from.node_info_);
  } else {
    node_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNodeInfoResponse)
}

void GetNodeInfoResponse::SharedCtor() {
  node_info_ = NULL;
  _cached_size_ = 0;
}

GetNodeInfoResponse::~GetNodeInfoResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNodeInfoResponse)
  SharedDtor();
}

void GetNodeInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete node_info_;
}

void GetNodeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInfoResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeInfoResponse& GetNodeInfoResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNodeInfoResponse();
  return *internal_default_instance();
}

GetNodeInfoResponse* GetNodeInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeInfoResponse* n = new GetNodeInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_info_ != NULL) {
    delete node_info_;
  }
  node_info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNodeInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.NodeInfo node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNodeInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNodeInfoResponse)
  return false;
#undef DO_
}

void GetNodeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo node_info = 1;
  if (this->has_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNodeInfoResponse)
}

::google::protobuf::uint8* GetNodeInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNodeInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.NodeInfo node_info = 1;
  if (this->has_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->node_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNodeInfoResponse)
  return target;
}

size_t GetNodeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNodeInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.NodeInfo node_info = 1;
  if (this->has_node_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->node_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNodeInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNodeInfoResponse)
    MergeFrom(*source);
  }
}

void GetNodeInfoResponse::MergeFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_info()) {
    mutable_node_info()->::iop::locnet::NodeInfo::MergeFrom(from.node_info());
  }
}

void GetNodeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoResponse::CopyFrom(const GetNodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoResponse::IsInitialized() const {
  return true;
}

void GetNodeInfoResponse::Swap(GetNodeInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInfoResponse::InternalSwap(GetNodeInfoResponse* other) {
  using std::swap;
  swap(node_info_, other->node_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInfoResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNeighbourNodesByDistanceClientRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNeighbourNodesByDistanceClientRequest::GetNeighbourNodesByDistanceClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceClientRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}
GetNeighbourNodesByDistanceClientRequest::GetNeighbourNodesByDistanceClientRequest(const GetNeighbourNodesByDistanceClientRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

void GetNeighbourNodesByDistanceClientRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetNeighbourNodesByDistanceClientRequest::~GetNeighbourNodesByDistanceClientRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  SharedDtor();
}

void GetNeighbourNodesByDistanceClientRequest::SharedDtor() {
}

void GetNeighbourNodesByDistanceClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNeighbourNodesByDistanceClientRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNeighbourNodesByDistanceClientRequest& GetNeighbourNodesByDistanceClientRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsGetNeighbourNodesByDistanceClientRequest();
  return *internal_default_instance();
}

GetNeighbourNodesByDistanceClientRequest* GetNeighbourNodesByDistanceClientRequest::New(::google::protobuf::Arena* arena) const {
  GetNeighbourNodesByDistanceClientRequest* n = new GetNeighbourNodesByDistanceClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNeighbourNodesByDistanceClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetNeighbourNodesByDistanceClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return false;
#undef DO_
}

void GetNeighbourNodesByDistanceClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
}

::google::protobuf::uint8* GetNeighbourNodesByDistanceClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  return target;
}

size_t GetNeighbourNodesByDistanceClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNeighbourNodesByDistanceClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNeighbourNodesByDistanceClientRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNeighbourNodesByDistanceClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
    MergeFrom(*source);
  }
}

void GetNeighbourNodesByDistanceClientRequest::MergeFrom(const GetNeighbourNodesByDistanceClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNeighbourNodesByDistanceClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNeighbourNodesByDistanceClientRequest::CopyFrom(const GetNeighbourNodesByDistanceClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.GetNeighbourNodesByDistanceClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNeighbourNodesByDistanceClientRequest::IsInitialized() const {
  return true;
}

void GetNeighbourNodesByDistanceClientRequest::Swap(GetNeighbourNodesByDistanceClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNeighbourNodesByDistanceClientRequest::InternalSwap(GetNeighbourNodesByDistanceClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNeighbourNodesByDistanceClientRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExploreNetworkNodesByDistanceRequest::InitAsDefaultInstance() {
  ::iop::locnet::_ExploreNetworkNodesByDistanceRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::iop::locnet::GpsLocation*>(
      ::iop::locnet::GpsLocation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExploreNetworkNodesByDistanceRequest::kLocationFieldNumber;
const int ExploreNetworkNodesByDistanceRequest::kTargetNodeCountFieldNumber;
const int ExploreNetworkNodesByDistanceRequest::kMaxNodeHopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExploreNetworkNodesByDistanceRequest::ExploreNetworkNodesByDistanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}
ExploreNetworkNodesByDistanceRequest::ExploreNetworkNodesByDistanceRequest(const ExploreNetworkNodesByDistanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::iop::locnet::GpsLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&target_node_count_, &from.target_node_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_node_hops_) -
    reinterpret_cast<char*>(&target_node_count_)) + sizeof(max_node_hops_));
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}

void ExploreNetworkNodesByDistanceRequest::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_node_hops_) -
      reinterpret_cast<char*>(&location_)) + sizeof(max_node_hops_));
  _cached_size_ = 0;
}

ExploreNetworkNodesByDistanceRequest::~ExploreNetworkNodesByDistanceRequest() {
  // @@protoc_insertion_point(destructor:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  SharedDtor();
}

void ExploreNetworkNodesByDistanceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void ExploreNetworkNodesByDistanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceRequest::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExploreNetworkNodesByDistanceRequest& ExploreNetworkNodesByDistanceRequest::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceRequest();
  return *internal_default_instance();
}

ExploreNetworkNodesByDistanceRequest* ExploreNetworkNodesByDistanceRequest::New(::google::protobuf::Arena* arena) const {
  ExploreNetworkNodesByDistanceRequest* n = new ExploreNetworkNodesByDistanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExploreNetworkNodesByDistanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&target_node_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_node_hops_) -
      reinterpret_cast<char*>(&target_node_count_)) + sizeof(max_node_hops_));
  _internal_metadata_.Clear();
}

bool ExploreNetworkNodesByDistanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .iop.locnet.GpsLocation location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_node_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_node_hops = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_node_hops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return false;
#undef DO_
}

void ExploreNetworkNodesByDistanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // uint32 target_node_count = 2;
  if (this->target_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_node_count(), output);
  }

  // uint32 max_node_hops = 3;
  if (this->max_node_hops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_node_hops(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.ExploreNetworkNodesByDistanceRequest)
}

::google::protobuf::uint8* ExploreNetworkNodesByDistanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->location_, deterministic, target);
  }

  // uint32 target_node_count = 2;
  if (this->target_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_node_count(), target);
  }

  // uint32 max_node_hops = 3;
  if (this->max_node_hops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_node_hops(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  return target;
}

size_t ExploreNetworkNodesByDistanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .iop.locnet.GpsLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // uint32 target_node_count = 2;
  if (this->target_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_node_count());
  }

  // uint32 max_node_hops = 3;
  if (this->max_node_hops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_node_hops());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreNetworkNodesByDistanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExploreNetworkNodesByDistanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExploreNetworkNodesByDistanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ExploreNetworkNodesByDistanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ExploreNetworkNodesByDistanceRequest)
    MergeFrom(*source);
  }
}

void ExploreNetworkNodesByDistanceRequest::MergeFrom(const ExploreNetworkNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::iop::locnet::GpsLocation::MergeFrom(from.location());
  }
  if (from.target_node_count() != 0) {
    set_target_node_count(from.target_node_count());
  }
  if (from.max_node_hops() != 0) {
    set_max_node_hops(from.max_node_hops());
  }
}

void ExploreNetworkNodesByDistanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploreNetworkNodesByDistanceRequest::CopyFrom(const ExploreNetworkNodesByDistanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreNetworkNodesByDistanceRequest::IsInitialized() const {
  return true;
}

void ExploreNetworkNodesByDistanceRequest::Swap(ExploreNetworkNodesByDistanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExploreNetworkNodesByDistanceRequest::InternalSwap(ExploreNetworkNodesByDistanceRequest* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(target_node_count_, other->target_node_count_);
  swap(max_node_hops_, other->max_node_hops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExploreNetworkNodesByDistanceRequest::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExploreNetworkNodesByDistanceResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExploreNetworkNodesByDistanceResponse::kClosestNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExploreNetworkNodesByDistanceResponse::ExploreNetworkNodesByDistanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}
ExploreNetworkNodesByDistanceResponse::ExploreNetworkNodesByDistanceResponse(const ExploreNetworkNodesByDistanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      closest_nodes_(from.closest_nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}

void ExploreNetworkNodesByDistanceResponse::SharedCtor() {
  _cached_size_ = 0;
}

ExploreNetworkNodesByDistanceResponse::~ExploreNetworkNodesByDistanceResponse() {
  // @@protoc_insertion_point(destructor:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  SharedDtor();
}

void ExploreNetworkNodesByDistanceResponse::SharedDtor() {
}

void ExploreNetworkNodesByDistanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploreNetworkNodesByDistanceResponse::descriptor() {
  ::protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExploreNetworkNodesByDistanceResponse& ExploreNetworkNodesByDistanceResponse::default_instance() {
  ::protobuf_IopLocNet_2eproto::InitDefaultsExploreNetworkNodesByDistanceResponse();
  return *internal_default_instance();
}

ExploreNetworkNodesByDistanceResponse* ExploreNetworkNodesByDistanceResponse::New(::google::protobuf::Arena* arena) const {
  ExploreNetworkNodesByDistanceResponse* n = new ExploreNetworkNodesByDistanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExploreNetworkNodesByDistanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closest_nodes_.Clear();
  _internal_metadata_.Clear();
}

bool ExploreNetworkNodesByDistanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iop.locnet.NodeInfo closest_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_closest_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return false;
#undef DO_
}

void ExploreNetworkNodesByDistanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo closest_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->closest_nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->closest_nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:iop.locnet.ExploreNetworkNodesByDistanceResponse)
}

::google::protobuf::uint8* ExploreNetworkNodesByDistanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iop.locnet.NodeInfo closest_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->closest_nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->closest_nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  return target;
}

size_t ExploreNetworkNodesByDistanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .iop.locnet.NodeInfo closest_nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->closest_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->closest_nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreNetworkNodesByDistanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExploreNetworkNodesByDistanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExploreNetworkNodesByDistanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iop.locnet.ExploreNetworkNodesByDistanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iop.locnet.ExploreNetworkNodesByDistanceResponse)
    MergeFrom(*source);
  }
}

void ExploreNetworkNodesByDistanceResponse::MergeFrom(const ExploreNetworkNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  closest_nodes_.MergeFrom(from.closest_nodes_);
}

void ExploreNetworkNodesByDistanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploreNetworkNodesByDistanceResponse::CopyFrom(const ExploreNetworkNodesByDistanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iop.locnet.ExploreNetworkNodesByDistanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreNetworkNodesByDistanceResponse::IsInitialized() const {
  return true;
}

void ExploreNetworkNodesByDistanceResponse::Swap(ExploreNetworkNodesByDistanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExploreNetworkNodesByDistanceResponse::InternalSwap(ExploreNetworkNodesByDistanceResponse* other) {
  using std::swap;
  closest_nodes_.InternalSwap(&other->closest_nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExploreNetworkNodesByDistanceResponse::GetMetadata() const {
  protobuf_IopLocNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IopLocNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace locnet
}  // namespace iop

// @@protoc_insertion_point(global_scope)
